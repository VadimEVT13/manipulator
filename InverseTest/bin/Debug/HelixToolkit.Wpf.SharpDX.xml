<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HelixToolkit.Wpf.SharpDX</name>
    </assembly>
    <members>
        <member name="T:HelixToolkit.Wpf.SharpDX.CameraController">
            <summary>
            Provides a control that manipulates the camera by mouse and keyboard gestures.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CameraController.CameraModeProperty">
            <summary>
            Identifies the <see cref="P:HelixToolkit.Wpf.SharpDX.CameraController.CameraMode"/> dependency property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CameraController.CameraProperty">
            <summary>
            Identifies the <see cref="P:HelixToolkit.Wpf.SharpDX.CameraController.Camera"/> dependency property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CameraController.CameraRotationModeProperty">
            <summary>
            Identifies the <see cref="P:HelixToolkit.Wpf.SharpDX.CameraController.CameraRotationMode"/> dependency property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CameraController.ChangeFieldOfViewCursorProperty">
            <summary>
            Identifies the <see cref="P:HelixToolkit.Wpf.SharpDX.CameraController.ChangeFieldOfViewCursor"/> dependency property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CameraController.DefaultCameraProperty">
            <summary>
            Identifies the <see cref="P:HelixToolkit.Wpf.SharpDX.CameraController.DefaultCamera"/> dependency property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CameraController.EnabledProperty">
            <summary>
            Identifies the <see cref="P:HelixToolkit.Wpf.SharpDX.CameraController.Enabled"/> dependency property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CameraController.InertiaFactorProperty">
            <summary>
            Identifies the <see cref="P:HelixToolkit.Wpf.SharpDX.CameraController.InertiaFactor"/> dependency property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CameraController.InfiniteSpinProperty">
            <summary>
            Identifies the <see cref="P:HelixToolkit.Wpf.SharpDX.CameraController.InfiniteSpin"/> dependency property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CameraController.IsChangeFieldOfViewEnabledProperty">
            <summary>
            Identifies the <see cref="P:HelixToolkit.Wpf.SharpDX.CameraController.IsChangeFieldOfViewEnabled"/> dependency property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CameraController.IsInertiaEnabledProperty">
            <summary>
            Identifies the <see cref="P:HelixToolkit.Wpf.SharpDX.CameraController.IsInertiaEnabled"/> dependency property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CameraController.IsMoveEnabledProperty">
            <summary>
            Identifies the <see cref="P:HelixToolkit.Wpf.SharpDX.CameraController.IsMoveEnabled"/> dependency property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CameraController.IsPanEnabledProperty">
            <summary>
            Identifies the <see cref="P:HelixToolkit.Wpf.SharpDX.CameraController.IsPanEnabled"/> dependency property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CameraController.IsRotationEnabledProperty">
            <summary>
            Identifies the <see cref="P:HelixToolkit.Wpf.SharpDX.CameraController.IsRotationEnabled"/> dependency property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CameraController.IsTouchZoomEnabledProperty">
            <summary>
            Identifies the <see cref="P:HelixToolkit.Wpf.SharpDX.CameraController.IsTouchZoomEnabled"/> dependency property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CameraController.IsZoomEnabledProperty">
            <summary>
            Identifies the <see cref="P:HelixToolkit.Wpf.SharpDX.CameraController.IsZoomEnabled"/> dependency property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CameraController.LeftRightPanSensitivityProperty">
            <summary>
            Identifies the <see cref="P:HelixToolkit.Wpf.SharpDX.CameraController.LeftRightPanSensitivity"/> dependency property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CameraController.LeftRightRotationSensitivityProperty">
            <summary>
            Identifies the <see cref="P:HelixToolkit.Wpf.SharpDX.CameraController.LeftRightRotationSensitivity"/> dependency property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CameraController.LookAtChangedEvent">
            <summary>
            The look at (target) point changed event
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CameraController.MaximumFieldOfViewProperty">
            <summary>
            Identifies the <see cref="P:HelixToolkit.Wpf.SharpDX.CameraController.MaximumFieldOfView"/> dependency property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CameraController.MinimumFieldOfViewProperty">
            <summary>
            Identifies the <see cref="P:HelixToolkit.Wpf.SharpDX.CameraController.MinimumFieldOfView"/> dependency property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CameraController.ModelUpDirectionProperty">
            <summary>
            Identifies the <see cref="P:HelixToolkit.Wpf.SharpDX.CameraController.ModelUpDirection"/> dependency property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CameraController.MoveSensitivityProperty">
            <summary>
            Identifies the <see cref="P:HelixToolkit.Wpf.SharpDX.CameraController.MoveSensitivity"/> dependency property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CameraController.PageUpDownZoomSensitivityProperty">
            <summary>
            Identifies the <see cref="P:HelixToolkit.Wpf.SharpDX.CameraController.PageUpDownZoomSensitivity"/> dependency property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CameraController.PanCursorProperty">
            <summary>
            Identifies the <see cref="P:HelixToolkit.Wpf.SharpDX.CameraController.PanCursor"/> dependency property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CameraController.RotateAroundMouseDownPointProperty">
            <summary>
            Identifies the <see cref="P:HelixToolkit.Wpf.SharpDX.CameraController.RotateAroundMouseDownPoint"/> dependency property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CameraController.RotateCursorProperty">
            <summary>
            Identifies the <see cref="P:HelixToolkit.Wpf.SharpDX.CameraController.RotateCursor"/> dependency property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CameraController.RotationSensitivityProperty">
            <summary>
            Identifies the <see cref="P:HelixToolkit.Wpf.SharpDX.CameraController.RotationSensitivity"/> dependency property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CameraController.ShowCameraTargetProperty">
            <summary>
            Identifies the <see cref="P:HelixToolkit.Wpf.SharpDX.CameraController.ShowCameraTarget"/> dependency property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CameraController.SpinReleaseTimeProperty">
            <summary>
            Identifies the <see cref="P:HelixToolkit.Wpf.SharpDX.CameraController.SpinReleaseTime"/> dependency property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CameraController.UpDownPanSensitivityProperty">
            <summary>
            Identifies the <see cref="P:HelixToolkit.Wpf.SharpDX.CameraController.UpDownPanSensitivity"/> dependency property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CameraController.UpDownRotationSensitivityProperty">
            <summary>
            Identifies the <see cref="P:HelixToolkit.Wpf.SharpDX.CameraController.UpDownRotationSensitivity"/> dependency property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CameraController.ViewportProperty">
            <summary>
            Identifies the <see cref="P:HelixToolkit.Wpf.SharpDX.CameraController.Viewport"/> dependency property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CameraController.ZoomAroundMouseDownPointProperty">
            <summary>
            Identifies the <see cref="P:HelixToolkit.Wpf.SharpDX.CameraController.ZoomAroundMouseDownPoint"/> dependency property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CameraController.ZoomCursorProperty">
            <summary>
            Identifies the <see cref="P:HelixToolkit.Wpf.SharpDX.CameraController.ZoomCursor"/> dependency property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CameraController.ZoomRectangleCursorProperty">
            <summary>
            Identifies the <see cref="P:HelixToolkit.Wpf.SharpDX.CameraController.ZoomRectangleCursor"/> dependency property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CameraController.ZoomSensitivityProperty">
            <summary>
            Identifies the <see cref="P:HelixToolkit.Wpf.SharpDX.CameraController.ZoomSensitivity"/> dependency property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CameraController.ZoomedByRectangleEvent">
            <summary>
            The zoomed by rectangle event
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CameraController.cameraHistory">
            <summary>
            The camera history stack.
            </summary>
            <remarks>
            Implemented as a list since we want to remove items at the bottom of the stack.
            </remarks>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CameraController.renderingEventListener">
            <summary>
            The rendering event listener.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CameraController.changeFieldOfViewHandler">
            <summary>
            The change field of view event handler.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CameraController.changeLookAtHandler">
            <summary>
            The change look at event handler.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CameraController.isSpinning">
            <summary>
            The is spinning flag.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CameraController.lastTick">
            <summary>
            The last tick.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CameraController.moveSpeed">
            <summary>
            The move speed.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CameraController.panHandler">
            <summary>
            The pan event handler.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CameraController.panSpeed">
            <summary>
            The pan speed.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CameraController.rectangleAdorner">
            <summary>
            The rectangle adorner.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CameraController.rotateHandler">
            <summary>
            The rotation event handler.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CameraController.rotationPoint3D">
            <summary>
            The 3D rotation point.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CameraController.rotationPosition">
            <summary>
            The rotation position.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CameraController.rotationSpeed">
            <summary>
            The rotation speed.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CameraController.spinningPoint3D">
            <summary>
            The 3D point to spin around.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CameraController.spinningPosition">
            <summary>
            The spinning position.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CameraController.spinningSpeed">
            <summary>
            The spinning speed.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CameraController.targetAdorner">
            <summary>
            The target adorner.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CameraController.touchPreviousPoint">
            <summary>
            The touch point in the last touch delta event
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CameraController.manipulatorCount">
            <summary>
            The number of touch manipulators (fingers) in the last touch delta event
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CameraController.zoomHandler">
            <summary>
            The zoom event handler.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CameraController.zoomPoint3D">
            <summary>
            The point to zoom around.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CameraController.zoomRectangleHandler">
            <summary>
            The zoom rectangle event handler.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CameraController.zoomSpeed">
            <summary>
            The zoom speed.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraController.#cctor">
            <summary>
            Initializes static members of the <see cref="T:HelixToolkit.Wpf.SharpDX.CameraController" /> class.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraController.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Wpf.SharpDX.CameraController" /> class.
            </summary>
        </member>
        <member name="E:HelixToolkit.Wpf.SharpDX.CameraController.LookAtChanged">
            <summary>
            Occurs when the look at/target point changed.
            </summary>
        </member>
        <member name="E:HelixToolkit.Wpf.SharpDX.CameraController.ZoomedByRectangle">
            <summary>
            Occurs when the view is zoomed by rectangle.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.CameraController.BackViewCommand">
            <summary>
            Gets the back view command.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.CameraController.BottomViewCommand">
            <summary>
            Gets the bottom view command.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.CameraController.ChangeFieldOfViewCommand">
            <summary>
            Gets the change field of view command.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.CameraController.ChangeLookAtCommand">
            <summary>
            Gets the change look at command.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.CameraController.FrontViewCommand">
            <summary>
            Gets the front view command.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.CameraController.LeftViewCommand">
            <summary>
            Gets the left view command.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.CameraController.PanCommand">
            <summary>
            Gets the pan command.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.CameraController.ResetCameraCommand">
            <summary>
            Gets the reset camera command.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.CameraController.RightViewCommand">
            <summary>
            Gets the right view command.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.CameraController.RotateCommand">
            <summary>
            Gets the rotate command.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.CameraController.TopViewCommand">
            <summary>
            Gets the top view command.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.CameraController.ZoomCommand">
            <summary>
            Gets the zoom command.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.CameraController.ZoomExtentsCommand">
            <summary>
            Gets the zoom extents command.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.CameraController.ZoomRectangleCommand">
            <summary>
            Gets the zoom rectangle command.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.CameraController.ActualCamera">
            <summary>
            Gets ActualCamera.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.CameraController.Camera">
            <summary>
            Gets or sets Camera.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.CameraController.CameraLookDirection">
            <summary>
            Gets or sets CameraLookDirection.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.CameraController.CameraMode">
            <summary>
            Gets or sets CameraMode.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.CameraController.CameraPosition">
            <summary>
            Gets or sets CameraPosition.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.CameraController.CameraRotationMode">
            <summary>
            Gets or sets CameraRotationMode.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.CameraController.CameraTarget">
            <summary>
            Gets or sets CameraTarget.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.CameraController.CameraUpDirection">
            <summary>
            Gets or sets CameraUpDirection.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.CameraController.ChangeFieldOfViewCursor">
            <summary>
            Gets or sets the change field of view cursor.
            </summary>
            <value> The change field of view cursor. </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.CameraController.DefaultCamera">
            <summary>
            Gets or sets the default camera (used when resetting the view).
            </summary>
            <value> The default camera. </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.CameraController.Enabled">
            <summary>
            Gets or sets a value indicating whether Enabled.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.CameraController.InertiaFactor">
            <summary>
            Gets or sets InertiaFactor.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.CameraController.InfiniteSpin">
            <summary>
            Gets or sets a value indicating whether InfiniteSpin.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.CameraController.IsActive">
            <summary>
            Gets a value indicating whether IsActive.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.CameraController.IsChangeFieldOfViewEnabled">
            <summary>
            Gets or sets a value indicating whether field of view can be changed.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.CameraController.IsInertiaEnabled">
            <summary>
            Gets or sets a value indicating whether inertia is enabled for the camera manipulations.
            </summary>
            <value><c>true</c> if inertia is enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.CameraController.IsMoveEnabled">
            <summary>
            Gets or sets a value indicating whether move is enabled.
            </summary>
            <value> <c>true</c> if move is enabled; otherwise, <c>false</c> . </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.CameraController.IsPanEnabled">
            <summary>
            Gets or sets a value indicating whether pan is enabled.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.CameraController.IsRotationEnabled">
            <summary>
            Gets or sets a value indicating whether IsRotationEnabled.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.CameraController.IsTouchZoomEnabled">
            <summary>
            Gets or sets a value indicating whether touch zoom (pinch gesture) is enabled.
            </summary>
            <value> <c>true</c> if touch zoom is enabled; otherwise, <c>false</c> . </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.CameraController.IsZoomEnabled">
            <summary>
            Gets or sets a value indicating whether IsZoomEnabled.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.CameraController.LeftRightPanSensitivity">
            <summary>
            Gets or sets the sensitivity for pan by the left and right keys.
            </summary>
            <value> The pan sensitivity. </value>
            <remarks>
            Use -1 to invert the pan direction.
            </remarks>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.CameraController.LeftRightRotationSensitivity">
            <summary>
            Gets or sets the sensitivity for rotation by the left and right keys.
            </summary>
            <value> The rotation sensitivity. </value>
            <remarks>
            Use -1 to invert the rotation direction.
            </remarks>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.CameraController.MaximumFieldOfView">
            <summary>
            Gets or sets the maximum field of view.
            </summary>
            <value> The maximum field of view. </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.CameraController.MinimumFieldOfView">
            <summary>
            Gets or sets the minimum field of view.
            </summary>
            <value> The minimum field of view. </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.CameraController.ModelUpDirection">
            <summary>
            Gets or sets the model up direction.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.CameraController.MoveSensitivity">
            <summary>
            Gets or sets the move sensitivity.
            </summary>
            <value> The move sensitivity. </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.CameraController.PageUpDownZoomSensitivity">
            <summary>
            Gets or sets the sensitivity for zoom by the page up and page down keys.
            </summary>
            <value> The zoom sensitivity. </value>
            <remarks>
            Use -1 to invert the zoom direction.
            </remarks>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.CameraController.PanCursor">
            <summary>
            Gets or sets the pan cursor.
            </summary>
            <value> The pan cursor. </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.CameraController.RotateAroundMouseDownPoint">
            <summary>
            Gets or sets a value indicating whether to rotate around the mouse down point.
            </summary>
            <value> <c>true</c> if rotation around the mouse down point is enabled; otherwise, <c>false</c> . </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.CameraController.RotateCursor">
            <summary>
            Gets or sets the rotate cursor.
            </summary>
            <value> The rotate cursor. </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.CameraController.RotationSensitivity">
            <summary>
            Gets or sets the rotation sensitivity (degrees/pixel).
            </summary>
            <value> The rotation sensitivity. </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.CameraController.ShowCameraTarget">
            <summary>
            Gets or sets a value indicating whether to show a target adorner when manipulating the camera.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.CameraController.SpinReleaseTime">
            <summary>
            Gets or sets the max duration of mouse drag to activate spin.
            </summary>
            <remarks>
            If the time between mouse down and mouse up is less than this value, spin is activated.
            </remarks>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.CameraController.UpDownPanSensitivity">
            <summary>
            Gets or sets the sensitivity for pan by the up and down keys.
            </summary>
            <value> The pan sensitivity. </value>
            <remarks>
            Use -1 to invert the pan direction.
            </remarks>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.CameraController.UpDownRotationSensitivity">
            <summary>
            Gets or sets the sensitivity for rotation by the up and down keys.
            </summary>
            <value> The rotation sensitivity. </value>
            <remarks>
            Use -1 to invert the rotation direction.
            </remarks>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.CameraController.Viewport">
            <summary>
            Gets or sets Viewport.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.CameraController.ZoomAroundMouseDownPoint">
            <summary>
            Gets or sets a value indicating whether to zoom around mouse down point.
            </summary>
            <value> <c>true</c> if zooming around the mouse down point is enabled; otherwise, <c>false</c> . </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.CameraController.ZoomCursor">
            <summary>
            Gets or sets the zoom cursor.
            </summary>
            <value> The zoom cursor. </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.CameraController.ZoomRectangleCursor">
            <summary>
            Gets or sets the zoom rectangle cursor.
            </summary>
            <value> The zoom rectangle cursor. </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.CameraController.ZoomSensitivity">
            <summary>
            Gets or sets ZoomSensitivity.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.CameraController.IsOrthographicCamera">
            <summary>
            Gets a value indicating whether IsOrthographicCamera.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.CameraController.IsPerspectiveCamera">
            <summary>
            Gets a value indicating whether IsPerspectiveCamera.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.CameraController.OrthographicCamera">
            <summary>
            Gets OrthographicCamera.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.CameraController.PerspectiveCamera">
            <summary>
            Gets PerspectiveCamera.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraController.AddMoveForce(System.Double,System.Double,System.Double)">
            <summary>
            Adds the specified move force.
            </summary>
            <param name="dx">
            The delta x.
            </param>
            <param name="dy">
            The delta y.
            </param>
            <param name="dz">
            The delta z.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraController.AddMoveForce(System.Windows.Media.Media3D.Vector3D)">
            <summary>
            Adds the specified move force.
            </summary>
            <param name="delta">
            The delta.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraController.AddPanForce(System.Double,System.Double)">
            <summary>
            Adds the specified pan force.
            </summary>
            <param name="dx">
            The delta x.
            </param>
            <param name="dy">
            The delta y.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraController.AddPanForce(System.Windows.Media.Media3D.Vector3D)">
            <summary>
            The add pan force.
            </summary>
            <param name="pan">
            The pan.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraController.AddRotateForce(System.Double,System.Double)">
            <summary>
            The add rotate force.
            </summary>
            <param name="dx">
            The delta x.
            </param>
            <param name="dy">
            The delta y.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraController.AddZoomForce(System.Double)">
            <summary>
            Adds the zoom force.
            </summary>
            <param name="delta">
            The delta.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraController.AddZoomForce(System.Double,System.Windows.Media.Media3D.Point3D)">
            <summary>
            Adds the zoom force.
            </summary>
            <param name="delta">
            The delta.
            </param>
            <param name="zoomOrigin">
            The zoom origin.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraController.ChangeDirection(System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D,System.Double)">
            <summary>
            Changes the direction of the camera.
            </summary>
            <param name="lookDir">
            The look direction.
            </param>
            <param name="upDir">
            The up direction.
            </param>
            <param name="animationTime">
            The animation time.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraController.ChangeDirection(System.Windows.Media.Media3D.Vector3D,System.Double)">
            <summary>
            Changes the direction of the camera.
            </summary>
            <param name="lookDir">
            The look direction.
            </param>
            <param name="animationTime">
            The animation time.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraController.HideRectangle">
            <summary>
            Hides the rectangle.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraController.HideTargetAdorner">
            <summary>
            Hides the target adorner.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraController.LookAt(System.Windows.Media.Media3D.Point3D,System.Double)">
            <summary>
            Change the "look-at" point.
            </summary>
            <param name="target">
            The target.
            </param>
            <param name="animationTime">
            The animation time.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraController.PushCameraSetting">
            <summary>
            Push the current camera settings on an internal stack.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraController.ResetCamera">
            <summary>
            Resets the camera.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraController.ResetCameraUpDirection">
            <summary>
            Resets the camera up direction.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraController.RestoreCameraSetting">
            <summary>
            Restores the most recent camera setting from the internal stack.
            </summary>
            <returns> The restore camera setting. </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraController.ShowRectangle(System.Windows.Rect,System.Windows.Media.Color,System.Windows.Media.Color)">
            <summary>
            Shows the rectangle.
            </summary>
            <param name="rect">
            The rectangle.
            </param>
            <param name="color1">
            The color 1.
            </param>
            <param name="color2">
            The color 2.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraController.ShowTargetAdorner(System.Windows.Point)">
            <summary>
            Shows the target adorner.
            </summary>
            <param name="position">
            The position.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraController.StartSpin(System.Windows.Vector,System.Windows.Point,System.Windows.Media.Media3D.Point3D)">
            <summary>
            Starts the spin.
            </summary>
            <param name="speed">
            The speed.
            </param>
            <param name="position">
            The position.
            </param>
            <param name="aroundPoint">
            The spin around point.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraController.StopSpin">
            <summary>
            Stops the spin.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraController.UpdateRectangle(System.Windows.Rect)">
            <summary>
            Updates the rectangle.
            </summary>
            <param name="rect">
            The rectangle.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraController.Zoom(System.Double)">
            <summary>
            Zooms by the specified delta value.
            </summary>
            <param name="delta">
            The delta value.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraController.ZoomExtents(System.Double)">
            <summary>
            Zooms to the extents of the model.
            </summary>
            <param name="animationTime">
            The animation time (milliseconds).
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraController.OnLookAtChanged">
            <summary>
            Raises the LookAtChanged event.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraController.OnZoomedByRectangle">
            <summary>
            Raises the ZoomedByRectangle event.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraController.OnManipulationCompleted(System.Windows.Input.ManipulationCompletedEventArgs)">
            <summary>
            Called when the <see cref="E:System.Windows.UIElement.ManipulationCompleted"/> event occurs.
            </summary>
            <param name="e">
            The data for the event.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraController.OnManipulationDelta(System.Windows.Input.ManipulationDeltaEventArgs)">
            <summary>
            Called when the <see cref="E:System.Windows.UIElement.ManipulationDelta"/> event occurs.
            </summary>
            <param name="e">
            The data for the event.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraController.OnManipulationStarted(System.Windows.Input.ManipulationStartedEventArgs)">
            <summary>
            Called when the <see cref="E:System.Windows.UIElement.ManipulationStarted"/> event occurs.
            </summary>
            <param name="e">
            The data for the event.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraController.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled MouseDown attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">
            The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> that contains the event data. This event data reports details about the mouse button that was pressed and the handled state.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraController.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
            <summary>
            Invoked when an unhandled StylusSystemGesture attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">
            The <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs"/> that contains the event data.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraController.CameraChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            The camera changed.
            </summary>
            <param name="d">
            The sender.
            </param>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraController.ViewportChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            The viewport changed.
            </summary>
            <param name="d">
            The sender.
            </param>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraController.BackViewHandler(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            The back view event handler.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraController.BottomViewHandler(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            The bottom view event handler.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraController.CameraControllerLoaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            The camera controller_ loaded.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraController.CameraControllerUnloaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the CameraController is unloaded.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraController.Clamp(System.Double,System.Double,System.Double)">
            <summary>
            Clamps the specified value between the limits.
            </summary>
            <param name="value">
            The value.
            </param>
            <param name="min">
            The min.
            </param>
            <param name="max">
            The max.
            </param>
            <returns>
            The clamp.
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraController.FindPanVector(System.Double,System.Double)">
            <summary>
            Finds the pan vector.
            </summary>
            <param name="dx">
            The delta x.
            </param>
            <param name="dy">
            The delta y.
            </param>
            <returns>
            The <see cref="T:System.Windows.Media.Media3D.Vector3D"/> .
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraController.FrontViewHandler(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            The front view event handler.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraController.InitializeBindings">
            <summary>
            Initializes the input bindings.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraController.LeftViewHandler(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            The left view event handler.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraController.OnCameraChanged">
            <summary>
            The on camera changed.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraController.OnCompositionTargetRendering(System.Object,System.Windows.Media.RenderingEventArgs)">
            <summary>
            The rendering event handler.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraController.OnKeyDown(System.Object,System.Windows.Input.KeyEventArgs)">
            <summary>
            Called when a key is pressed.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The <see cref="T:System.Windows.Input.KeyEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraController.OnMouseWheel(System.Object,System.Windows.Input.MouseWheelEventArgs)">
            <summary>
            Called when the mouse wheel is moved.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The <see cref="T:System.Windows.Input.MouseWheelEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraController.OnTimeStep(System.Double)">
            <summary>
            The on time step.
            </summary>
            <param name="time">
            The time.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraController.OnViewportChanged">
            <summary>
            The on viewport changed.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraController.RefreshViewport">
            <summary>
            The refresh viewport.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraController.ResetCameraHandler(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            The reset camera event handler.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraController.RightViewHandler(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            The right view event handler.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraController.StopAnimations">
            <summary>
            The stop animations.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraController.SubscribeEvents">
            <summary>
            The subscribe events.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraController.TopViewHandler(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            The top view event handler.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraController.UnSubscribeEvents">
            <summary>
            The un subscribe events.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraController.ZoomExtentsHandler(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            The Zoom extents event handler.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.DeferredRenderer.NUMSUBSAMPLES">
             G-Buffer constants        
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.DeferredRenderer.NumberSamplesMSAA">
            <summary>
            Number Samples Propery can be set directly to the deferred renderer
            It couses a re-init of the renderer
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DeferredRenderer.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DeferredRenderer.InitBuffers(HelixToolkit.Wpf.SharpDX.IRenderHost,SharpDX.DXGI.Format)">
            <summary>
            
            </summary>
            <param name="host"></param>
            <param name="format"></param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DeferredRenderer.RenderGBufferOutput(HelixToolkit.Wpf.SharpDX.RenderContext,SharpDX.Direct3D11.Texture2D@,System.Boolean)">
            <summary>
            This render-function is use to directly display the 4 G-Buffer textures in one screen. 
            It does not compute any lighting, it just copies the (resized) buffer-textures into the back-buffer. 
            It is called per frame. 
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DeferredRenderer.RenderDeferred(HelixToolkit.Wpf.SharpDX.RenderContext,HelixToolkit.Wpf.SharpDX.IRenderer)">
            <summary>
            The Render function
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DeferredRenderer.RenderLighting(HelixToolkit.Wpf.SharpDX.RenderContext,System.Collections.Generic.IEnumerable{HelixToolkit.Wpf.SharpDX.ILight3D})">
            <summary>
            This is the main lighting render function. 
            It is called per frame. 
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DeferredRenderer.EstimateRadius(SharpDX.Vector3,System.Double)">
            <summary>
            
            </summary>
            <param name="attenuation"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DeferredRenderer.MakeBasis(SharpDX.Vector3,SharpDX.Vector3@,SharpDX.Vector3@)">
            <summary>
            
            </summary>
            <param name="baseX"></param>
            <param name="baseY"></param>
            <param name="baseZ"></param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DeferredRenderer.RenderScreenSpaceAO(HelixToolkit.Wpf.SharpDX.RenderContext)">
            <summary>
            Call a screen-space AO pass over the g-buffer
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DeferredRenderer.RenderBlurPass(HelixToolkit.Wpf.SharpDX.RenderContext,HelixToolkit.Wpf.SharpDX.IRenderer,System.Int32)">
            <summary>
            Performs the currently activated blur pass on the content of ScreenSpaceBuffer 0. If renderTargetIndex is set
            to -1, the results are rendered to the default render targets, otherwise to the ScreenSpaceBuffer with the index renderTargetIndex (0-2).
            If the renderTargetIndex cannot be rendered to, the function chooses another ScreenSpaceBuffer and returns its index.
            </summary>
            <param name="renderContext"></param>
            <param name="renderRenderable"></param>
            <param name="renderTargetIndex"></param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DeferredRenderer.RenderMerge(HelixToolkit.Wpf.SharpDX.RenderContext)">
            <summary>
            
            </summary>        
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DeferredRenderer.RenderBlurH(HelixToolkit.Wpf.SharpDX.RenderContext)">
            <summary>
            
            </summary>        
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DeferredRenderer.RenderBlurV(HelixToolkit.Wpf.SharpDX.RenderContext)">
            <summary>
            
            </summary>        
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DeferredRenderer.RenderBlur4x4(HelixToolkit.Wpf.SharpDX.RenderContext)">
            <summary>
            
            </summary>        
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DeferredRenderer.RenderFXAA(HelixToolkit.Wpf.SharpDX.RenderContext)">
            <summary>
            
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DeferredRenderer.InitGBuffer(SharpDX.DXGI.Format)">
            <summary>
            Create the G-Buffer
            call it once on init
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DeferredRenderer.ClearGBuffer">
            <summary>
            Totaly clear the g-buffer
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DeferredRenderer.SetGBufferTargets(HelixToolkit.Wpf.SharpDX.RenderContext)">
            <summary>
            
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DeferredRenderer.SetGBufferTargets(System.Int32,System.Int32,HelixToolkit.Wpf.SharpDX.RenderContext)">
            <summary>
            
            </summary>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DeferredRenderer.InitQuadBuffer">
            <summary>
            Create the geometry and the VBO (vertex and index buffers) 
            for light-geoemtry 
            Call it once in the scene initialization 
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DeferredRenderer.InitSphereBuffer">
            <summary>
            Create the geometry and the VBO (vertex and index buffers) 
            for light-geoemtry 
            Call it once in the scene initialization 
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DeferredRenderer.InitConeBuffer">
            <summary>
            Create the geometry and the VBO (vertex and index buffers) 
            for light-geoemtry 
            Call it once in the scene initialization 
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DeferredRenderer.BindQuadBuffer(HelixToolkit.Wpf.SharpDX.RenderContext)">
            <summary>
            Bind the quad-buffer (context switch!)
            call it in the render function
            minimize the number of calls
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DeferredRenderer.BindSphereBuffer(HelixToolkit.Wpf.SharpDX.RenderContext)">
            <summary>
            Bind the sphere-buffer (context switch!)
            call it in the render function
            minimize the number of calls
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DeferredRenderer.BindConeBuffer(HelixToolkit.Wpf.SharpDX.RenderContext)">
            <summary>
            Bind the cone-buffer (context switch!)
            call it in the render function
            minimize the number of calls
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DeferredRenderer.InitSSBuffer(SharpDX.DXGI.Format)">
            <summary>
            Init the Color-Buffer as resource
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DeferredRenderer.ClearSSBuffer">
            <summary>
            
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DeferredRenderer.SetSSBufferTarget(System.Int32,HelixToolkit.Wpf.SharpDX.RenderContext)">
            <summary>
            Set screen-space buffer as render target
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DeferredRenderer.Dispose">
            <summary>
            CG is not working on DX11 objects, 
            so we have to cleanup here by ourseves
            </summary>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.DeferredRenderer.LightGeometryData">
            <summary>
            helper-struct that wrapps the VBO 
            for particular scene objects, 
            like quad, sphere, or cone for deferred lights
            </summary>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.DeferredRenderer.DeferredLightingVariables">
            <summary>
            Helper-class which wrapps all parameters needed for deferred lighting
            </summary>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.DeferredRenderer.ScreenSpaceProcessingVariables">
            <summary>
            Helper-class that wrapps shader variables needed for screen-space processing
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Disposer.RemoveAndDispose``1(``0@)">
            <summary>
            Dispose an object instance and set the reference to null
            </summary>
            <typeparam name="T">The type of object to dispose</typeparam>
            <param name="resource">A reference to the instance for disposal</param>
            <remarks>This method hides any thrown exceptions that might occur during disposal of the object (by design)</remarks>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.DPFCanvas.RenderContext">
            <summary>
            Get RenderContext
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.DPFCanvas.Light3DSceneShared">
            <summary>
            Light3D shared data per each secne
            </summary>
        </member>
        <member name="E:HelixToolkit.Wpf.SharpDX.DPFCanvas.ExceptionOccurred">
            <summary>
            Fired whenever an exception occurred on this object.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.DPFCanvas.ClearColor">
            <summary>
            
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.DPFCanvas.IsShadowMapEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.DPFCanvas.MSAA">
            <summary>
            Set MSAA level. If set to Two/Four/Eight, the actual level is set to minimum between Maximum and Two/Four/Eight
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.DPFCanvas.MaxRenderingDuration">
            <summary>
            Gets or sets the maximum time that rendering is allowed to take. When exceeded,
            the next cycle will be enqueued at <see cref="F:System.Windows.Threading.DispatcherPriority.Input"/> to reduce input lag.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.DPFCanvas.RenderTechnique">
            <summary>
            
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.DPFCanvas.HelixToolkit#Wpf#SharpDX#IRenderHost#Renderable">
            <summary>
            The instance of currently attached IRenderable - this is in general the Viewport3DX
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.DPFCanvas.HelixToolkit#Wpf#SharpDX#IRenderHost#Device">
            <summary>
            The currently used Direct3D Device
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.DPFCanvas.EnableSharingModelMode">
            <summary>
            
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.DPFCanvas.SharedModelContainer">
            <summary>
            
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.DPFCanvas.IsInDesignMode">
            <summary>
            Gets a value indicating whether the control is in design mode
            (running in Blend or Visual Studio).
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.DPFCanvas.IsBusy">
            <summary>
            Indicates if DPFCanvas busy on rendering.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DPFCanvas.#cctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DPFCanvas.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DPFCanvas.InvalidateRender">
            <summary>
            Invalidates the current render and requests an update.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DPFCanvas.HelixToolkit#Wpf#SharpDX#IRenderHost#InvalidateRender">
            <summary>
            Invalidates the current render and requests an update.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DPFCanvas.OnLoaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DPFCanvas.OnUnloaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DPFCanvas.StartD3D">
            <summary>
            
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DPFCanvas.EndD3D(System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DPFCanvas.CreateAndBindTargets">
            <summary>
            
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DPFCanvas.SetDefaultRenderTargets(System.Boolean)">
            <summary>
            Sets the default render-targets
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DPFCanvas.SetDefaultRenderTargets(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets the default render-targets
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DPFCanvas.SetDefaultColorTargets(SharpDX.Direct3D11.DepthStencilView)">
            <summary>
            Sets the default render-targets
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DPFCanvas.ClearRenderTarget(System.Boolean,System.Boolean)">
            <summary>
            Clears the buffers with the clear-color
            </summary>
            <param name="clearBackBuffer"></param>
            <param name="clearDepthStencilBuffer"></param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DPFCanvas.OnRendering(System.Object,System.EventArgs)">
            <summary>
            Handles the <see cref="E:System.Windows.Media.CompositionTarget.Rendering"/> event.
            </summary>
            <param name="sender">The sender is in fact a the UI <see cref="T:System.Windows.Threading.Dispatcher"/>.</param>
            <param name="e">Is in fact <see cref="T:System.Windows.Media.RenderingEventArgs"/>.</param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DPFCanvas.UpdateAndRender">
            <summary>
            Updates and renders the scene.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DPFCanvas.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
            <summary>
            
            </summary>
            <param name="sizeInfo"></param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DPFCanvas.RestartRendering">
            <summary>
            Handles the change of the effects manager.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DPFCanvas.HandleExceptionOccured(System.Exception)">
            <summary>
            Invoked whenever an exception occurs. Stops rendering, frees resources and throws 
            </summary>
            <param name="exception">The exception that occured.</param>
            <returns><c>true</c> if the exception has been handled, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DPFCanvas.OnIsFrontBufferAvailableChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.DPFCanvasThreading.Light3DSceneShared">
            <summary>
            Light3D shared data per each secne
            </summary>
        </member>
        <member name="E:HelixToolkit.Wpf.SharpDX.DPFCanvasThreading.ExceptionOccurred">
            <summary>
            Fired whenever an exception occurred on this object.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.DPFCanvasThreading.ClearColor">
            <summary>
            
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.DPFCanvasThreading.IsShadowMapEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.DPFCanvasThreading.MSAA">
            <summary>
            Set MSAA level. If set to Two/Four/Eight, the actual level is set to minimum between Maximum and Two/Four/Eight
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.DPFCanvasThreading.MaxRenderingDuration">
            <summary>
            Gets or sets the maximum time that rendering is allowed to take. When exceeded,
            the next cycle will be enqueued at <see cref="F:System.Windows.Threading.DispatcherPriority.Input"/> to reduce input lag.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.DPFCanvasThreading.RenderTechnique">
            <summary>
            
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.DPFCanvasThreading.HelixToolkit#Wpf#SharpDX#IRenderHost#Renderable">
            <summary>
            The instance of currently attached IRenderable - this is in general the Viewport3DX
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.DPFCanvasThreading.HelixToolkit#Wpf#SharpDX#IRenderHost#Device">
            <summary>
            The currently used Direct3D Device
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.DPFCanvasThreading.IsInDesignMode">
            <summary>
            Gets a value indicating whether the control is in design mode
            (running in Blend or Visual Studio).
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.DPFCanvasThreading.IsBusy">
            <summary>
            Indicates if DPFCanvas busy on rendering.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.DPFCanvasThreading.invalidAction">
            <summary>
            
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DPFCanvasThreading.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DPFCanvasThreading.InvalidateRender">
            <summary>
            Invalidates the current render and requests an update.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DPFCanvasThreading.HelixToolkit#Wpf#SharpDX#IRenderHost#InvalidateRender">
            <summary>
            Invalidates the current render and requests an update.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DPFCanvasThreading.OnLoaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DPFCanvasThreading.OnUnloaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DPFCanvasThreading.StartD3D">
            <summary>
            
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DPFCanvasThreading.EndD3D(System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DPFCanvasThreading.CreateAndBindTargets">
            <summary>
            
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DPFCanvasThreading.SetDefaultRenderTargets(System.Boolean)">
            <summary>
            Sets the default render-targets
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DPFCanvasThreading.SetDefaultRenderTargets(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets the default render-targets
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DPFCanvasThreading.SetDefaultColorTargets(SharpDX.Direct3D11.DepthStencilView)">
            <summary>
            Sets the default render-targets
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DPFCanvasThreading.ClearRenderTarget(System.Boolean,System.Boolean)">
            <summary>
            Clears the buffers with the clear-color
            </summary>
            <param name="clearBackBuffer"></param>
            <param name="clearDepthStencilBuffer"></param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DPFCanvasThreading.OnRendering(System.Object,System.EventArgs)">
            <summary>
            Handles the <see cref="E:System.Windows.Media.CompositionTarget.Rendering"/> event.
            </summary>
            <param name="sender">The sender is in fact a the UI <see cref="T:System.Windows.Threading.Dispatcher"/>.</param>
            <param name="e">Is in fact <see cref="T:System.Windows.Media.RenderingEventArgs"/>.</param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DPFCanvasThreading.UpdateAndRender">
            <summary>
            Updates and renders the scene.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DPFCanvasThreading.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
            <summary>
            
            </summary>
            <param name="sizeInfo"></param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DPFCanvasThreading.RestartRendering">
            <summary>
            Handles the change of the effects manager.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DPFCanvasThreading.HandleExceptionOccured(System.Exception)">
            <summary>
            Invoked whenever an exception occurs. Stops rendering, frees resources and throws 
            </summary>
            <param name="exception">The exception that occured.</param>
            <returns><c>true</c> if the exception has been handled, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DPFCanvasThreading.OnIsFrontBufferAvailableChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.DPFSurfaceSwapChain">
            <summary>
            <para>Use HwndHost as rendering surface, swapchain for rendering. Much faster than using D3DImage.</para>
            <para>Render on seperate rendering thread. EnableSwapChainRendering=True to use this rendering method.</para>
            <para>Drawbacks: The rendering surface will cover all WPF controls in the same Viewport region. Move controls out of viewport region to solve this problem.</para>
            <para>For displaying ViewCube and CoordinateSystem, separate Model needs to create to render along with the other models. WPF viewport will not be visibled.</para>
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.DPFSurfaceSwapChain.RenderContext">
            <summary>
            Get RenderContext
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.DPFSurfaceSwapChain.Light3DSceneShared">
            <summary>
            Light3D shared data per each secne
            </summary>
        </member>
        <member name="E:HelixToolkit.Wpf.SharpDX.DPFSurfaceSwapChain.ExceptionOccurred">
            <summary>
            Fired whenever an exception occurred on this object.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.DPFSurfaceSwapChain.ClearColor">
            <summary>
            
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.DPFSurfaceSwapChain.IsShadowMapEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.DPFSurfaceSwapChain.MSAA">
            <summary>
            Set MSAA level. If set to Two/Four/Eight, the actual level is set to minimum between Maximum and Two/Four/Eight
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.DPFSurfaceSwapChain.MaxRenderingDuration">
            <summary>
            Gets or sets the maximum time that rendering is allowed to take. When exceeded,
            the next cycle will be enqueued at <see cref="F:System.Windows.Threading.DispatcherPriority.Input"/> to reduce input lag.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.DPFSurfaceSwapChain.RenderTechnique">
            <summary>
            
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.DPFSurfaceSwapChain.HelixToolkit#Wpf#SharpDX#IRenderHost#Renderable">
            <summary>
            The instance of currently attached IRenderable - this is in general the Viewport3DX
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.DPFSurfaceSwapChain.HelixToolkit#Wpf#SharpDX#IRenderHost#Device">
            <summary>
            The currently used Direct3D Device
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.DPFSurfaceSwapChain.EnableSharingModelMode">
            <summary>
            
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.DPFSurfaceSwapChain.SharedModelContainer">
            <summary>
            
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.DPFSurfaceSwapChain.IsInDesignMode">
            <summary>
            Gets a value indicating whether the control is in design mode
            (running in Blend or Visual Studio).
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.DPFSurfaceSwapChain.IsBusy">
            <summary>
            Indicates if DPFCanvas busy on rendering.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DPFSurfaceSwapChain.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DPFSurfaceSwapChain.InvalidateRender">
            <summary>
            Invalidates the current render and requests an update.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DPFSurfaceSwapChain.HelixToolkit#Wpf#SharpDX#IRenderHost#InvalidateRender">
            <summary>
            Invalidates the current render and requests an update.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DPFSurfaceSwapChain.OnLoaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DPFSurfaceSwapChain.OnUnloaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DPFSurfaceSwapChain.StartD3D">
            <summary>
            
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DPFSurfaceSwapChain.EndD3D(System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DPFSurfaceSwapChain.CreateAndBindTargets">
            <summary>
            
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DPFSurfaceSwapChain.CreateSwapChainDescription">
            <summary>
            Creates the swap chain description.
            </summary>
            <returns>A swap chain description</returns>
            <remarks>
            This method can be overloaded in order to modify default parameters.
            </remarks>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DPFSurfaceSwapChain.SetDefaultRenderTargets(System.Boolean)">
            <summary>
            Sets the default render-targets
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DPFSurfaceSwapChain.SetDefaultRenderTargets(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets the default render-targets
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DPFSurfaceSwapChain.SetDefaultColorTargets(SharpDX.Direct3D11.DepthStencilView)">
            <summary>
            Sets the default render-targets
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DPFSurfaceSwapChain.ClearRenderTarget(System.Boolean,System.Boolean)">
            <summary>
            Clears the buffers with the clear-color
            </summary>
            <param name="clearBackBuffer"></param>
            <param name="clearDepthStencilBuffer"></param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DPFSurfaceSwapChain.OnRendering(System.Object,System.EventArgs)">
            <summary>
            Handles the <see cref="E:System.Windows.Media.CompositionTarget.Rendering"/> event.
            </summary>
            <param name="sender">The sender is in fact a the UI <see cref="T:System.Windows.Threading.Dispatcher"/>.</param>
            <param name="e">Is in fact <see cref="T:System.Windows.Media.RenderingEventArgs"/>.</param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DPFSurfaceSwapChain.UpdateAndRender">
            <summary>
            Updates and renders the scene.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DPFSurfaceSwapChain.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
            <summary>
            
            </summary>
            <param name="sizeInfo"></param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DPFSurfaceSwapChain.RestartRendering">
            <summary>
            Handles the change of the effects manager.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DPFSurfaceSwapChain.HandleExceptionOccured(System.Exception)">
            <summary>
            Invoked whenever an exception occurs. Stops rendering, frees resources and throws 
            </summary>
            <param name="exception">The exception that occured.</param>
            <returns><c>true</c> if the exception has been handled, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.DPFSurfaceSwapChainThreading">
            <summary>
            <para>Use HwndHost as rendering surface, use seperate rendering thread. Faster than DPFSwapChainRendering.</para> 
            <para>EnableSwapChainRendering=True and EnableDeferredRendering=Ture to use this rendering method.</para>
            <para>Drawbacks: The rendering surface will cover all WPF controls in the same Viewport region. Move controls out of viewport region to solve this problem.</para>
            <para>For displaying ViewCube and CoordinateSystem, separate Model needs to create to render along with the other models. WPF viewport will not be visibled.</para>
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.DPFSurfaceSwapChainThreading.RenderContext">
            <summary>
            Get RenderContext
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.DPFSurfaceSwapChainThreading.Light3DSceneShared">
            <summary>
            Light3D shared data per each secne
            </summary>
        </member>
        <member name="E:HelixToolkit.Wpf.SharpDX.DPFSurfaceSwapChainThreading.ExceptionOccurred">
            <summary>
            Fired whenever an exception occurred on this object.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.DPFSurfaceSwapChainThreading.ClearColor">
            <summary>
            
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.DPFSurfaceSwapChainThreading.IsShadowMapEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.DPFSurfaceSwapChainThreading.MSAA">
            <summary>
            Set MSAA level. If set to Two/Four/Eight, the actual level is set to minimum between Maximum and Two/Four/Eight
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.DPFSurfaceSwapChainThreading.MaxRenderingDuration">
            <summary>
            Gets or sets the maximum time that rendering is allowed to take. When exceeded,
            the next cycle will be enqueued at <see cref="F:System.Windows.Threading.DispatcherPriority.Input"/> to reduce input lag.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.DPFSurfaceSwapChainThreading.RenderTechnique">
            <summary>
            
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.DPFSurfaceSwapChainThreading.HelixToolkit#Wpf#SharpDX#IRenderHost#Renderable">
            <summary>
            The instance of currently attached IRenderable - this is in general the Viewport3DX
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.DPFSurfaceSwapChainThreading.HelixToolkit#Wpf#SharpDX#IRenderHost#Device">
            <summary>
            The currently used Direct3D Device
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.DPFSurfaceSwapChainThreading.EnableSharingModelMode">
            <summary>
            
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.DPFSurfaceSwapChainThreading.SharedModelContainer">
            <summary>
            
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.DPFSurfaceSwapChainThreading.IsInDesignMode">
            <summary>
            Gets a value indicating whether the control is in design mode
            (running in Blend or Visual Studio).
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.DPFSurfaceSwapChainThreading.IsBusy">
            <summary>
            Indicates if DPFCanvas busy on rendering.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DPFSurfaceSwapChainThreading.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DPFSurfaceSwapChainThreading.InvalidateRender">
            <summary>
            Invalidates the current render and requests an update.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DPFSurfaceSwapChainThreading.HelixToolkit#Wpf#SharpDX#IRenderHost#InvalidateRender">
            <summary>
            Invalidates the current render and requests an update.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DPFSurfaceSwapChainThreading.OnLoaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DPFSurfaceSwapChainThreading.OnUnloaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DPFSurfaceSwapChainThreading.StartD3D">
            <summary>
            
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DPFSurfaceSwapChainThreading.EndD3D(System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DPFSurfaceSwapChainThreading.CreateAndBindTargets">
            <summary>
            
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DPFSurfaceSwapChainThreading.CreateSwapChainDescription">
            <summary>
            Creates the swap chain description.
            </summary>
            <returns>A swap chain description</returns>
            <remarks>
            This method can be overloaded in order to modify default parameters.
            </remarks>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DPFSurfaceSwapChainThreading.SetDefaultRenderTargets(System.Boolean)">
            <summary>
            Sets the default render-targets
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DPFSurfaceSwapChainThreading.SetDefaultRenderTargets(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets the default render-targets
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DPFSurfaceSwapChainThreading.SetDefaultColorTargets(SharpDX.Direct3D11.DepthStencilView)">
            <summary>
            Sets the default render-targets
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DPFSurfaceSwapChainThreading.ClearRenderTarget(System.Boolean,System.Boolean)">
            <summary>
            Clears the buffers with the clear-color
            </summary>
            <param name="clearBackBuffer"></param>
            <param name="clearDepthStencilBuffer"></param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DPFSurfaceSwapChainThreading.OnRendering(System.Object,System.EventArgs)">
            <summary>
            Handles the <see cref="E:System.Windows.Media.CompositionTarget.Rendering"/> event.
            </summary>
            <param name="sender">The sender is in fact a the UI <see cref="T:System.Windows.Threading.Dispatcher"/>.</param>
            <param name="e">Is in fact <see cref="T:System.Windows.Media.RenderingEventArgs"/>.</param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DPFSurfaceSwapChainThreading.UpdateAndRender">
            <summary>
            Updates and renders the scene.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DPFSurfaceSwapChainThreading.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
            <summary>
            
            </summary>
            <param name="sizeInfo"></param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DPFSurfaceSwapChainThreading.RestartRendering">
            <summary>
            Handles the change of the effects manager.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DPFSurfaceSwapChainThreading.HandleExceptionOccured(System.Exception)">
            <summary>
            Invoked whenever an exception occurs. Stops rendering, frees resources and throws 
            </summary>
            <param name="exception">The exception that occured.</param>
            <returns><c>true</c> if the exception has been handled, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.IModelContainer">
            <summary>
            
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.IModelContainer.Renderables">
            <summary>
            
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.IModelContainer.AttachViewport3DX(HelixToolkit.Wpf.SharpDX.Viewport3DX)">
            <summary>
            
            </summary>
            <param name="viewport"></param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.IModelContainer.DettachViewport3DX(HelixToolkit.Wpf.SharpDX.Viewport3DX)">
            <summary>
            
            </summary>
            <param name="viewport"></param>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.IModelContainer.CurrentRenderHost">
            <summary>
            
            </summary>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.ModelContainer3DX">
            <summary>
            Use to contain shared models for multiple viewports. 
            <para>Suggest to bind effects manager in viewmodel. Assign effect manager from code behind may cause memory leak</para>
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.ModelContainer3DX.EffectsManagerProperty">
            <summary>
            The EffectsManager property. Suggest to bind effects manager in viewmodel. Assign effect manager from code behind may cause memory leak
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.ModelContainer3DX.RenderTechniqueProperty">
            <summary>
            The Render Technique property
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.ModelContainer3DX.EffectsManager">
            <summary>
            Gets or sets the <see cref="F:HelixToolkit.Wpf.SharpDX.ModelContainer3DX.EffectsManagerProperty"/>.
            <para>The EffectsManager property. Suggest bind effects manager in viewmodel. Assign effect manager from code behind may cause memory leak.</para>
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.ModelContainer3DX.RenderTechnique">
            <summary>
            Gets or sets value for the shading model shading is used
            </summary>
            <value>
            <c>true</c> if deferred shading is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ModelContainer3DX.EffectsManagerPropertyChanged">
            <summary>
            Handles the change of the effects manager.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ModelContainer3DX.RenderTechniquePropertyChanged">
            <summary>
            Handles the change of the render technique        
            </summary>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.Controls.RenderControl">
            <summary>
            A Renderable UserControl.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Controls.RenderControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="!:RenderForm"/> class.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Controls.RenderControl.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints the background of the control.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Controls.RenderControl.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Paint"/> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.VisualTargetPresentationSource">
            <summary>
                The VisualTargetPresentationSource represents the root
                of a visual subtree owned by a different thread that the
                visual tree in which is is displayed.
                https://blogs.msdn.microsoft.com/dwayneneed/2007/04/26/multithreaded-ui-hostvisual/
            </summary>
            <remarks>
                A HostVisual belongs to the same UI thread that owns the
                visual tree in which it resides.
                
                A HostVisual can reference a VisualTarget owned by another
                thread.
                
                A VisualTarget has a root visual.
                
                VisualTargetPresentationSource wraps the VisualTarget and
                enables basic functionality like Loaded, which depends on
                a PresentationSource being available.
            </remarks>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.VisualWrapper`1">
            <summary>
                The VisualWrapper simply integrates a raw Visual child into a tree
                of FrameworkElements.
                 https://blogs.msdn.microsoft.com/dwayneneed/2007/04/26/multithreaded-ui-hostvisual/
            </summary>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.VisualWrapper">
            <summary>
                The VisualWrapper simply integrates a raw Visual child into a tree
                of FrameworkElements.
            </summary>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.Geometry3DExtensions">
            <summary>
            Contains extension methods for geometry.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Geometry3DExtensions.ToUnshared``1(``0)">
            <summary>
            Returns a copy of this <see cref="T:HelixToolkit.Wpf.SharpDX.Geometry3D"/> with unshared vertices. 
            Note that <see cref="P:HelixToolkit.Wpf.SharpDX.Geometry3D.Indices"/> could be set to null if unindexed drawing was supported.
            </summary>
            <typeparam name="T">The concrete type of this <see cref="T:HelixToolkit.Wpf.SharpDX.Geometry3D"/>.</typeparam>
            <param name="source">This respective <see cref="T:HelixToolkit.Wpf.SharpDX.Geometry3D"/>.</param>
            <returns>A copy of this <see cref="T:HelixToolkit.Wpf.SharpDX.Geometry3D"/> with unshared vertices.</returns>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.Helpers.EventSkipper">
            <summary>
            Use to skip event if event frequency is too high.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Helpers.EventSkipper.watch">
            <summary>
            Stopwatch
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Helpers.EventSkipper.#cctor">
            <summary>
            
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Helpers.EventSkipper.Threshold">
            <summary>
            The threshold used to skip if previous event happened less than the threshold.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Helpers.EventSkipper.ForceRefreshInterval">
            <summary>
            Sometimes invalidate renderer ran too fast, causes sence not reflect the latest update. 
            Set this to delay render one more time after last rendering. Default is 1 second.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Helpers.EventSkipper.previous">
            <summary>
            Previous event happened.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Helpers.EventSkipper.IsSkip">
            <summary>
            Determine if this event should be skipped.
            </summary>
            <returns>If skip, return true. Otherwise, return false.</returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Helpers.EventSkipper.DelayTrigger">
            <summary>
            Delay certain time to render one more time after last rendering, ensure scene is update to latest.
            (Used to solve latest scene is not reflected glitch)
            </summary>
            <returns></returns>
        </member>
        <member name="E:HelixToolkit.Wpf.SharpDX.IRenderHost.ExceptionOccurred">
            <summary>
            Fired whenever an exception occurred on this object.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.IRenderHost.InvalidateRender">
            <summary>
            Invalidates the current render and requests an update.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.IRenderHost.RenderTechnique">
            <summary>
            This technique is used for the entire render pass 
            by all Element3D if not specified otherwise in
            the elements itself
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.IRenderHost.IsBusy">
            <summary>
            Indicates if DPFCanvas busy on rendering.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.IRenderHost.Light3DSceneShared">
            <summary>
            Shared light data per scene
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DefaultRenderTechniquesManager.InitTechniques">
            <summary>
            Override in a derived class to control technique registration.
            </summary>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.Viewport3DX">
            <summary>
            Provides a Viewport control.
            </summary>
            <summary>
            Provides the dependency properties for Viewport3DX.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.PartAdornerLayer">
            <summary>
            The adorner layer part name.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.PartCameraController">
            <summary>
            The camera controller part name.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.PartCoordinateView">
            <summary>
            The coordinate view part name.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.PartViewCube">
            <summary>
            The view cube part name.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.PartViewCubeViewport">
            <summary>
            The view cube viewport part name.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.IsMoveEnabledProperty">
            <summary>
              The is move enabled property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.StopWatch">
            <summary>
            The stop watch
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.changeFieldOfViewHandler">
            <summary>
            The change field of view handler
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.fpsWatch">
            <summary>
            The frame rate stopwatch.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.orthographicCamera">
            <summary>
            The orthographic camera.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.panHandler">
            <summary>
            The pan handler
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.perspectiveCamera">
            <summary>
            The perspective camera.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.renderingEventListener">
            <summary>
            The rendering event listener.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.rotateHandler">
            <summary>
            The rotate handler
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.zoomHandler">
            <summary>
            The zoom handler
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.zoomRectangleHandler">
            <summary>
            The zoom rectangle handler
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.adornerLayer">
            <summary>
            The adorner layer.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.cameraController">
            <summary>
            The camera controller.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.coordinateSystemLights">
            <summary>
            The coordinate system lights.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.coordinateView">
            <summary>
            The coordinate view.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.currentHit">
            <summary>
            The nearest valid result during a hit test.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.hasBeenLoadedBefore">
            <summary>
            The "control has been loaded before" flag.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.infoFrameCounter">
            <summary>
            The frame counter for info field updates.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.isSubscribedToRenderingEvent">
            <summary>
            The is subscribed to rendering event.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.rectangleAdorner">
            <summary>
              The rectangle adorner.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.targetAdorner">
            <summary>
              The target adorner.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.touchDownDevice">
            <summary>
            The <see cref="T:System.Windows.Input.TouchDevice"/> of the first TouchDown.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.viewCube">
            <summary>
            The view cube.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.viewCubeLights">
            <summary>
            The view cube lights.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.viewCubeViewport">
            <summary>
            The view cube view.
            </summary>
        </member>
        <member name="E:HelixToolkit.Wpf.SharpDX.Viewport3DX.RenderExceptionOccurred">
            <summary>
            Fired whenever an exception occurred at rendering subsystem.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.RenderContext">
            <summary>
            Get current render context
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.Renderables">
            <summary>
            <para>Return enumerable of all the rederable elements</para>
            <para>If enabled shared model mode, the returned rederables are current viewport renderable plus shared models</para>
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Viewport3DX.#cctor">
            <summary>
            Initializes static members of the <see cref="T:HelixToolkit.Wpf.SharpDX.Viewport3DX" /> class.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Viewport3DX.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Wpf.SharpDX.Viewport3DX" /> class.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.IsMoveEnabled">
            <summary>
              Gets or sets a value indicating whether move is enabled.
            </summary>
            <value> <c>true</c> if move is enabled; otherwise, <c>false</c> . </value>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Viewport3DX.AddMoveForce(System.Double,System.Double,System.Double)">
            <summary>
            Adds the specified move force.
            </summary>
            <param name="dx">
            The delta x. 
            </param>
            <param name="dy">
            The delta y. 
            </param>
            <param name="dz">
            The delta z. 
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Viewport3DX.AddMoveForce(System.Windows.Media.Media3D.Vector3D)">
            <summary>
            Adds the specified move force.
            </summary>
            <param name="delta">
            The delta. 
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Viewport3DX.AddPanForce(System.Double,System.Double)">
            <summary>
            Adds the specified pan force.
            </summary>
            <param name="dx">
            The delta x. 
            </param>
            <param name="dy">
            The delta y. 
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Viewport3DX.AddPanForce(System.Windows.Media.Media3D.Vector3D)">
            <summary>
            The add pan force.
            </summary>
            <param name="pan">
            The pan. 
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Viewport3DX.AddRotateForce(System.Double,System.Double)">
            <summary>
            The add rotate force.
            </summary>
            <param name="dx">
            The delta x. 
            </param>
            <param name="dy">
            The delta y. 
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Viewport3DX.AddZoomForce(System.Double)">
            <summary>
            Adds the zoom force.
            </summary>
            <param name="dx">
            The delta. 
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Viewport3DX.AddZoomForce(System.Double,System.Windows.Media.Media3D.Point3D)">
            <summary>
            Adds the zoom force.
            </summary>
            <param name="dx">
            The delta. 
            </param>
            <param name="zoomOrigin">
            The zoom origin. 
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Viewport3DX.ChangeDirection(System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D,System.Double)">
            <summary>
            Changes the direction of the camera.
            </summary>
            <param name="lookDir">
            The look direction. 
            </param>
            <param name="upDir">
            The up direction. 
            </param>
            <param name="animationTime">
            The animation time. 
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Viewport3DX.FindNearestPoint(System.Windows.Point)">
            <summary>
            Finds the nearest 3D point in the scene.
            </summary>
            <param name="pt">
            The screen point (2D).
            </param>
            <returns>
            A Point3D or null.
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Viewport3DX.HideTargetAdorner">
            <summary>
            Hides the target adorner.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Viewport3DX.HideZoomRectangle">
            <summary>
            Hides the zoom rectangle.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Viewport3DX.InvalidateRender">
            <summary>
            Tries to invalidate the current render.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Viewport3DX.LookAt(System.Windows.Media.Media3D.Point3D)">
            <summary>
            Change the camera to look at the specified point.
            </summary>
            <param name="p">
            The point.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Viewport3DX.LookAt(System.Windows.Media.Media3D.Point3D,System.Double)">
            <summary>
            Change the camera to look at the specified point.
            </summary>
            <param name="p">
            The point.
            </param>
            <param name="animationTime">
            The animation time.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Viewport3DX.LookAt(System.Windows.Media.Media3D.Point3D,System.Double,System.Double)">
            <summary>
            Change the camera to look at the specified point.
            </summary>
            <param name="p">
            The point.
            </param>
            <param name="distance">
            The distance.
            </param>
            <param name="animationTime">
            The animation time.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Viewport3DX.LookAt(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Vector3D,System.Double)">
            <summary>
            Change the camera to look at the specified point.
            </summary>
            <param name="p">
            The point.
            </param>
            <param name="direction">
            The direction.
            </param>
            <param name="animationTime">
            The animation time.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Viewport3DX.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate" />.
            </summary>
            <exception cref="T:HelixToolkit.Wpf.SharpDX.HelixToolkitException">{0} is missing from the template.</exception>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Viewport3DX.ReAttach">
            <summary>
            Detaches the current scene and attaches it again. 
            Call it if you want to repeat the entire Attach-Pass
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Viewport3DX.Detach">
            <summary>
            Detaches the current scene.         
            Call it if you want to detouch the scene from the renderer.
            Call <see cref="M:HelixToolkit.Wpf.SharpDX.Viewport3DX.ReAttach"/> in order to attach the current scene again.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Viewport3DX.Reset">
            <summary>
            Resets the view.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Viewport3DX.SetView(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D,System.Double)">
            <summary>
            Change the camera position and directions.
            </summary>
            <param name="newPosition">
            The new camera position.
            </param>
            <param name="newDirection">
            The new camera look direction.
            </param>
            <param name="newUpDirection">
            The new camera up direction.
            </param>
            <param name="animationTime">
            The animation time.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Viewport3DX.ShowTargetAdorner(System.Windows.Point)">
            <summary>
            Shows the target adorner.
            </summary>
            <param name="position">The position.</param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Viewport3DX.ShowZoomRectangle(System.Windows.Rect)">
            <summary>
            Shows the zoom rectangle.
            </summary>
            <param name="rect">The zoom rectangle.</param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Viewport3DX.StartSpin(System.Windows.Vector,System.Windows.Point,System.Windows.Media.Media3D.Point3D)">
            <summary>
            Starts spinning.
            </summary>
            <param name="speed">The speed.</param>
            <param name="position">The position.</param>
            <param name="aroundPoint">The point to spin around.</param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Viewport3DX.StopSpin">
            <summary>
              Stops the spinning.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Viewport3DX.ZoomExtents(System.Windows.Media.Media3D.Rect3D,System.Double)">
            <summary>
            Zooms to the extents of the specified bounding box.
            </summary>
            <param name="bounds">
            The bounding box.
            </param>
            <param name="animationTime">
            The animation time.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Viewport3DX.ZoomExtents(System.Double)">
            <summary>
            Zooms to the extents of the model.
            </summary>
            <param name="animationTime">
            The animation time (milliseconds). 
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Viewport3DX.HelixToolkit#Wpf#SharpDX#IRenderer#Attach(HelixToolkit.Wpf.SharpDX.IRenderHost)">
            <summary>
            Attaches the elements to the specified host.
            </summary>
            <param name="host">The host.</param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Viewport3DX.HelixToolkit#Wpf#SharpDX#IRenderer#Detach">
            <summary>
            Detaches the elements.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Viewport3DX.HelixToolkit#Wpf#SharpDX#IRenderer#Render(HelixToolkit.Wpf.SharpDX.RenderContext)">
            <summary>
            Renders the scene.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Viewport3DX.OnCameraChanged">
            <summary>
            Called when the camera is changed.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Viewport3DX.GetPressedMouseButtons">
            <summary>
            Gets the pressed mouse buttons as flags of <see cref="T:System.Windows.Forms.MouseButtons"/>.
            If no button is pressed (result is zero), then it was a touch down.
            </summary>
            <returns>
            The pressed mouse buttons as flags of <see cref="T:System.Windows.Forms.MouseButtons"/>.
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Viewport3DX.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Viewport3DX.OnTouchDown(System.Windows.Input.TouchEventArgs)">
            <inheritdoc/>
            <remarks>
            This makes selection via Touch work without disabling the CameraController which uses Manipulation.
            </remarks>>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Viewport3DX.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Viewport3DX.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Viewport3DX.UpdateCurrentPosition(System.Windows.Point)">
            <summary>
            Updates the property <see cref="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.CurrentPosition"/>.
            </summary>
            <param name="pt">The current mouse hit point.</param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Viewport3DX.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Viewport3DX.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Viewport3DX.OnManipulationCompleted(System.Windows.Input.ManipulationCompletedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Viewport3DX.RaiseCameraChangedEvent">
            <summary>
            Raises the camera changed event.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Viewport3DX.AnimateOpacity(System.Windows.UIElement,System.Double,System.Double)">
            <summary>
            Animates the opacity of the specified object.
            </summary>
            <param name="obj">
            The object to animate.
            </param>
            <param name="toOpacity">
            The to opacity.
            </param>
            <param name="animationTime">
            The animation time.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Viewport3DX.BackViewHandler(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            The back view event handler.
            </summary>
            <param name="sender">
            The sender. 
            </param>
            <param name="e">
            The event arguments. 
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Viewport3DX.BottomViewHandler(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            The bottom view event handler.
            </summary>
            <param name="sender">
            The sender. 
            </param>
            <param name="e">
            The event arguments. 
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Viewport3DX.IsModelUpDirectionY">
            <summary>
            Determines whether the model up direction is (0,1,0).
            </summary>
            <returns>
              <c>true</c> if the up direction is (0,1,0); otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Viewport3DX.EffectsManagerPropertyChanged">
            <summary>
            Handles the change of the effects manager.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Viewport3DX.RenderTechniquePropertyChanged">
            <summary>
            Handles the change of the render technique        
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Viewport3DX.CameraPropertyChanged">
            <summary>
            Handles changes in the camera properties.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Viewport3DX.Clamp(System.Double,System.Double,System.Double)">
            <summary>
            Clamps the specified value between the limits.
            </summary>
            <param name="value">
            The value. 
            </param>
            <param name="min">
            The min. 
            </param>
            <param name="max">
            The max. 
            </param>
            <returns>
            The clamp. 
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Viewport3DX.ControlLoaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the control is loaded.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Viewport3DX.ControlUnloaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the control is unloaded.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Viewport3DX.FrontViewHandler(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            The front view event handler.
            </summary>
            <param name="sender">
            The sender. 
            </param>
            <param name="e">
            The event arguments. 
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Viewport3DX.LeftViewHandler(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            The left view event handler.
            </summary>
            <param name="sender">
            The sender. 
            </param>
            <param name="e">
            The event arguments. 
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Viewport3DX.OnCompositionTargetRendering(System.Object,System.Windows.Media.RenderingEventArgs)">
            <summary>
            The rendering event handler.
            </summary>
            <param name="sender">
            The sender. 
            </param>
            <param name="e">
            The event arguments. 
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Viewport3DX.OrthographicChanged">
            <summary>
            Called when the camera type is changed.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Viewport3DX.RefreshViewport">
            <summary>
              Refreshes viewport.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Viewport3DX.HandleRenderException(System.Object,HelixToolkit.Wpf.SharpDX.Utilities.RelayExceptionEventArgs)">
            <summary>
            Handles a rendering exception.
            </summary>
            <param name="sender">The event source.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Viewport3DX.ResetHandler(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Handles the reset command.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.Input.ExecutedRoutedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Viewport3DX.RightViewHandler(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            The right view event handler.
            </summary>
            <param name="sender">
            The sender. 
            </param>
            <param name="e">
            The event arguments. 
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Viewport3DX.SetDefaultGestures">
            <summary>
            Sets the default gestures.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Viewport3DX.Viewport3DX_KeyDown(System.Object,System.Windows.Input.KeyEventArgs)">
            <summary>
            Tunnel Keydown event into camera controller.
            There is an issue that camera controller grid cannot get keydown event(maybe not able to get focus properly), has to manually tunnel this event into the controller.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Viewport3DX.SetTargetHandler(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Handles the SetTarget command.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.Input.ExecutedRoutedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Viewport3DX.SubscribeToRenderingEvent">
            <summary>
            The subscribe to rendering event.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Viewport3DX.TopViewHandler(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            The top view event handler.
            </summary>
            <param name="sender">
            The sender. 
            </param>
            <param name="e">
            The event arguments. 
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Viewport3DX.UnsubscribeRenderingEvent">
            <summary>
            The unsubscribe rendering event.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Viewport3DX.UpdateCameraInfo">
            <summary>
            Updates the camera info.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Viewport3DX.UpdateFieldOfViewInfo">
            <summary>
            The update field of view info.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Viewport3DX.UseDefaultGesturesChanged">
            <summary>
            The UseDefaultGestures property changed.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Viewport3DX.ViewCubeClicked(System.Object,HelixToolkit.Wpf.ViewCubeVisual3D.ClickedEventArgs)">
            <summary>
            Handles clicks on the view cube.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:HelixToolkit.Wpf.ViewCubeVisual3D.ClickedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Viewport3DX.ViewCubeViewportMouseEnter(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            Called when the mouse enters the view cube.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Viewport3DX.ViewCubeViewportMouseLeave(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            Called when the mouse leaves the view cube.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Viewport3DX.ZoomExtentsHandler(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Handles the zoom extents command.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.Input.ExecutedRoutedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Viewport3DX.MouseDownHitTest(System.Windows.Point,System.Windows.Input.InputEventArgs)">
            <summary>
            Handles hit testing on mouse down.
            </summary>
            <param name="pt">The hit point.</param>
            <param name="originalInputEventArgs">
            The original input event for future use (which mouse button pressed?)
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Viewport3DX.MouseMoveHitTest(System.Windows.Point,System.Windows.Input.InputEventArgs)">
            <summary>
            Handles hit testing on mouse move.
            </summary>
            <param name="pt">The hit point.</param>
            <param name="originalInputEventArgs">
            The original input event for future use (which mouse button pressed?)
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Viewport3DX.MouseUpHitTest(System.Windows.Point,System.Windows.Input.InputEventArgs)">
            <summary>
            Handles hit testing on mouse up.
            </summary>
            <param name="pt">The hit point.</param>
            <param name="originalInputEventArgs">
            The original input event for future use (which mouse button pressed?)
            </param>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.BackgroundColorProperty">
            <summary>
            Background Color property.this.RenderHost
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.CameraChangedEvent">
            <summary>
            The camera changed event.
            </summary>
        </member>
        <member name="E:HelixToolkit.Wpf.SharpDX.Viewport3DX.MouseDown3D">
            <summary>
            Provide CLR accessors for the event 
            </summary>
        </member>
        <member name="E:HelixToolkit.Wpf.SharpDX.Viewport3DX.MouseUp3D">
            <summary>
            Provide CLR accessors for the event 
            </summary>
        </member>
        <member name="E:HelixToolkit.Wpf.SharpDX.Viewport3DX.MouseMove3D">
            <summary>
            Provide CLR accessors for the event 
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.CameraInertiaFactorProperty">
            <summary>
            The camera inertia factor property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.CameraInfoProperty">
            <summary>
            The camera info property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.CameraModeProperty">
            <summary>
            The camera mode property
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.CameraProperty">
            <summary>
            The camera property
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.CameraRotationModeProperty">
            <summary>
            The camera rotation mode property
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.ChangeFieldOfViewCursorProperty">
            <summary>
            The change fov cursor property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.ChangeFieldOfViewGestureProperty">
            <summary>
            The change field of view gesture property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.ChangeLookAtGestureProperty">
            <summary>
            The change field of view gesture property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.ChildrenProperty">
            <summary>
            The children property
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.CoordinateSystemHeightProperty">
            <summary>
            The coordinate system height property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.CoordinateSystemHorizontalPositionProperty">
            <summary>
            The coordinate system horizontal position property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.CoordinateSystemLabelForegroundProperty">
            <summary>
            The coordinate system label foreground property
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.CoordinateSystemLabelXProperty">
            <summary>
            The coordinate system label X property
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.CoordinateSystemLabelYProperty">
            <summary>
            The coordinate system label Y property
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.CoordinateSystemLabelZProperty">
            <summary>
            The coordinate system label Z property
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.CoordinateSystemVerticalPositionProperty">
            <summary>
            The coordinate system vertical position property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.CoordinateSystemWidthProperty">
            <summary>
            The coordinate system width property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.CurrentPositionProperty">
            <summary>
            The current position property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.DebugInfoProperty">
            <summary>
            The debug info property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.DeferredRendererProperty">
            <summary>
            Deferred Render accessor
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.DefaultCameraProperty">
            <summary>
            The default camera property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.EnableCurrentPositionProperty">
            <summary>
            The EnableCurrentPosition property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.EffectsManagerProperty">
            <summary>
            The EffectsManager property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.FieldOfViewTextProperty">
            <summary>
            The field of view text property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.FpsCounterProperty">
            <summary>
            The FPS counter property
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.FrameRateProperty">
            <summary>
            The frame rate property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.FrameRateTextProperty">
            <summary>
            The frame rate text property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.FrontViewGestureProperty">
            <summary>
            The front view gesture property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.InfiniteSpinProperty">
            <summary>
            The infinite spin property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.InfoBackgroundProperty">
            <summary>
            The info background property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.InfoForegroundProperty">
            <summary>
            The info foreground property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.MessageTextProperty">
            <summary>
            The message text property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.RenderExceptionProperty">
            <summary>
            The render exception property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.RenderHostProperty">
            <summary>
            The render host property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.RenderTechniqueProperty">
            <summary>
            The Render Technique property
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.IsShadowMappingEnabledProperty">
            <summary>
            The is deferred shading enabled propery
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.IsChangeFieldOfViewEnabledProperty">
            <summary>
            The is change field of view enabled property
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.IsInertiaEnabledProperty">
            <summary>
            Identifies the <see cref="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.IsInertiaEnabled"/> dependency property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.IsPanEnabledProperty">
            <summary>
            The is pan enabled property
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.IsRotationEnabledProperty">
            <summary>
            The is rotation enabled property
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.IsTouchZoomEnabledProperty">
            <summary>
            The IsTouchZoomEnabled property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.IsZoomEnabledProperty">
            <summary>
            The is zoom enabled property
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.LeftRightPanSensitivityProperty">
            <summary>
            The left right pan sensitivity property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.LeftRightRotationSensitivityProperty">
            <summary>
            The left right rotation sensitivity property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.MaximumFieldOfViewProperty">
            <summary>
            The maximum field of view property
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.MinimumFieldOfViewProperty">
            <summary>
            The minimum field of view property
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.ModelUpDirectionProperty">
            <summary>
            The model up direction property
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.OrthographicProperty">
            <summary>
            The orthographic property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.OrthographicToggleGestureProperty">
            <summary>
            The orthographic toggle gesture property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.PageUpDownZoomSensitivityProperty">
            <summary>
            The page up down zoom sensitivity property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.PanCursorProperty">
            <summary>
            The pan cursor property
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.RotateAroundMouseDownPointProperty">
            <summary>
            The rotate around mouse down point property
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.RotateCursorProperty">
            <summary>
            The rotate cursor property
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.RotationSensitivityProperty">
            <summary>
            The rotation sensitivity property
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.ShowCameraInfoProperty">
            <summary>
            The show camera info property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.ShowCameraTargetProperty">
            <summary>
            The show camera target property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.ShowCoordinateSystemProperty">
            <summary>
            The show coordinate system property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.ShowFieldOfViewProperty">
            <summary>
            The show field of view property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.ShowFrameRateProperty">
            <summary>
            The show frame rate property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.ShowTriangleCountInfoProperty">
            <summary>
            The show triangle count info property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.ShowViewCubeProperty">
            <summary>
            The show view cube property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.SpinReleaseTimeProperty">
            <summary>
            The spin release time property
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.StatusProperty">
            <summary>
            The status property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.SubTitleProperty">
            <summary>
            The sub title property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.SubTitleSizeProperty">
            <summary>
            The sub title size property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.TextBrushProperty">
            <summary>
            The text brush property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.TitleBackgroundProperty">
            <summary>
            The title background property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.TitleFontFamilyProperty">
            <summary>
            The title font family property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.TitleProperty">
            <summary>
            The title property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.TitleSizeProperty">
            <summary>
            The title size property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.TouchModeProperty">
            <summary>
            The touch mode property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.TriangleCountInfoProperty">
            <summary>
            The triangle count info property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.UpDownPanSensitivityProperty">
            <summary>
            The up down Pan sensitivity property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.UpDownRotationSensitivityProperty">
            <summary>
            The up down rotation sensitivity property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.UseDefaultGesturesProperty">
            <summary>
            The use default gestures property
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.ViewCubeBackTextProperty">
            <summary>
            The view cube back text property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.ViewCubeBottomTextProperty">
            <summary>
            The view cube bottom text property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.ViewCubeFrontTextProperty">
            <summary>
            The view cube front text property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.ViewCubeHeightProperty">
            <summary>
            The view cube height property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.ViewCubeHorizontalPositionProperty">
            <summary>
            The view cube horizontal position property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.ViewCubeLeftTextProperty">
            <summary>
            The view cube left text property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.ViewCubeOpacityProperty">
            <summary>
            The view cube opacity property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.ViewCubeRightTextProperty">
            <summary>
            The view cube right text property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.ViewCubeTopTextProperty">
            <summary>
            The view cube top text property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.IsViewCubeEdgeClicksEnabledProperty">
            <summary>
            Identifies the <see cref="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.IsViewCubeEdgeClicksEnabled"/> dependency property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.ViewCubeVerticalPositionProperty">
            <summary>
            The view cube vertical position property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.ViewCubeWidthProperty">
            <summary>
            The view cube width property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.ZoomAroundMouseDownPointProperty">
            <summary>
            The zoom around mouse down point property
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.ZoomCursorProperty">
            <summary>
            The zoom cursor property
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.ZoomDistanceLimitFarProperty">
            <summary>
            The far zoom distance limit property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.ZoomDistanceLimitNearProperty">
            <summary>
            The near zoom distance limit property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.ZoomExtentsWhenLoadedProperty">
            <summary>
            The zoom extents when loaded property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.ZoomRectangleCursorProperty">
            <summary>
            The zoom rectangle cursor property
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.ZoomRectangleGestureProperty">
            <summary>
            The zoom rectangle gesture property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.ZoomSensitivityProperty">
            <summary>
            The zoom sensitivity property
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.MSAAProperty">
            <summary>
            Set MSAA Level
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.FixedRotationPointProperty">
            <summary>
            Rotate around this fixed rotation point only.<see cref="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.FixedRotationPointEnabledProperty"/> 
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.FixedRotationPointEnabledProperty">
            <summary>
            Enable fixed rotation mode and use FixedRotationPoint for rotation. Only works under CameraMode = Inspect
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.EnableMouseButtonHitTestProperty">
            <summary>
            Enable mouse button hit test
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.ManualLookAtPointProperty">
            <summary>
            Manually move camera to look at a point in 3D space
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.EnableRenderFrustumProperty">
            <summary>
            Enable render frustum to avoid rendering model if it is out of view frustum
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.MaxFPSProperty">
            <summary>
            Set max FPS to provide a stable FPS for rendering
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.EnableDeferredRenderingProperty">
            <summary>
            <para>Enable deferred rendering. Not supported with EnableSharedModelMode = true</para> 
            <para>If this is enabled, seperate UI thread is created and used for rendering. Main UI thread is used to create command list for deferred context.</para>
            <para>This does not guarantee better performance. Please fully test before deciding which rendering method being used.</para>
            <para>Deferred Rendering: <see cref="!:https://msdn.microsoft.com/en-us/library/windows/desktop/ff476892.aspx"/></para>
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.EnableSharedModelModeProperty">
            <summary>
            Used to create multiple viewport with shared models.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Viewport3DX.SharedModelContainerProperty">
            <summary>
            Binding to the element inherit with <see cref="T:HelixToolkit.Wpf.SharpDX.IModelContainer"/> 
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.BackgroundColor">
            <summary>
            Background Color
            </summary>
        </member>
        <member name="E:HelixToolkit.Wpf.SharpDX.Viewport3DX.CameraChanged">
            <summary>
            Event when a property has been changed
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.Camera">
            <summary>
            Gets or sets the camera.
            </summary>
            <value>
            The camera.
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.CameraController">
            <summary>
            Gets the camera controller
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.CameraInertiaFactor">
            <summary>
            Gets or sets the camera inertia factor.
            </summary>
            <value>
            The camera inertia factor.
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.CameraInfo">
            <summary>
            Gets or sets the camera info.
            </summary>
            <value>
            The camera info.
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.CameraMode">
            <summary>
            Gets or sets the camera mode.
            </summary>
            <value>
            The camera mode.
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.CameraRotationMode">
            <summary>
            Gets or sets the camera rotation mode.
            </summary>
            <value>
            The camera rotation mode.
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.ChangeFieldOfViewCursor">
            <summary>
            Gets or sets the change field of view cursor.
            </summary>
            <value>
            The change field of view cursor.
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.CoordinateSystemHeight">
            <summary>
            Gets or sets the height of the coordinate system viewport.
            </summary>
            <value>
            The height of the coordinate system viewport.
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.CoordinateSystemHorizontalPosition">
            <summary>
            Gets or sets the horizontal position of the coordinate system viewport.
            </summary>
            <value>
            The horizontal position.
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.CoordinateSystemLabelForeground">
            <summary>
            Gets or sets the color of the coordinate system label.
            </summary>
            <value>
            The color of the coordinate system label.
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.CoordinateSystemLabelX">
            <summary>
            Gets or sets the coordinate system label X.
            </summary>
            <value>
            The coordinate system label X.
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.CoordinateSystemLabelY">
            <summary>
            Gets or sets the coordinate system label Y.
            </summary>
            <value>
            The coordinate system label Y.
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.CoordinateSystemLabelZ">
            <summary>
            Gets or sets the coordinate system label Z.
            </summary>
            <value>
            The coordinate system label Z.
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.CoordinateSystemVerticalPosition">
            <summary>
            Gets or sets the vertical position of the coordinate system viewport.
            </summary>
            <value>
            The vertical position.
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.CoordinateSystemWidth">
            <summary>
            Gets or sets the width of the coordinate system viewport.
            </summary>
            <value>
            The width of the coordinate system viewport.
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.CurrentPosition">
            <summary>
            Gets or sets the current position.
            </summary>
            <value>
            The current position.
            </value>
            <remarks>
            The <see cref="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.EnableCurrentPosition"/> property must be set to true to enable updating of this property.
            </remarks>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.DebugInfo">
            <summary>
            Gets or sets the debug info text.
            </summary>
            <value>
            The debug info text.
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.DeferredRenderer">
            <summary>
            Read-Only DP for the deferred renderes (little bit hacky...)
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.DefaultCamera">
            <summary>
            Gets or sets the default camera.
            </summary>
            <value>
            The default camera.
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.EffectsManager">
            <summary>
            Gets or sets the <see cref="T:HelixToolkit.Wpf.SharpDX.IEffectsManager"/>.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.EnableCurrentPosition">
            <summary>
            Gets or sets a value indicating whether calculation of the <see cref="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.CurrentPosition"/> property is enabled.
            </summary>
            <value>
            <c>true</c> if calculation is enabled; otherwise, <c>false</c> .
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.FieldOfViewText">
            <summary>
            Gets or sets the field of view text.
            </summary>
            <value>
            The field of view text.
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.FpsCounter">
            <summary>
            Gets the FPS counter.
            </summary>
            <value>
            The FPS counter.
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.FrameRate">
            <summary>
            Gets or sets the frame rate.
            </summary>
            <value>
            The frame rate.
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.FrameRateText">
            <summary>
            Gets or sets the frame rate text.
            </summary>
            <value>
            The frame rate text.
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.InfiniteSpin">
            <summary>
            Gets or sets a value indicating whether infinite spin is enabled.
            </summary>
            <value>
            <c>true</c> if infinite spin is enabled; otherwise, <c>false</c> .
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.InfoBackground">
            <summary>
            Gets or sets the background brush for the CameraInfo and TriangleCount fields.
            </summary>
            <value>
            The info background.
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.InfoForeground">
            <summary>
            Gets or sets the foreground brush for informational text.
            </summary>
            <value>
            The foreground brush.
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.MessageText">
            <summary>
            Gets or sets the message text.
            </summary>
            <value>
            The message text.
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.RenderException">
            <summary>
            Gets or sets the <see cref="T:System.Exception"/> that occured at rendering subsystem.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.RenderHost">
            <summary>
            Gets or sets the <see cref="T:HelixToolkit.Wpf.SharpDX.IRenderHost"/>.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.RenderTechnique">
            <summary>
            Gets or sets value for the shading model shading is used
            </summary>
            <value>
            <c>true</c> if deferred shading is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.IsShadowMappingEnabled">
            <summary>
            Gets or sets a value indicating whether shadow mapping is enabled
            </summary>
            <value>
            <c>true</c> if deferred shading is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.IsChangeFieldOfViewEnabled">
            <summary>
            Gets or sets a value indicating whether change field of view is enabled.
            </summary>
            <value>
            <c>true</c> if change field of view is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.IsInertiaEnabled">
            <summary>
            Gets or sets a value indicating whether inertia is enabled for the camera manipulations.
            </summary>
            <value><c>true</c> if inertia is enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.IsPanEnabled">
            <summary>
            Gets or sets a value indicating whether pan is enabled.
            </summary>
            <value>
            <c>true</c> if pan is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.IsRotationEnabled">
            <summary>
            Gets or sets a value indicating whether rotation is enabled.
            </summary>
            <value>
            <c>true</c> if rotation is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.IsTouchZoomEnabled">
            <summary>
            Gets or sets a value indicating whether touch zoom (pinch gesture) is enabled.
            </summary>
            <value>
            <c>true</c> if touch zoom is enabled; otherwise, <c>false</c> .
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.IsZoomEnabled">
            <summary>
            Gets or sets a value indicating whether zoom is enabled.
            </summary>
            <value>
            <c>true</c> if zoom is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.LeftRightPanSensitivity">
            <summary>
            Gets or sets the sensitivity for pan by the left and right keys.
            </summary>
            <value>
            The pan sensitivity.
            </value>
            <remarks>
            Use -1 to invert the pan direction.
            </remarks>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.LeftRightRotationSensitivity">
            <summary>
            Gets or sets the sensitivity for rotation by the left and right keys.
            </summary>
            <value>
            The rotation sensitivity.
            </value>
            <remarks>
            Use -1 to invert the rotation direction.
            </remarks>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.MaximumFieldOfView">
            <summary>
            Gets or sets the maximum field of view.
            </summary>
            <value>
            The maximum field of view.
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.MinimumFieldOfView">
            <summary>
            Gets or sets the minimum field of view.
            </summary>
            <value>
            The minimum field of view.
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.ModelUpDirection">
            <summary>
            Gets or sets the model up direction.
            </summary>
            <value>
            The model up direction.
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.Orthographic">
            <summary>
            Gets or sets a value indicating whether an orthographic camera should be used.
            </summary>
            <value>
            <c>true</c> if orthographic; otherwise, <c>false</c> .
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.PageUpDownZoomSensitivity">
            <summary>
            Gets or sets the sensitivity for zoom by the page up and page down keys.
            </summary>
            <value>
            The zoom sensitivity.
            </value>
            <remarks>
            Use -1 to invert the zoom direction.
            </remarks>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.PanCursor">
            <summary>
            Gets or sets the pan cursor.
            </summary>
            <value>
            The pan cursor.
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.RotateAroundMouseDownPoint">
            <summary>
            Gets or sets a value indicating whether to rotate around the mouse down point.
            </summary>
            <value>
            <c>true</c> if rotating around mouse down point; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.RotateCursor">
            <summary>
            Gets or sets the rotate cursor.
            </summary>
            <value>
            The rotate cursor.
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.RotationSensitivity">
            <summary>
            Gets or sets the rotation sensitivity.
            </summary>
            <value>
            The rotation sensitivity.
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.ShowCameraInfo">
            <summary>
            Gets or sets a value indicating whether to show camera info.
            </summary>
            <value>
            <c>true</c> if camera info should be shown; otherwise, <c>false</c> .
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.ShowCameraTarget">
            <summary>
            Gets or sets a value indicating whether to show the camera target adorner.
            </summary>
            <value>
            <c>true</c> if camera target should be shown; otherwise, <c>false</c> .
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.ShowCoordinateSystem">
            <summary>
            Gets or sets a value indicating whether to show the coordinate system.
            </summary>
            <value>
            <c>true</c> if coordinate system should be shown; otherwise, <c>false</c> .
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.ShowFieldOfView">
            <summary>
            Gets or sets a value indicating whether to show field of view.
            </summary>
            <value>
            <c>true</c> if field of view should be shown; otherwise, <c>false</c> .
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.ShowFrameRate">
            <summary>
            Gets or sets a value indicating whether to show frame rate.
            </summary>
            <value>
            <c>true</c> if frame rate should be shown; otherwise, <c>false</c> .
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.ShowTriangleCountInfo">
            <summary>
            Gets or sets a value indicating whether to show the total number of triangles in the scene.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.ShowViewCube">
            <summary>
            Gets or sets a value indicating whether to show the view cube.
            </summary>
            <value>
            <c>true</c> if the view cube should be shown; otherwise, <c>false</c> .
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.SpinReleaseTime">
            <summary>
            Gets or sets the spin release time in milliseconds (maximum allowed time to start a spin).
            </summary>
            <value>
            The spin release time (in milliseconds).
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.Status">
            <summary>
            Gets or sets the status.
            </summary>
            <value>
            The status.
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.SubTitle">
            <summary>
            Gets or sets the sub title.
            </summary>
            <value>
            The sub title.
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.SubTitleSize">
            <summary>
            Gets or sets the size of the sub title.
            </summary>
            <value>
            The size of the sub title.
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.TextBrush">
            <summary>
            Gets or sets the text brush.
            </summary>
            <value>
            The text brush.
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>
            The title.
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.TitleBackground">
            <summary>
            Gets or sets the title background brush.
            </summary>
            <value>
            The title background.
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.TitleFontFamily">
            <summary>
            Gets or sets the title font family.
            </summary>
            <value>
            The title font family.
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.TitleSize">
            <summary>
            Gets or sets the size of the title.
            </summary>
            <value>
            The size of the title.
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.TouchMode">
            <summary>
            Gets or sets the touch mode.
            </summary>
            <value>
            The touch mode.
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.TriangleCountInfo">
            <summary>
            Gets or sets TriangleCountInfo.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.UpDownPanSensitivity">
            <summary>
            Gets or sets the sensitivity for pan by the up and down keys.
            </summary>
            <value>
            The pan sensitivity.
            </value>
            <remarks>
            Use -1 to invert the pan direction.
            </remarks>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.UpDownRotationSensitivity">
            <summary>
            Gets or sets the sensitivity for rotation by the up and down keys.
            </summary>
            <value>
            The rotation sensitivity.
            </value>
            <remarks>
            Use -1 to invert the rotation direction.
            </remarks>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.UseDefaultGestures">
            <summary>
            Gets or sets a value indicating whether to use default mouse/keyboard gestures.
            </summary>
            <value>
              <c>true</c> if default gestures should be used; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.ViewCubeBackText">
            <summary>
            Gets or sets the view cube back text.
            </summary>
            <value>
            The view cube back text.
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.ViewCubeBottomText">
            <summary>
            Gets or sets the view cube bottom text.
            </summary>
            <value>
            The view cube bottom text.
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.ViewCubeFrontText">
            <summary>
            Gets or sets the view cube front text.
            </summary>
            <value>
            The view cube front text.
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.ViewCubeHeight">
            <summary>
            Gets or sets the height of the view cube viewport.
            </summary>
            <value>
            The height of the view cube viewport.
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.ViewCubeHorizontalPosition">
            <summary>
            Gets or sets the horizontal position of the view cube viewport.
            </summary>
            <value>
            The horizontal position.
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.ViewCubeLeftText">
            <summary>
            Gets or sets the view cube left text.
            </summary>
            <value>
            The view cube left text.
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.ViewCubeOpacity">
            <summary>
            Gets or sets the opacity of the ViewCube when inactive.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.ViewCubeRightText">
            <summary>
            Gets or sets the view cube right text.
            </summary>
            <value>
            The view cube right text.
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.ViewCubeTopText">
            <summary>
            Gets or sets the view cube top text.
            </summary>
            <value>
            The view cube top text.
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.IsViewCubeEdgeClicksEnabled">
            <summary>
            Gets or sets if the view cube edge clickable.
            </summary>
            <value>
            Boolean for enable or disable.
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.ViewCubeVerticalPosition">
            <summary>
            Gets or sets the vertical position of view cube viewport.
            </summary>
            <value>
            The vertical position.
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.ViewCubeWidth">
            <summary>
            Gets or sets the width of the view cube viewport.
            </summary>
            <value>
            The width of the view cube viewport.
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.ZoomAroundMouseDownPoint">
            <summary>
            Gets or sets a value indicating whether to zoom around the mouse down point.
            </summary>
            <value>
            <c>true</c> if zooming around the mouse down point; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.ZoomCursor">
            <summary>
            Gets or sets the zoom cursor.
            </summary>
            <value>
            The zoom cursor.
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.ZoomDistanceLimitFar">
            <summary>
            Gets or sets a value indicating the far distance limit for zoom.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.ZoomDistanceLimitNear">
            <summary>
            Gets or sets a value indicating the near distance limit for zoom.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.ZoomExtentsWhenLoaded">
            <summary>
            Gets or sets a value indicating whether to Zoom extents when the control has loaded.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.ZoomRectangleCursor">
            <summary>
            Gets or sets the zoom rectangle cursor.
            </summary>
            <value>
            The zoom rectangle cursor.
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.ZoomSensitivity">
            <summary>
            Gets or sets the zoom sensitivity.
            </summary>
            <value>
            The zoom sensitivity.
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.MSAA">
            <summary>
            Set MSAA level. If set to Two/Four/Eight, the actual level is set to minimum between Maximum and Two/Four/Eight
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.FixedRotationPoint">
            <summary>
            Rotate around this fixed rotation point only.<see cref="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.FixedRotationPointEnabled"/> 
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.FixedRotationPointEnabled">
            <summary>
            Enable fixed rotation mode and use <see cref="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.FixedRotationPoint"/>  for rotation. Only works under <see cref="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.CameraMode"/> = Inspect
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.EnableMouseButtonHitTest">
            <summary>
            Enable mouse button hit test
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.ManualLookAtPoint">
            <summary>
            Manually move camera to look at a point in 3D space. (Same as calling Viewport3DX.LookAt() function)
            Since camera may have been moved by mouse, the value gets does not reflect the actual point camera currently looking at.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.EnableRenderFrustum">
            <summary>
            Enable render frustum to skip rendering model if model is out of the camera bounding frustum
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.MaxFPS">
            <summary>
            Set max FPS to provide a stable FPS for rendering, Default = 60Hz.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.EnableDeferredRendering">
            <summary>
            <para>Enable deferred rendering. Not supported with EnableSharedModelMode = true</para> 
            <para>If this is enabled, seperate UI thread is created and used for rendering. Main UI thread is used to create command list for deferred context.</para>
            <para>This does not guarantee better performance. Please fully test before deciding which rendering method being used.</para>
            <para>Deferred Rendering: <see cref="!:https://msdn.microsoft.com/en-us/library/windows/desktop/ff476892.aspx"/></para>
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.EnableSharedModelMode">
            <summary>
            Used to create multiple viewport with shared models.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.SharedModelContainer">
            <summary>
            Binding to the element inherit with <see cref="T:HelixToolkit.Wpf.SharpDX.IModelContainer"/> 
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Viewport3DX.EnableSwapChainRendering">
            <summary>
            <para>Use HwndHost as rendering surface, swapchain for rendering. Much faster than using D3DImage.</para> 
            <para>Drawbacks: The rendering surface will cover all WPF controls in the same Viewport region. Move controls out of viewport region to solve this problem.</para>
            <para>For displaying ViewCube and CoordinateSystem, separate Model needs to create to render along with the other models. WPF viewport will not be visibled.</para>
            <para>Note: Enable deferred rendering will use seperate rendering thread or rendering.</para>
            </summary>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.Core.Box3">
            <summary>
            Struct for a 3dimensional Box
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Core.Box3.Min">
            <summary>
            3D Vectors defininge the Box
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Core.Box3.Max">
            <summary>
            3D Vectors defininge the Box
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Core.Box3.#ctor(SharpDX.Vector3,SharpDX.Vector3)">
            <summary>
            Constructor for the Box
            </summary>
            <param name="min">Minimum Box-Values</param>
            <param name="max">Maximum Box-Values</param>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Core.Box3.Size">
            <summary>
            Calculates size of the box.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Core.Box3.Contains(SharpDX.Vector3)">
            <summary>
            Returns true if the box contains the given point.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Core.Box3.Contains(HelixToolkit.Wpf.SharpDX.Core.Box3)">
            <summary>
            Returns true if the box completely contains the given box.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Core.Box3.ExtendBy(HelixToolkit.Wpf.SharpDX.Core.Box3)">
            <summary>
            Extends the box to contain the supplied box.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Core.Box3.ExtendBy(SharpDX.Vector3)">
            <summary>
            Extends the box to contain the supplied value.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Core.Box3.ExtendXBy(System.Single)">
            <summary>
            Extends the box to contain the supplied value.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Core.Box3.ExtendYBy(System.Single)">
            <summary>
            Extends the box to contain the supplied value.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Core.Box3.ExtendZBy(System.Single)">
            <summary>
            Extends the box to contain the supplied value.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Core.Box3.Intersects(HelixToolkit.Wpf.SharpDX.Core.Box3)">
            <summary>
            Returns true if 2 boxes intersect each other.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Core.Box3.Intersects(HelixToolkit.Wpf.SharpDX.Core.Box3,SharpDX.Vector3)">
            <summary>
            Returns true if 2 boxes intersect each other with tolerance parameter.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Core.Box3.Intersects(HelixToolkit.Wpf.SharpDX.Core.Box3,System.Single)">
            <summary>
            Returns true if 2 boxes intersect each other with tolerance parameter.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Core.Box3.Union(HelixToolkit.Wpf.SharpDX.Core.Box3)">
            <summary>
            
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Core.Box3.Intersection(HelixToolkit.Wpf.SharpDX.Core.Box3)">
            <summary>
            
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Core.Box3.Union(HelixToolkit.Wpf.SharpDX.Core.Box3,HelixToolkit.Wpf.SharpDX.Core.Box3)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Core.Box3.Intersection(HelixToolkit.Wpf.SharpDX.Core.Box3,HelixToolkit.Wpf.SharpDX.Core.Box3)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Core.Box3.IsValid">
            <summary>
            True if the box is valid.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Core.Box3.FromPoints(SharpDX.Vector3,SharpDX.Vector3)">
            <summary>
            Creates box from 2 points which need not be Min and Max.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Core.Box3.FromPoints(System.Collections.Generic.IEnumerable{SharpDX.Vector3})">
            <summary>
            Creates box from a set points which need not be Min and Max.
            </summary>
            <param name="points"></param>        
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Core.ExposedArrayList`1.Array">
            <summary>
            Using with caustious(Array Length >= List.Count).
            </summary>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.Ray3">
            <summary>
            Represents a 3D ray.
            </summary>    
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Ray3.#ctor">
            <summary>
            Initializes a new instance of the <see cref = "T:HelixToolkit.Wpf.SharpDX.Ray3" /> class.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Ray3.#ctor(SharpDX.Vector3,SharpDX.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Wpf.SharpDX.Ray3"/> class.
            </summary>
            <param name="origin">
            The origin.
            </param>
            <param name="direction">
            The sender.
            </param>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Ray3.Direction">
            <summary>
            Gets or sets the direction.
            </summary>
            <value>The direction.</value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Ray3.Origin">
            <summary>
            Gets or sets the origin.
            </summary>
            <value>The origin.</value>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Ray3.GetNearest(SharpDX.Vector3)">
            <summary>
            Gets the point on the ray that is nearest the specified point.
            </summary>
            <param name="p3">
            The point.
            </param>
            <returns>
            The nearest point on the ray.
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Ray3.PlaneIntersection(SharpDX.Vector3,SharpDX.Vector3)">
            <summary>
            Finds the intersection with a plane.
            </summary>
            <param name="position">The position.</param>
            <param name="normal">The normal.</param>
            <returns>The intersection point.</returns>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.Ray3D">
            <summary>
            Represents a 3D ray.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Ray3D.#ctor">
            <summary>
            Initializes a new instance of the <see cref = "T:HelixToolkit.Wpf.SharpDX.Ray3D" /> class.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Ray3D.#ctor(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Vector3D)">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Wpf.SharpDX.Ray3D"/> class.
            </summary>
            <param name="o">
            The o.
            </param>
            <param name="d">
            The sender.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Ray3D.#ctor(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Point3D)">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Wpf.SharpDX.Ray3D"/> class.
            </summary>
            <param name="p0">
            The p0.
            </param>
            <param name="p1">
            The p1.
            </param>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Ray3D.Direction">
            <summary>
            Gets or sets the direction.
            </summary>
            <value>The direction.</value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Ray3D.Origin">
            <summary>
            Gets or sets the origin.
            </summary>
            <value>The origin.</value>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Ray3D.GetNearest(System.Windows.Media.Media3D.Point3D)">
            <summary>
            Gets the point on the ray that is nearest the specified point.
            </summary>
            <param name="p3">
            The point.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Ray3D.PlaneIntersection(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Vector3D)">
            <summary>
            Finds the intersection with a plane.
            </summary>
            <param name="position">The position.</param>
            <param name="normal">The normal.</param>
            <returns>The intersection point.</returns>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.CameraExtensions">
            <summary>
            Provides extension methods for the cameras.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraExtensions.AnimateTo(HelixToolkit.Wpf.SharpDX.Camera,System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D,System.Double)">
            <summary>
            Animates the camera position and directions.
            </summary>
            <param name="camera">
            The camera to animate.
            </param>
            <param name="newPosition">
            The position to animate to.
            </param>
            <param name="newDirection">
            The direction to animate to.
            </param>
            <param name="newUpDirection">
            The up direction to animate to.
            </param>
            <param name="animationTime">
            Animation time in milliseconds.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraExtensions.AnimateWidth(HelixToolkit.Wpf.SharpDX.OrthographicCamera,System.Double,System.Double)">
            <summary>
            Animates the orthographic width.
            </summary>
            <param name="camera">
            An orthographic camera.
            </param>
            <param name="newWidth">
            The width to animate to.
            </param>
            <param name="animationTime">
            Animation time in milliseconds
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraExtensions.ChangeDirection(HelixToolkit.Wpf.SharpDX.ProjectionCamera,System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D,System.Double)">
            <summary>
            Changes the direction of a camera.
            </summary>
            <param name="camera">
            The camera.
            </param>
            <param name="newLookDir">
            The new look direction.
            </param>
            <param name="newUpDirection">
            The new up direction.
            </param>
            <param name="animationTime">
            The animation time.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraExtensions.CopyTo(HelixToolkit.Wpf.SharpDX.Camera,HelixToolkit.Wpf.SharpDX.Camera)">
            <summary>
            Copies the specified camera, converts field of view/width if necessary.
            </summary>
            <param name="source">
            The source camera.
            </param>
            <param name="dest">
            The destination camera.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraExtensions.CreateDefaultCamera">
            <summary>
            Creates a default perspective camera.
            </summary>
            <returns>A perspective camera.</returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraExtensions.FindPanVector(HelixToolkit.Wpf.SharpDX.Camera,System.Double,System.Double)">
            <summary>
            Finds the pan vector.
            </summary>
            <param name="camera">The camera.</param>
            <param name="dx">The delta x.</param>
            <param name="dy">The delta y.</param>
            <returns>
            The <see cref="T:System.Windows.Media.Media3D.Vector3D" /> .
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraExtensions.GetInfo(HelixToolkit.Wpf.SharpDX.Camera)">
            <summary>
            Gets an information string about the specified camera.
            </summary>
            <param name="camera">
            The camera.
            </param>
            <returns>
            The get info.
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraExtensions.GetInverseViewProjectionMatrix3D(HelixToolkit.Wpf.SharpDX.Camera,System.Double)">
            <summary>
            Gets the inverse camera transform.
            </summary>
            <param name="camera">
            The camera.
            </param>
            <param name="aspectRatio">
            The aspect ratio.
            </param>
            <returns>
            The inverse transform.
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraExtensions.GetInverseViewProjectionMatrix(HelixToolkit.Wpf.SharpDX.Camera,System.Double)">
            <summary>
            Gets the inverse camera transform.
            </summary>
            <param name="camera">
            The camera.
            </param>
            <param name="aspectRatio">
            The aspect ratio.
            </param>
            <returns>
            The inverse transform.
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraExtensions.GetProjectionMatrix3D(HelixToolkit.Wpf.SharpDX.Camera,System.Double)">
            <summary>
            Gets the projection matrix for the specified camera.
            </summary>
            <param name="camera">The camera.</param>
            <param name="aspectRatio">The aspect ratio.</param>
            <returns>The projection matrix.</returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraExtensions.GetProjectionMatrix(HelixToolkit.Wpf.SharpDX.Camera,System.Double)">
            <summary>
            Gets the projection matrix for the specified camera.
            </summary>
            <param name="camera">The camera.</param>
            <param name="aspectRatio">The aspect ratio.</param>
            <returns>The projection matrix.</returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraExtensions.GetViewProjectionMatrix3D(HelixToolkit.Wpf.SharpDX.Camera,System.Double)">
            <summary>
            Get the combined view and projection transform
            </summary>
            <param name="camera">The camera.</param>
            <param name="aspectRatio">The aspect ratio.</param>
            <returns>The total view and projection transform.</returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraExtensions.GetViewProjectionMatrix(HelixToolkit.Wpf.SharpDX.Camera,System.Double)">
            <summary>
            Get the combined view and projection transform
            </summary>
            <param name="camera">The camera.</param>
            <param name="aspectRatio">The aspect ratio.</param>
            <returns>The total view and projection transform.</returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraExtensions.GetViewMatrix3D(HelixToolkit.Wpf.SharpDX.Camera)">
            <summary>
            Obtains the view transform matrix for a camera. (see page 327)
            </summary>
            <param name="camera">
            Camera to obtain the ViewMatrix for
            </param>
            <returns>
            A Matrix object with the camera view transform matrix, or a Matrix with all zeros if the "camera" is null.
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraExtensions.GetViewMatrix(HelixToolkit.Wpf.SharpDX.Camera)">
            <summary>
            Obtains the view transform matrix for a camera. (see page 327)
            </summary>
            <param name="camera">
            Camera to obtain the ViewMatrix for
            </param>
            <returns>
            A Matrix object with the camera view transform matrix, or a Matrix with all zeros if the "camera" is null.
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraExtensions.LookAt(HelixToolkit.Wpf.SharpDX.Camera,System.Windows.Media.Media3D.Point3D,System.Double)">
            <summary>
            Set the camera target point without changing the look direction.
            </summary>
            <param name="camera">
            The camera.
            </param>
            <param name="target">
            The target.
            </param>
            <param name="animationTime">
            The animation time.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraExtensions.LookAt(HelixToolkit.Wpf.SharpDX.Camera,System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Vector3D,System.Double)">
            <summary>
            Set the camera target point and look direction
            </summary>
            <param name="camera">
            The camera.
            </param>
            <param name="target">
            The target.
            </param>
            <param name="newLookDirection">
            The new look direction.
            </param>
            <param name="animationTime">
            The animation time.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraExtensions.LookAt(HelixToolkit.Wpf.SharpDX.Camera,System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D,System.Double)">
            <summary>
            Set the camera target point and directions
            </summary>
            <param name="camera">
            The camera.
            </param>
            <param name="target">
            The target.
            </param>
            <param name="newLookDirection">
            The new look direction.
            </param>
            <param name="newUpDirection">
            The new up direction.
            </param>
            <param name="animationTime">
            The animation time.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraExtensions.LookAt(HelixToolkit.Wpf.SharpDX.Camera,System.Windows.Media.Media3D.Point3D,System.Double,System.Double)">
            <summary>
            Set the camera target point and camera distance.
            </summary>
            <param name="camera">
            The camera.
            </param>
            <param name="target">
            The target point.
            </param>
            <param name="distance">
            The distance to the camera.
            </param>
            <param name="animationTime">
            The animation time.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraExtensions.Reset(HelixToolkit.Wpf.SharpDX.Camera)">
            <summary>
            Resets the specified camera.
            </summary>
            <param name="camera">
            The camera.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraExtensions.Reset(HelixToolkit.Wpf.SharpDX.PerspectiveCamera)">
            <summary>
            Resets the specified perspective camera.
            </summary>
            <param name="camera">
            The camera.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraExtensions.Reset(HelixToolkit.Wpf.SharpDX.OrthographicCamera)">
            <summary>
            Resets the specified orthographic camera.
            </summary>
            <param name="camera">
            The camera.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraExtensions.ZoomExtents(HelixToolkit.Wpf.SharpDX.Camera,HelixToolkit.Wpf.SharpDX.Viewport3DX,System.Double)">
            <summary>
            Zooms to fit the extents of the specified viewport.
            </summary>
            <param name="camera">
            The actual camera.
            </param>
            <param name="viewport">
            The viewport.
            </param>
            <param name="animationTime">
            The animation time.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraExtensions.ZoomExtents(HelixToolkit.Wpf.SharpDX.Camera,HelixToolkit.Wpf.SharpDX.Viewport3DX,System.Windows.Media.Media3D.Rect3D,System.Double)">
            <summary>
            Zooms to fit the specified bounding rectangle.
            </summary>
            <param name="camera">
            The actual camera.
            </param>
            <param name="viewport">
            The viewport.
            </param>
            <param name="bounds">
            The bounding rectangle.
            </param>
            <param name="animationTime">
            The animation time.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraExtensions.ZoomExtents(HelixToolkit.Wpf.SharpDX.Camera,HelixToolkit.Wpf.SharpDX.Viewport3DX,System.Windows.Media.Media3D.Point3D,System.Double,System.Double)">
            <summary>
            Zooms to fit the specified sphere.
            </summary>
            <param name="camera">
            The camera.
            </param>
            <param name="viewport">
            The viewport.
            </param>
            <param name="center">
            The center of the sphere.
            </param>
            <param name="radius">
            The radius of the sphere.
            </param>
            <param name="animationTime">
            The animation time.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraExtensions.ZoomToRectangle(HelixToolkit.Wpf.SharpDX.Camera,HelixToolkit.Wpf.SharpDX.Viewport3DX,System.Windows.Rect)">
            <summary>
            Zooms the camera to the specified rectangle.
            </summary>
            <param name="camera">
            The camera.
            </param>
            <param name="viewport">
            The viewport.
            </param>
            <param name="zoomRectangle">
            The zoom rectangle.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraExtensions.MoveCameraPosition(HelixToolkit.Wpf.SharpDX.Camera,System.Windows.Media.Media3D.Vector3D)">
            <summary>
            Moves the camera position.
            </summary>
            <param name="camera">The camera.</param>
            <param name="delta">The delta.</param>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.DefaultEffectsManager">
            <summary>
            An Effects manager which includes all standard effects, 
            tessellation, and deferred effects.
            <para>Make sure to dispose this if not being used. Otherwise may cause memory leak.</para>
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.DefaultEffectsManager.IsInDesignMode">
            <summary>
            Gets a value indicating whether the control is in design mode
            (running in Blend or Visual Studio).
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.DefaultEffectsManager.MinimumFeatureLevel">
            <summary>
            The minimum supported feature level.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DefaultEffectsManager.#ctor(HelixToolkit.Wpf.SharpDX.IRenderTechniquesManager)">
            <summary>
            Construct an EffectsManager
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DefaultEffectsManager.GetBestAdapter(System.Int32@)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.DefaultEffectsManager.Device">
            <summary>
            
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.DefaultEffectsManager.AdapterIndex">
            <summary>
            Gets the index of the adapter in use.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.DefaultEffectsManager.DriverType">
            <summary>
            Gets the device's driver type.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.DefaultEffectsManager.device">
            <summary>
            
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.DefaultEffectsManager.adapterIndex">
            <summary>
            The index of the adapter in use.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.DefaultEffectsManager.driverType">
            <summary>
            The driver type.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.DefaultEffectsManager.data">
            <summary>
            
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DefaultEffectsManager.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DefaultEffectsManager.InitEffects">
            <summary>
            Initialize all effects.
            
            Override in a derived class to control how effects are initialized.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DefaultEffectsManager.RegisterEffect(System.Byte[],HelixToolkit.Wpf.SharpDX.RenderTechnique[],SharpDX.D3DCompiler.EffectFlags)">
            <summary>
            Register an effect for a set of RenderTechniques.
            </summary>
            <param name="shaderEffectBytecode">A byte array representing the compiled shader.</param>
            <param name="techniques">A set of RenderTechnique objects for which to associate the Effect.</param>
            <param name="eFlags"></param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DefaultEffectsManager.RegisterEffect(System.String,HelixToolkit.Wpf.SharpDX.RenderTechnique[],SharpDX.D3DCompiler.ShaderFlags,SharpDX.D3DCompiler.EffectFlags)">
            <summary>
            Register an effect for a set of RenderTechniques.
            </summary>
            <param name="shaderEffectString">A string representing the shader code.</param>
            <param name="techniques">A set of RenderTechnique objects for which to associate the Effect.</param>
            <param name="sFlags"></param>
            <param name="eFlags"></param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DefaultEffectsManager.RegisterEffect(System.String,HelixToolkit.Wpf.SharpDX.RenderTechnique,SharpDX.D3DCompiler.ShaderFlags,SharpDX.D3DCompiler.EffectFlags)">
            <summary>
            Register an effect for a RenderTechnique.
            
            Override in a derived class to control how effects are registered.
            </summary>
            <param name="shaderEffectString">A string representing the shader code.</param>
            <param name="technique"></param>
            <param name="sFlags"></param>
            <param name="eFlags"></param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DefaultEffectsManager.RegisterLayout(HelixToolkit.Wpf.SharpDX.RenderTechnique,SharpDX.Direct3D11.InputLayout)">
            <summary>
            Register an InputLayout for a RenderTechnique.
            </summary>
            <param name="technique">A RenderTechnique object.</param>
            <param name="layout">An InputLayout object.</param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DefaultEffectsManager.RegisterLayout(HelixToolkit.Wpf.SharpDX.RenderTechnique[],SharpDX.Direct3D11.InputLayout)">
            <summary>
            Register an InputLayout for a set of RenderTechniques
            </summary>
            <param name="techniques">An array of RenderTechnique objects.</param>
            <param name="layout">An InputLayout object.</param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DefaultEffectsManager.GetEffect(HelixToolkit.Wpf.SharpDX.RenderTechnique)">
            <summary>
            Get the Effect associated with a RenderTechnique.
            </summary>
            <param name="technique">A RenderTechnique object.</param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.DefaultEffectsManager.GetLayout(HelixToolkit.Wpf.SharpDX.RenderTechnique)">
            <summary>
            Get the InputLayout associated with a RenderTechnique
            </summary>
            <param name="technique">A RenderTechnique object.</param>
            <returns></returns>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.HitTestResult">
            <summary>
            Provides a hit test result.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.HitTestResult.Distance">
            <summary>
            Gets the distance between the hit intersection and the inner coordinate space
            of the System.Windows.Media.Media3D.Visual3D which initiated the hit test.
            
            Double that indicates the distance between the hit intersection and the inner
            coordinate space of the System.Windows.Media.Media3D.Visual3D which initiated
            the hit test.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.HitTestResult.ModelHit">
            <summary>
            Gets the Model3D intersected by the ray along which the hit test was performed.
            Model3D intersected by the ray.
            </summary>        
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.HitTestResult.PointHit">
            <summary>
            Gets the Point3D at the intersection between the ray along which the hit
            test was performed and the hit object.
            Point3D at which the hit object was intersected by the ray.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.HitTestResult.NormalAtHit">
            <summary>
            The normal vector of the triangle hit.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.HitTestResult.IsValid">
            <summary>
            Indicates if this Result has data from a valid hit.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.HitTestResult.Tag">
            <summary>
            This is a tag to add additional data.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.HitTestResult.TriangleIndices">
            <summary>
            The hitted triangle vertex indices.
            </summary>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.LineHitTestResult">
            <summary>
            A specialized line hit test result.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.LineHitTestResult.LineIndex">
            <summary>
            Gets or sets the index of the line segment that was hit.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.LineHitTestResult.RayToLineDistance">
            <summary>
            Gets or sets the shortest distance between the hit test ray and the line that was hit.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.LineHitTestResult.RayHitPointScalar">
            <summary>
            Gets or sets the scalar of the closest point on the hit test ray.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.LineHitTestResult.LineHitPointScalar">
            <summary>
            Gets or sets the scalar of the closest point on the line that was hit.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.FpsCounter.MinimumUpdateDuration">
            <summary>
            Minimum FPS Update Duration, Unit = Milliseconds.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.FpsCounter.AveragingInterval">
            <summary>
            
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.FpsCounter.AddFrame(System.TimeSpan)">
            <summary>
            
            </summary>
            <param name="ts"></param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.FpsCounter.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.FpsCounter.Value">
            <summary>
            
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.FpsCounter.UpdateValue">
            <summary>
            
            </summary>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.CameraMode">
            <summary>
            Camera movement modes.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CameraMode.Inspect">
            <summary>
            Orbits around a point (fixed target position, move closer target when zooming).
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CameraMode.WalkAround">
            <summary>
            Walk around (fixed camera position when rotating, move in camera direction when zooming).
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CameraMode.FixedPosition">
            <summary>
            Fixed camera target, change field of view when zooming.
            </summary>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.CameraRotationMode">
            <summary>
            Camera rotation modes.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CameraRotationMode.Turntable">
            <summary>
            Turntable is constrained to two axes of rotation (model up and right direction)
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CameraRotationMode.Turnball">
            <summary>
            Turnball using three axes (look direction, right direction and up direction (on the left/right edges)).
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CameraRotationMode.Trackball">
            <summary>
            Using a virtual trackball.
            </summary>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.CameraSetting">
            <summary>
            Represents camera settings.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraSetting.#ctor(HelixToolkit.Wpf.SharpDX.ProjectionCamera)">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Wpf.SharpDX.CameraSetting"/> class.
            </summary>
            <param name="camera">
            The camera.
            </param>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.CameraSetting.FarPlaneDistance">
            <summary>
            Gets or sets FarPlaneDistance.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.CameraSetting.FieldOfView">
            <summary>
            Gets or sets FieldOfView.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.CameraSetting.LookDirection">
            <summary>
            Gets or sets LookDirection.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.CameraSetting.NearPlaneDistance">
            <summary>
            Gets or sets NearPlaneDistance.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.CameraSetting.Position">
            <summary>
            Gets or sets Position.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.CameraSetting.UpDirection">
            <summary>
            Gets or sets UpDirection.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.CameraSetting.Width">
            <summary>
            Gets or sets Width.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CameraSetting.UpdateCamera(HelixToolkit.Wpf.SharpDX.ProjectionCamera)">
            <summary>
            Sets the properties of the specified camera to the settings stored in this object.
            </summary>
            <param name="camera">
            The camera.
            </param>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.ManipulationEventArgs">
            <summary>
            Provides data for the manipulation events.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ManipulationEventArgs.#ctor(System.Windows.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Wpf.SharpDX.ManipulationEventArgs"/> class.
            </summary>
            <param name="currentPosition">
            The current position.
            </param>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.ManipulationEventArgs.CurrentPosition">
            <summary>
            Gets the current position.
            </summary>
            <value>The current position.</value>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.MouseGestureHandler">
            <summary>
            An abstract base class for the mouse gesture handlers.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MouseGestureHandler.#ctor(HelixToolkit.Wpf.SharpDX.Viewport3DX)">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Wpf.SharpDX.MouseGestureHandler"/> class.
            </summary>
            <param name="viewport">
            The viewport.
            </param>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.MouseGestureHandler.Origin">
            <summary>
            Gets the origin.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.MouseGestureHandler.Camera">
            <summary>
            Gets the camera.
            </summary>
            <value>The camera.</value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.MouseGestureHandler.CameraMode">
            <summary>
            Gets the camera mode.
            </summary>
            <value>The camera mode.</value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.MouseGestureHandler.LastPoint">
            <summary>
            Gets or sets the last point (in 2D screen coordinates).
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.MouseGestureHandler.LastPoint3D">
            <summary>
            Gets or sets the last point (in 3D world coordinates).
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.MouseGestureHandler.ManipulationWatch">
            <summary>
            Gets or sets the manipulation stopwatch.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.MouseGestureHandler.ModelUpDirection">
            <summary>
            Gets the model up direction.
            </summary>
            <value>The model up direction.</value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.MouseGestureHandler.MouseDownNearestPoint3D">
            <summary>
            Gets or sets the mouse down point at the nearest hit element (3D world coordinates).
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.MouseGestureHandler.MouseDownPoint">
            <summary>
            Gets or sets the mouse down point (2D screen coordinates).
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.MouseGestureHandler.MouseDownPoint3D">
            <summary>
            Gets or sets the mouse down point (3D world coordinates).
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.MouseGestureHandler.RotationSensitivity">
            <summary>
            Gets the rotation sensitivity.
            </summary>
            <value>The rotation sensitivity.</value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.MouseGestureHandler.Viewport">
            <summary>
            Gets the viewport.
            </summary>
            <value>The viewport.</value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.MouseGestureHandler.ZoomSensitivity">
            <summary>
            Gets the zoom sensitivity.
            </summary>
            <value>The zoom sensitivity.</value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.MouseGestureHandler.OldCursor">
            <summary>
            Gets or sets the old cursor.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MouseGestureHandler.Completed(HelixToolkit.Wpf.SharpDX.ManipulationEventArgs)">
            <summary>
            Occurs when the manipulation is completed.
            </summary>
            <param name="e">
            The <see cref="T:HelixToolkit.Wpf.SharpDX.ManipulationEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MouseGestureHandler.Delta(HelixToolkit.Wpf.SharpDX.ManipulationEventArgs)">
            <summary>
            Occurs when the position is changed during a manipulation.
            </summary>
            <param name="e">
            The <see cref="T:HelixToolkit.Wpf.SharpDX.ManipulationEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MouseGestureHandler.Execute(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Executes the mouse gesture command.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MouseGestureHandler.Started(HelixToolkit.Wpf.SharpDX.ManipulationEventArgs)">
            <summary>
            Occurs when the manipulation is started.
            </summary>
            <param name="e">
            The <see cref="T:HelixToolkit.Wpf.SharpDX.ManipulationEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MouseGestureHandler.UnProject(System.Windows.Point,System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Vector3D)">
            <summary>
            Un-projects a point from the screen (2D) to a point on plane (3D)
            </summary>
            <param name="p">
            The 2D point.
            </param>
            <param name="position">
            plane position
            </param>
            <param name="normal">
            plane normal
            </param>
            <returns>
            A 3D point.
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MouseGestureHandler.UnProject(System.Windows.Point)">
            <summary>
            Un-projects a point from the screen (2D) to a point on the plane trough the camera target point.
            </summary>
            <param name="p">
            The 2D point.
            </param>
            <returns>
            A 3D point.
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MouseGestureHandler.CanExecute">
            <summary>
            Occurs when the command associated with this handler initiates a check to determine whether the command can be executed on the command target.
            </summary>
            <returns>
            True if the execution can continue.
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MouseGestureHandler.GetCursor">
            <summary>
            Gets the cursor for the gesture.
            </summary>
            <returns>
            A cursor.
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MouseGestureHandler.GetRay(System.Windows.Point)">
            <summary>
            Get the ray into the view volume given by the position in 2D (screen coordinates)
            </summary>
            <param name="position">
            A 2D point.
            </param>
            <returns>
            A ray
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MouseGestureHandler.OnInertiaStarting(System.Int32)">
            <summary>
            Called when inertia is starting.
            </summary>
            <param name="elapsedTime">
            The elapsed time (milliseconds).
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MouseGestureHandler.OnMouseDown(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            Called when the mouse button is pressed down.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The <see cref="T:System.Windows.Input.MouseEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MouseGestureHandler.OnMouseMove(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            The on mouse move.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MouseGestureHandler.OnMouseUp(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            The on mouse up.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MouseGestureHandler.Project(System.Windows.Media.Media3D.Point3D)">
            <summary>
            Calculate the screen position of a 3D point.
            </summary>
            <param name="p">
            The 3D point.
            </param>
            <returns>
            The 2D point.
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MouseGestureHandler.SetMouseDownPoint(System.Windows.Point)">
            <summary>
            Sets mouse down point.
            </summary>
            <param name="position">
            The position.
            </param>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.PanHandler">
            <summary>
            Handles panning.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.PanHandler.panPoint3D">
            <summary>
            The 3D pan origin.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.PanHandler.#ctor(HelixToolkit.Wpf.SharpDX.Viewport3DX)">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Wpf.SharpDX.PanHandler"/> class.
            </summary>
            <param name="viewport">
            The viewport.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.PanHandler.Delta(HelixToolkit.Wpf.SharpDX.ManipulationEventArgs)">
            <summary>
            Occurs when the position is changed during a manipulation.
            </summary>
            <param name="e">The <see cref="T:HelixToolkit.Wpf.SharpDX.ManipulationEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.PanHandler.Pan(System.Windows.Media.Media3D.Vector3D)">
            <summary>
            Pans the camera by the specified 3D vector (world coordinates).
            </summary>
            <param name="delta">
            The panning vector.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.PanHandler.Pan(System.Windows.Vector)">
            <summary>
            Pans the camera by the specified 2D vector (screen coordinates).
            </summary>
            <param name="delta">
            The delta.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.PanHandler.Started(HelixToolkit.Wpf.SharpDX.ManipulationEventArgs)">
            <summary>
            Occurs when the manipulation is started.
            </summary>
            <param name="e">The <see cref="T:HelixToolkit.Wpf.SharpDX.ManipulationEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.PanHandler.CanExecute">
            <summary>
            Occurs when the command associated with this handler initiates a check to determine whether the command can be executed on the command target.
            </summary>
            <returns>
            True if the execution can continue.
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.PanHandler.GetCursor">
            <summary>
            Gets the cursor for the gesture.
            </summary>
            <returns>
            A cursor.
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.PanHandler.OnInertiaStarting(System.Int32)">
            <summary>
            Called when inertia is starting.
            </summary>
            <param name="elapsedTime">
            The elapsed time (milliseconds).
            </param>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.RotateHandler">
            <summary>
            Handles rotation.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.RotateHandler.changeLookAt">
            <summary>
            The change look at.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.RotateHandler.rotationAxisX">
            <summary>
            The x rotation axis.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.RotateHandler.rotationAxisY">
            <summary>
            The y rotation axis.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.RotateHandler.rotationPoint">
            <summary>
            The rotation point.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.RotateHandler.rotationPoint3D">
            <summary>
            The 3D rotation point.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.RotateHandler.#ctor(HelixToolkit.Wpf.SharpDX.Viewport3DX,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Wpf.SharpDX.RotateHandler"/> class.
            </summary>
            <param name="controller">
            The controller.
            </param>
            <param name="changeLookAt">
            The change look at.
            </param>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.RotateHandler.CameraRotationMode">
            <summary>
            Gets the camera rotation mode.
            </summary>
            <value>
            The camera rotation mode.
            </value>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.RotateHandler.Completed(HelixToolkit.Wpf.SharpDX.ManipulationEventArgs)">
            <summary>
            Occurs when the manipulation is completed.
            </summary>
            <param name="e">The <see cref="T:HelixToolkit.Wpf.SharpDX.ManipulationEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.RotateHandler.Delta(HelixToolkit.Wpf.SharpDX.ManipulationEventArgs)">
            <summary>
            Occurs when the position is changed during a manipulation.
            </summary>
            <param name="e">The <see cref="T:HelixToolkit.Wpf.SharpDX.ManipulationEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.RotateHandler.LookAt(System.Windows.Media.Media3D.Point3D,System.Double)">
            <summary>
            Change the "look-at" point.
            </summary>
            <param name="target">
            The target.
            </param>
            <param name="animationTime">
            The animation time.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.RotateHandler.Rotate(System.Windows.Point,System.Windows.Point,System.Windows.Media.Media3D.Point3D)">
            <summary>
            Rotate the camera around the specified point.
            </summary>
            <param name="p0">
            The p 0.
            </param>
            <param name="p1">
            The p 1.
            </param>
            <param name="rotateAround">
            The rotate around.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.RotateHandler.Rotate(System.Windows.Vector)">
            <summary>
            The rotate.
            </summary>
            <param name="delta">
            The delta.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.RotateHandler.RotateTurnball(System.Windows.Point,System.Windows.Point,System.Windows.Media.Media3D.Point3D)">
            <summary>
            Rotate around three axes.
            </summary>
            <param name="p1">
            The previous mouse position.
            </param>
            <param name="p2">
            The current mouse position.
            </param>
            <param name="rotateAround">
            The point to rotate around.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.RotateHandler.RotateTurntable(System.Windows.Vector,System.Windows.Media.Media3D.Point3D)">
            <summary>
            Rotate camera using 'Turntable' rotation.
            </summary>
            <param name="delta">
            The relative change in position.
            </param>
            <param name="rotateAround">
            The point to rotate around.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.RotateHandler.Started(HelixToolkit.Wpf.SharpDX.ManipulationEventArgs)">
            <summary>
            Occurs when the manipulation is started.
            </summary>
            <param name="e">The <see cref="T:HelixToolkit.Wpf.SharpDX.ManipulationEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.RotateHandler.CanExecute">
            <summary>
            The can execute.
            </summary>
            <returns>
            True if the execution can continue.
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.RotateHandler.GetCursor">
            <summary>
            Gets the cursor.
            </summary>
            <returns>
            A cursor.
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.RotateHandler.OnInertiaStarting(System.Int32)">
            <summary>
            Called when inertia is starting.
            </summary>
            <param name="elapsedTime">
            The elapsed time.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.RotateHandler.ProjectToTrackball(System.Windows.Point,System.Double,System.Double)">
            <summary>
            Projects a screen position to the trackball unit sphere.
            </summary>
            <param name="point">
            The screen position.
            </param>
            <param name="w">
            The width of the viewport.
            </param>
            <param name="h">
            The height of the viewport.
            </param>
            <returns>
            A trackball coordinate.
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.RotateHandler.InitTurnballRotationAxes(System.Windows.Point)">
            <summary>
            Initializes the 'turn-ball' rotation axes from the specified point.
            </summary>
            <param name="p1">
            The point.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.RotateHandler.RotateTrackball(System.Windows.Point,System.Windows.Point,System.Windows.Media.Media3D.Point3D)">
            <summary>
            The rotate trackball.
            </summary>
            <param name="p1">
            The previous mouse position.
            </param>
            <param name="p2">
            The current mouse position.
            </param>
            <param name="rotateAround">
            The point to rotate around.
            </param>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.TouchMode">
            <summary>
            The touch mode.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.TouchMode.None">
            <summary>
            No touch handling mode.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.TouchMode.Panning">
            <summary>
            The panning mode.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.TouchMode.Rotating">
            <summary>
            The rotating mode.
            </summary>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.ZoomHandler">
            <summary>
            Handles zooming.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.ZoomHandler.changeFieldOfView">
            <summary>
            The change field of view.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.ZoomHandler.zoomPoint">
            <summary>
            The zoom point.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.ZoomHandler.zoomPoint3D">
            <summary>
            The 3D zoom point.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ZoomHandler.#ctor(HelixToolkit.Wpf.SharpDX.Viewport3DX,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Wpf.SharpDX.ZoomHandler"/> class.
            </summary>
            <param name="viewport">
            The viewport.
            </param>
            <param name="changeFieldOfView">
            if set to <c>true</c> [change field of view].
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ZoomHandler.Completed(HelixToolkit.Wpf.SharpDX.ManipulationEventArgs)">
            <summary>
            Occurs when the manipulation is completed.
            </summary>
            <param name="e">The <see cref="T:HelixToolkit.Wpf.SharpDX.ManipulationEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ZoomHandler.Delta(HelixToolkit.Wpf.SharpDX.ManipulationEventArgs)">
            <summary>
            Occurs when the position is changed during a manipulation.
            </summary>
            <param name="e">The <see cref="T:HelixToolkit.Wpf.SharpDX.ManipulationEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ZoomHandler.Started(HelixToolkit.Wpf.SharpDX.ManipulationEventArgs)">
            <summary>
            Occurs when the manipulation is started.
            </summary>
            <param name="e">The <see cref="T:HelixToolkit.Wpf.SharpDX.ManipulationEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ZoomHandler.Zoom(System.Double)">
            <summary>
            Zooms the view.
            </summary>
            <param name="delta">
            The delta.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ZoomHandler.Zoom(System.Double,System.Windows.Media.Media3D.Point3D)">
            <summary>
            Zooms the view around the specified point.
            </summary>
            <param name="delta">
            The delta.
            </param>
            <param name="zoomAround">
            The zoom around.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ZoomHandler.MoveCameraPosition(System.Windows.Media.Media3D.Vector3D)">
            <summary>
            Changes the camera position by the specified vector.
            </summary>
            <param name="delta">The translation vector in camera space (z in look direction, y in up direction, and x perpendicular to the two others)</param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ZoomHandler.ZoomByChangingCameraWidth(System.Double,System.Windows.Media.Media3D.Point3D)">
            <summary>
            The change camera width.
            </summary>
            <param name="delta">
            The delta.
            </param>
            <param name="zoomAround">
            The zoom around.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ZoomHandler.CanExecute">
            <summary>
            Occurs when the command associated with this handler initiates a check to determine whether the command can be executed on the command target.
            </summary>
            <returns>
            True if the execution can continue.
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ZoomHandler.GetCursor">
            <summary>
            Gets the cursor for the gesture.
            </summary>
            <returns>
            A cursor.
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ZoomHandler.ChangeCameraDistance(System.Double,System.Windows.Media.Media3D.Point3D)">
            <summary>
            Changes the camera distance.
            </summary>
            <param name="delta">The delta.</param>
            <param name="zoomAround">The zoom around point.</param>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.ZoomRectangleHandler">
            <summary>
            Handles rectangle zooming.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.ZoomRectangleHandler.zoomRectangle">
            <summary>
            The zoom rectangle.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ZoomRectangleHandler.#ctor(HelixToolkit.Wpf.SharpDX.Viewport3DX)">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Wpf.SharpDX.ZoomRectangleHandler"/> class.
            </summary>
            <param name="viewport">
            The viewport.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ZoomRectangleHandler.Completed(HelixToolkit.Wpf.SharpDX.ManipulationEventArgs)">
            <summary>
            Occurs when the manipulation is completed.
            </summary>
            <param name="e">The <see cref="T:HelixToolkit.Wpf.SharpDX.ManipulationEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ZoomRectangleHandler.Delta(HelixToolkit.Wpf.SharpDX.ManipulationEventArgs)">
            <summary>
            Occurs when the position is changed during a manipulation.
            </summary>
            <param name="e">The <see cref="T:HelixToolkit.Wpf.SharpDX.ManipulationEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ZoomRectangleHandler.Started(HelixToolkit.Wpf.SharpDX.ManipulationEventArgs)">
            <summary>
            Occurs when the manipulation is started.
            </summary>
            <param name="e">The <see cref="T:HelixToolkit.Wpf.SharpDX.ManipulationEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ZoomRectangleHandler.ZoomRectangle(System.Windows.Rect)">
            <summary>
            Zooms to the specified rectangle.
            </summary>
            <param name="rectangle">
            The zoom rectangle.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ZoomRectangleHandler.CanExecute">
            <summary>
            Occurs when the command associated with this handler initiates a check to determine whether the command can be executed on the command target.
            </summary>
            <returns>True if the execution can continue.</returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ZoomRectangleHandler.GetCursor">
            <summary>
            Gets the cursor for the gesture.
            </summary>
            <returns>A cursor.</returns>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.RenderContext">
            <summary>
            The render-context is currently generated per frame
            Optimizations might be possible
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.RenderUtil.CreateBuffer``1(SharpDX.Direct3D11.Device,SharpDX.Direct3D11.BindFlags,System.Int32,``0[],System.Int32)">
            <summary>
            Create buffer
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.RenderUtil.CreateBuffer``1(SharpDX.Direct3D11.Device,SharpDX.Direct3D11.BindFlags,System.Int32,``0[])">
            <summary>
            Create buffer
            </summary>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.ViewportExtensions">
            <summary>
            Provides extension methods for <see cref="T:HelixToolkit.Wpf.SharpDX.Viewport3DX" />.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ViewportExtensions.GetTotalNumberOfTriangles(HelixToolkit.Wpf.SharpDX.Viewport3DX)">
            <summary>
            Gets the total number of triangles in the viewport.
            </summary>
            <param name="viewport">The viewport.</param>
            <returns>The total number of triangles</returns>        
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ViewportExtensions.Copy(HelixToolkit.Wpf.SharpDX.Viewport3DX,System.Int32)">
            <summary>
            Copies the specified viewport to the clipboard.
            </summary>
            <param name="view">The viewport.</param>
            <param name="m">The oversampling multiplier.</param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ViewportExtensions.Copy(HelixToolkit.Wpf.SharpDX.Viewport3DX,System.Double,System.Double,System.Windows.Media.Brush,System.Int32)">
            <summary>
            Copies the specified viewport to the clipboard.
            </summary>
            <param name="view">The view.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="background">The background.</param>
            <param name="m">The oversampling multiplier.</param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ViewportExtensions.GetViewProjectionMatrix3D(HelixToolkit.Wpf.SharpDX.Viewport3DX)">
            <summary>
            Gets the camera transform.
            </summary>
            <param name="viewport">
            The viewport.
            </param>
            <returns>
            The camera transform.
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ViewportExtensions.GetViewProjectionMatrix(HelixToolkit.Wpf.SharpDX.Viewport3DX)">
            <summary>
            Gets the camera transform.
            </summary>
            <param name="viewport">
            The viewport.
            </param>
            <returns>
            The camera transform.
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ViewportExtensions.GetScreenViewProjectionMatrix3D(HelixToolkit.Wpf.SharpDX.Viewport3DX)">
            <summary>
            Gets the total transform for a Viewport3DX. 
            Old name of this function: GetTotalTransform
            New name of the function: GetScreenViewProjectionTransform
            </summary>
            <param name="viewport">The viewport.</param>
            <returns>The total transform.</returns>     
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ViewportExtensions.GetScreenViewProjectionMatrix(HelixToolkit.Wpf.SharpDX.Viewport3DX)">
            <summary>
            Gets the total transform for a Viewport3DX. 
            Old name of this function: GetTotalTransform
            New name of the function: GetScreenViewProjectionTransform
            </summary>
            <param name="viewport">The viewport.</param>
            <returns>The total transform.</returns>       
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ViewportExtensions.GetViewportMatrix3D(HelixToolkit.Wpf.SharpDX.Viewport3DX)">
            <summary>
            Gets the viewport transform aka the screen-space transform.
            </summary>
            <param name="viewport">
            The viewport.
            </param>
            <returns>The transform.
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ViewportExtensions.GetViewportMatrix(HelixToolkit.Wpf.SharpDX.Viewport3DX)">
            <summary>
            Gets the viewport transform aka the screen-space transform.
            </summary>
            <param name="viewport">
            The viewport.
            </param>
            <returns>The transform.
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ViewportExtensions.FindBounds(HelixToolkit.Wpf.SharpDX.Viewport3DX)">
            <summary>
            Finds the bounding box of the viewport.
            </summary>
            <param name="viewport">The viewport.</param>
            <returns>The bounding box.</returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ViewportExtensions.Traverse``1(HelixToolkit.Wpf.SharpDX.Viewport3DX,System.Action{``0,System.Windows.Media.Media3D.Transform3D})">
            <summary>
            Traverses the Visual3D/Model3D tree and invokes the specified action on each Model3D of the specified type.
            </summary>
            <typeparam name="T">
            The type filter.
            </typeparam>
            <param name="viewport">
            The viewport.
            </param>
            <param name="action">
            The action.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ViewportExtensions.Traverse``1(HelixToolkit.Wpf.SharpDX.Model3D,System.Action{``0,System.Windows.Media.Media3D.Transform3D})">
            <summary>
            Traverses the Visual3D/Model3D tree and invokes the specified action on each Model3D of the specified type.
            </summary>
            <typeparam name="T">
            The type filter.
            </typeparam>
            <param name="element">
            The element.
            </param>
            <param name="action">
            The action.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ViewportExtensions.FindHits(HelixToolkit.Wpf.SharpDX.Viewport3DX,System.Windows.Point)">
            <summary>
            Finds the hits for a given 2D viewport position.
            </summary>
            <param name="viewport">
            The viewport.
            </param>
            <param name="position">
            The position.
            </param>
            <returns>
            List of hits, sorted with the nearest hit first.
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ViewportExtensions.FindNearest(HelixToolkit.Wpf.SharpDX.Viewport3DX,System.Windows.Point,System.Windows.Media.Media3D.Point3D@,System.Windows.Media.Media3D.Vector3D@,HelixToolkit.Wpf.SharpDX.Model3D@)">
            <summary>
            Finds the nearest point and its normal.
            </summary>
            <param name="viewport">
            The viewport.
            </param>
            <param name="position">
            The position.
            </param>
            <param name="point">
            The point.
            </param>
            <param name="normal">
            The normal.
            </param>
            <param name="model">
            The model.
            </param>
            <returns>
            The find nearest.
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ViewportExtensions.FindNearestPoint(HelixToolkit.Wpf.SharpDX.Viewport3DX,System.Windows.Point)">
            <summary>
            Find the coordinates of the nearest point given a 2D position in the viewport
            </summary>
            <param name="viewport">The viewport.</param>
            <param name="position">The position.</param>
            <returns>The nearest point, or null if no point was found.</returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ViewportExtensions.UnProject(HelixToolkit.Wpf.SharpDX.Viewport3DX,SharpDX.Vector2)">
            <summary>
            Un-projects a 2D screen point.
            </summary>
            <param name="viewport">The viewport.</param>
            <param name="point2d">The input point.</param>
            <returns>The ray.</returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ViewportExtensions.UnProject(HelixToolkit.Wpf.SharpDX.Viewport3DX,System.Windows.Point)">
            <summary>
            Un-projects a 2D screen point.
            </summary>
            <param name="viewport">The viewport.</param>
            <param name="point2d">The input point.</param>
            <returns>The ray.</returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ViewportExtensions.UnProjectToRay(HelixToolkit.Wpf.SharpDX.Viewport3DX,System.Windows.Point)">
            <summary>
            Un-projects the specified 2D screen point to a ray.
            </summary>
            <param name="viewport">The viewport.</param>
            <param name="point2d">The point.</param>
            <returns>The ray.</returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ViewportExtensions.UnProjectToRay(HelixToolkit.Wpf.SharpDX.Viewport3DX,SharpDX.Vector2)">
            <summary>
            
            </summary>
            <param name="viewport"></param>
            <param name="point2d"></param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ViewportExtensions.UnProjectOnPlane(HelixToolkit.Wpf.SharpDX.Viewport3DX,System.Windows.Point,System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Vector3D)">
            <summary>
            Un-project a point from the screen (2D) to a point on plane (3D)
            </summary>
            <param name="viewport">
            The viewport.
            </param>
            <param name="p">
            The 2D point.
            </param>
            <param name="position">
            plane position
            </param>
            <param name="normal">
            plane normal
            </param>
            <returns>
            A 3D point.
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ViewportExtensions.UnProjectOnPlane(HelixToolkit.Wpf.SharpDX.Viewport3DX,SharpDX.Vector2,SharpDX.Vector3,SharpDX.Vector3)">
            <summary>
            
            </summary>
            <param name="viewport"></param>
            <param name="p"></param>
            <param name="position"></param>
            <param name="normal"></param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ViewportExtensions.UnProjectOnPlane(HelixToolkit.Wpf.SharpDX.Viewport3DX,SharpDX.Vector2,SharpDX.Plane)">
            <summary>
            
            </summary>
            <param name="viewport"></param>
            <param name="p"></param>
            <param name="plane"></param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ViewportExtensions.UnProjectOnPlane(HelixToolkit.Wpf.SharpDX.Viewport3DX,System.Windows.Point)">
            <summary>
            Un-projects a point from the screen (2D) to a point on the plane trough the camera target point.
            </summary>
            <param name="viewport">
            The viewport.
            </param>
            <param name="p">
            The 2D point.
            </param>
            <returns>
            A 3D point.
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ViewportExtensions.Project(HelixToolkit.Wpf.SharpDX.Viewport3DX,System.Windows.Media.Media3D.Point3D)">
            <summary>
            Projects the specified 3D point to a 2D screen point.
            </summary>
            <param name="viewport">The viewport.</param>
            <param name="point">The 3D point.</param>
            <returns>The point.</returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ViewportExtensions.Print(HelixToolkit.Wpf.SharpDX.Viewport3DX,System.String)">
            <summary>
            Prints the specified viewport.
            </summary>
            <param name="vp">
            The viewport.
            </param>
            <param name="description">
            The description.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ViewportExtensions.RenderBitmap(HelixToolkit.Wpf.SharpDX.Viewport3DX,System.Windows.Media.Brush,System.Int32)">
            <summary>
            Renders the viewport to a bitmap.
            </summary>
            <param name="view">The viewport.</param>
            <param name="background">The background.</param>
            <param name="m">The oversampling multiplier.</param>
            <returns>A bitmap.</returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ViewportExtensions.RenderBitmap(HelixToolkit.Wpf.SharpDX.Viewport3DX,System.Double,System.Double,System.Windows.Media.Brush,System.Int32)">
            <summary>
            Renders the viewport to a bitmap.
            </summary>
            <param name="view">The viewport.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="background">The background.</param>
            <param name="m">The oversampling multiplier.</param>
            <returns>A bitmap.</returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ViewportExtensions.ResizeAndArrange(HelixToolkit.Wpf.SharpDX.Viewport3DX,System.Double,System.Double)">
            <summary>
            Resizes and arranges the viewport.
            </summary>
            <param name="view">
            The view.
            </param>
            <param name="width">
            The width.
            </param>
            <param name="height">
            The height.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ViewportExtensions.SaveBitmap(HelixToolkit.Wpf.SharpDX.Viewport3DX,System.String,System.Windows.Media.Brush,System.Int32)">
            <summary>
            Saves the viewport to a file.
            </summary>
            <param name="view">The view.</param>
            <param name="fileName">Name of the file.</param>
            <param name="background">The background brush.</param>
            <param name="m">The oversampling multiplier.</param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ViewportExtensions.ZoomExtents(HelixToolkit.Wpf.SharpDX.Viewport3DX,System.Double)">
            <summary>
            Zooms to the extents of the specified viewport.
            </summary>
            <param name="viewport">The viewport.</param>
            <param name="animationTime">The animation time.</param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ViewportExtensions.ZoomExtents(HelixToolkit.Wpf.SharpDX.Viewport3DX,System.Windows.Media.Media3D.Rect3D,System.Double)">
            <summary>
            Zooms to the extents of the specified bounding box.
            </summary>
            <param name="viewport">The viewport.</param>
            <param name="bounds">The bounding rectangle.</param>
            <param name="animationTime">The animation time.</param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ViewportExtensions.ZoomExtents(HelixToolkit.Wpf.SharpDX.Viewport3DX,System.Windows.Media.Media3D.Point3D,System.Double,System.Double)">
            <summary>
            Zooms to the extents of the specified bounding sphere.
            </summary>
            <param name="viewport">The viewport.</param>
            <param name="center">The center of the sphere.</param>
            <param name="radius">The radius of the sphere.</param>
            <param name="animationTime">The animation time.</param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ViewportExtensions.ZoomToRectangle(HelixToolkit.Wpf.SharpDX.Viewport3DX,System.Windows.Rect)">
            <summary>
            Zooms the viewport to the specified rectangle.
            </summary>
            <param name="viewport">The viewport.</param>
            <param name="rectangle">The rectangle.</param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ViewportExtensions.ZoomByChangingFieldOfView(HelixToolkit.Wpf.SharpDX.Viewport3DX,System.Double)">
            <summary>
            Changes the field of view and tries to keep the scale fixed.
            </summary>
            <param name="viewport">
            The viewport.
            </param>
            <param name="delta">
            The relative change in fov.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ViewportExtensions.CopyBitmap(System.Windows.Media.Imaging.BitmapSource,System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32)">
            <summary>
            Copies the source bitmap to the specified position in the target bitmap.
            </summary>
            <param name="source">The source bitmap.</param>
            <param name="target">The target bitmap.</param>
            <param name="offsetx">The x offset.</param>
            <param name="offsety">The y offset.</param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Matrix3DExtensions.AddMatrix(System.Windows.Media.Media3D.Matrix3D,System.Windows.Media.Media3D.Matrix3D)">
            <summary>
            
            </summary>
            <param name="m1"></param>
            <param name="m2"></param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Matrix3DExtensions.MultiplyMatrix(System.Windows.Media.Media3D.Matrix3D,System.Double)">
            <summary>
            
            </summary>
            <param name="scalar"></param>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Matrix3DExtensions.Similarity2D(System.Collections.Generic.IList{System.Windows.Media.Media3D.Point3D},System.Collections.Generic.IList{System.Windows.Media.Media3D.Point3D})">
            <summary>
            Computes an optimal similarity transform for two points sets.
            This function assums that the translational component has been already removed, i.e. 
            that both point sets have the same centriod. 
            </summary>
            <param name="p">original points</param>
            <param name="q">transformed points</param>
            <returns>A similarity transform T: p = Tq</returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Matrix3DExtensions.Rigid2D(System.Collections.Generic.IList{System.Windows.Media.Media3D.Point3D},System.Collections.Generic.IList{System.Windows.Media.Media3D.Point3D})">
            <summary>
            Computes an optimal rigid transform for two points sets.
            This function assums that the translational component has been already removed, i.e. 
            that both point sets have the same centriod. 
            </summary>
            <param name="p">original points</param>
            <param name="q">transformed points</param>
            <returns>A rigid transform T: p = Tq</returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Matrix3DExtensions.Rigid2D(System.Collections.Generic.IList{System.Windows.Media.Media3D.Vector3D},System.Collections.Generic.IList{System.Windows.Media.Media3D.Vector3D})">
            <summary>
            Computes an optimal rigid transform for two points sets.
            This function assums that the translational component has been already removed, i.e. 
            that both point sets have the same centriod. 
            </summary>
            <param name="p">original points</param>
            <param name="q">transformed points</param>
            <returns>A rigid transform T: p = Tq</returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Matrix3DExtensions.Similarity2D(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Windows.Media.Media3D.Point3D},System.Collections.Generic.IList{System.Windows.Media.Media3D.Point3D})">
            <summary>
            Computes an optimal similarity transform for two points sets.
            This function assums that the translational component has been already removed, i.e. 
            that both point sets have the same centriod. 
            </summary>
            <param name="w">weight: importance of each point </param>
            <param name="p">original points</param>
            <param name="q">transformed points</param>
            <returns>A similarity transform T: p = Tq</returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Matrix3DExtensions.Rigid2D(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Windows.Media.Media3D.Point3D},System.Collections.Generic.IList{System.Windows.Media.Media3D.Point3D})">
            <summary>
            Computes an optimal rigid local rotation for two points sets.
            This function assums that the translational component has been already removed, i.e. 
            that both point sets have the same centriod. 
            </summary>
            <param name="w">weight: importance of each point </param>
            <param name="p">original points</param>
            <param name="q">transformed points</param>
            <returns>A rigid transform T: p = Tq</returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Matrix3DExtensions.Affine2D(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Windows.Media.Media3D.Point3D},System.Collections.Generic.IList{System.Windows.Media.Media3D.Point3D})">
            <summary>
            Computes an optimal affine transform for two points sets.
            This function assums that the translational component has been already removed, i.e. 
            that both point sets have the same centriod. 
            </summary>
            <param name="w">weight: importance of each point </param>
            <param name="p">original points</param>
            <param name="q">transformed points</param>
            <returns>A affine transform T: p = Tq</returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Matrix3DExtensions.AnisotropicSimilarityX2D(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Point3D)">
            <summary>
            Computes an ansiotropic similarty for an object, which is only scaled along the X-axis, 
            but maintains its Y-scale constantly.
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="q1"></param>
            <param name="q2"></param>
            <returns>A ansiotropic similarty transform T: p = Tq</returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Matrix3DExtensions.AnisotropicSimilarityY2D(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Point3D)">
            <summary>
            Computes an ansiotropic similarty for an object, which is only scaled along the Y-axis, 
            but maintains its X-scale constantly.
            </summary>                    
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="q1"></param>
            <param name="q2"></param>
            <returns>A ansiotropic similarty transform T: p = Tq</returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Matrix3DExtensions.OuterProduct(System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D)">
            <summary>
            
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.CrossSectionMeshGeometryModel3D">
            <summary>
            Defines the <see cref="T:HelixToolkit.Wpf.SharpDX.CrossSectionMeshGeometryModel3D" />
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CrossSectionMeshGeometryModel3D.PlaneToVector(SharpDX.Plane)">
            <summary>
            The PlaneToVector
            </summary>
            <param name="p">The <see cref="T:SharpDX.Plane"/></param>
            <returns>The <see cref="T:SharpDX.Vector4"/></returns>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CrossSectionMeshGeometryModel3D.CrossSectionColorProperty">
            <summary>
            Defines the CrossSectionColorProperty
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.CrossSectionMeshGeometryModel3D.CrossSectionColor">
            <summary>
            Gets or sets the CrossSectionColor
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CrossSectionMeshGeometryModel3D.EnablePlane1Property">
            <summary>
            Enable CrossSection Plane
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.CrossSectionMeshGeometryModel3D.EnablePlane1">
            <summary>
            Enable CrossSection Plane
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CrossSectionMeshGeometryModel3D.EnablePlane2Property">
            <summary>
            Enable CrossSection Plane
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.CrossSectionMeshGeometryModel3D.EnablePlane2">
            <summary>
            Enable CrossSection Plane
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CrossSectionMeshGeometryModel3D.EnablePlane3Property">
            <summary>
            Enable CrossSection Plane
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.CrossSectionMeshGeometryModel3D.EnablePlane3">
            <summary>
            Enable CrossSection Plane
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CrossSectionMeshGeometryModel3D.EnablePlane4Property">
            <summary>
            Enable CrossSection Plane
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.CrossSectionMeshGeometryModel3D.EnablePlane4">
            <summary>
            Enable CrossSection Plane
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CrossSectionMeshGeometryModel3D.Plane1Property">
            <summary>
            Defines the Plane1Property
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.CrossSectionMeshGeometryModel3D.Plane1">
            <summary>
            Gets or sets the Plane1
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CrossSectionMeshGeometryModel3D.Plane2Property">
            <summary>
            Defines the Plane2Property
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.CrossSectionMeshGeometryModel3D.Plane2">
            <summary>
            Gets or sets the Plane2
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CrossSectionMeshGeometryModel3D.Plane3Property">
            <summary>
            Defines the Plane3Property
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.CrossSectionMeshGeometryModel3D.Plane3">
            <summary>
            Gets or sets the Plane3
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CrossSectionMeshGeometryModel3D.Plane4Property">
            <summary>
            Defines the Plane4Property
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.CrossSectionMeshGeometryModel3D.Plane4">
            <summary>
            Gets or sets the Plane4
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CrossSectionMeshGeometryModel3D.planeParamsVar">
            <summary>
            Defines the planeParamsVar
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CrossSectionMeshGeometryModel3D.planeEnabledVar">
            <summary>
            Defines the planeEnabledVar
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CrossSectionMeshGeometryModel3D.crossSectionColorVar">
            <summary>
            Defines the crossSectionColorVar
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CrossSectionMeshGeometryModel3D.sectionFillTextureVar">
            <summary>
            Defines the sectionFillTextureVar
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CrossSectionMeshGeometryModel3D.fillStencilRasterState">
            <summary>
            Defines the fillStencilRasterState
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CrossSectionMeshGeometryModel3D.fillCrossSectionState">
            <summary>
            Defines the fillCrossSectionState
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CrossSectionMeshGeometryModel3D.fillStencilState">
            <summary>
            Defines the fillStencilState
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CrossSectionMeshGeometryModel3D.sectionColor">
            <summary>
            Defines the sectionColor
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CrossSectionMeshGeometryModel3D.planeEnabled">
            <summary>
            Defines the planeEnabled
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CrossSectionMeshGeometryModel3D.planeParams">
            <summary>
            Defines the planeParams
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CrossSectionMeshGeometryModel3D.SetRenderTechnique(HelixToolkit.Wpf.SharpDX.IRenderHost)">
            <summary>
            The SetRenderTechnique
            </summary>
            <param name="host">The <see cref="T:HelixToolkit.Wpf.SharpDX.IRenderHost"/></param>
            <returns>The <see cref="T:HelixToolkit.Wpf.SharpDX.RenderTechnique"/></returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CrossSectionMeshGeometryModel3D.OnAttached">
            <summary>
            The OnAttached
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CrossSectionMeshGeometryModel3D.CreateStates">
            <summary>
            The CreateStates
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CrossSectionMeshGeometryModel3D.OnRender(HelixToolkit.Wpf.SharpDX.RenderContext)">
            <summary>
            The OnRender
            </summary>
            <param name="renderContext">The <see cref="T:HelixToolkit.Wpf.SharpDX.RenderContext"/></param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CrossSectionMeshGeometryModel3D.OnDrawCall(HelixToolkit.Wpf.SharpDX.RenderContext)">
            <summary>
            The OnDrawCall
            </summary>
            <param name="renderContext">The <see cref="T:HelixToolkit.Wpf.SharpDX.RenderContext"/></param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CrossSectionMeshGeometryModel3D.OnDetach">
            <summary>
            The OnDetach
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.InstanceGeometryModel3D.Instances">
            <summary>
            List of instance matrix. 
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.InstanceGeometryModel3D.InstancesProperty">
            <summary>
            List of instance matrix.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.InstanceGeometryModel3D.InstancesChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.InstanceGeometryModel3D.HitTest(HelixToolkit.Wpf.SharpDX.IRenderMatrices,SharpDX.Ray,System.Collections.Generic.List{HelixToolkit.Wpf.SharpDX.HitTestResult}@)">
            <summary>
            
            </summary>        
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.ScreenSpaceMeshGeometry3D">
            <summary>
            Base class for screen space rendering, such as Coordinate System or ViewBox
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.ScreenSpaceMeshGeometry3D.RelativeScreenLocationXProperty">
            <summary>
            <see cref="P:HelixToolkit.Wpf.SharpDX.ScreenSpaceMeshGeometry3D.RelativeScreenLocationX"/>
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.ScreenSpaceMeshGeometry3D.RelativeScreenLocationYProperty">
            <summary>
            <see cref="P:HelixToolkit.Wpf.SharpDX.ScreenSpaceMeshGeometry3D.RelativeScreenLocationY"/>
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.ScreenSpaceMeshGeometry3D.SizeScaleProperty">
            <summary>
            <see cref="P:HelixToolkit.Wpf.SharpDX.ScreenSpaceMeshGeometry3D.SizeScale"/>
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.ScreenSpaceMeshGeometry3D.RelativeScreenLocationX">
            <summary>
            Relative Location X on screen. Range from -1~1
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.ScreenSpaceMeshGeometry3D.RelativeScreenLocationY">
            <summary>
            Relative Location Y on screen. Range from -1~1
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.ScreenSpaceMeshGeometry3D.SizeScale">
            <summary>
            Size scaling
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.BillboardTextModel3D.FixedSizeProperty">
            <summary>
            Fixed sized billboard. Default = true. 
            <para>When FixedSize = true, the billboard render size will be scale to normalized device coordinates(screen) size</para>
            <para>When FixedSize = false, the billboard render size will be actual size in 3D world space</para>
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.BillboardTextModel3D.FixedSize">
            <summary>
            Fixed sized billboard. Default = true. 
            <para>When FixedSize = true, the billboard render size will be scale to normalized device coordinates(screen) size</para>
            <para>When FixedSize = false, the billboard render size will be actual size in 3D world space</para>
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.BillboardTextModel3D.VertexBuffer">
            <summary>
            For subclass override
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.BillboardTextModel3D.IndexBuffer">
            <summary>
            For subclass override
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.BillboardTextModel3D.OnHitTest(HelixToolkit.Wpf.SharpDX.IRenderMatrices,SharpDX.Ray,System.Collections.Generic.List{HelixToolkit.Wpf.SharpDX.HitTestResult}@)">
            <summary>
            Initial implementation of hittest for billboard. Needs further improvement.
            </summary>
            <param name="rayWS"></param>
            <param name="hits"></param>
            <returns></returns>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CoordinateSystemModel3D.AxisXColorProperty">
            <summary>
            <see cref="P:HelixToolkit.Wpf.SharpDX.CoordinateSystemModel3D.AxisXColor"/>
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CoordinateSystemModel3D.AxisYColorProperty">
            <summary>
            <see cref="P:HelixToolkit.Wpf.SharpDX.CoordinateSystemModel3D.AxisYColor"/>
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.CoordinateSystemModel3D.AxisZColorProperty">
            <summary>
            <see cref="P:HelixToolkit.Wpf.SharpDX.CoordinateSystemModel3D.AxisZColor"/>
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.CoordinateSystemModel3D.AxisXColor">
            <summary>
            Axis X Color
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.CoordinateSystemModel3D.AxisYColor">
            <summary>
            Axis Y Color
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.CoordinateSystemModel3D.AxisZColor">
            <summary>
            Axis Z Color
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.InstancingBillboardModel3D.InstanceAdvArrayProperty">
            <summary>
            List of instance parameter. 
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.InstancingBillboardModel3D.FixedSizeProperty">
            <summary>
            Fixed sized billboard. Default = true. 
            <para>When FixedSize = true, the billboard render size will be scale to normalized device coordinates(screen) size</para>
            <para>When FixedSize = false, the billboard render size will be actual size in 3D world space</para>
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.InstancingBillboardModel3D.InstanceParamArray">
            <summary>
            List of instance parameters. 
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.InstancingBillboardModel3D.FixedSize">
            <summary>
            Fixed sized billboard. Default = true. 
            <para>When FixedSize = true, the billboard render size will be scale to normalized device coordinates(screen) size</para>
            <para>When FixedSize = false, the billboard render size will be actual size in 3D world space</para>
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.InstancingBillboardModel3D.IndexBuffer">
            <summary>
            For subclass override
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.InstancingBillboardModel3D.VertexBuffer">
            <summary>
            For subclass override
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.InstancingBillboardModel3D.CanHitTest(HelixToolkit.Wpf.SharpDX.IRenderMatrices)">
            <summary>
            
            </summary>
            <param name="rayWS"></param>
            <param name="hits"></param>
            <returns></returns>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.InstancingMeshGeometryModel3D.InstanceIdentifiersProperty">
            <summary>
            If bind to identifiers, hit test returns identifier as Tag in HitTestResult.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.InstancingMeshGeometryModel3D.OctreeManagerProperty">
            <summary>
            Add octree manager to use octree hit test.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.InstancingMeshGeometryModel3D.InstanceAdvArrayProperty">
            <summary>
            List of instance parameter. 
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.InstancingMeshGeometryModel3D.InstanceIdentifiers">
            <summary>
            If bind to identifiers, hit test returns identifier as Tag in HitTestResult.
            </summary>        
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.InstancingMeshGeometryModel3D.InstanceParamArray">
            <summary>
            List of instance parameters. 
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.TessellationTechniques.shading">
            <summary>
            
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.TessellationTechniques.Shading">
            <summary>
            Passes available for this Model3D
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.PatchGeometryModel3D.ShadingProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.PatchGeometryModel3D.TessellationFactorProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.PatchGeometryModel3D.Shading">
            <summary>
            
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.PatchGeometryModel3D.TessellationFactor">
            <summary>
            
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.PatchGeometryModel3D.ShadingChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="e"></param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.PatchGeometryModel3D.TessellationFactorChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.PatchGeometryModel3D.IndexBuffer">
            <summary>
            For subclass override
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.PatchGeometryModel3D.VertexBuffer">
            <summary>
            For subclass override
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.PatchGeometryModel3D.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.PatchGeometryModel3D.OnAttach(HelixToolkit.Wpf.SharpDX.IRenderHost)">
            <summary>
            
            </summary>
            <param name="host"></param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.PatchGeometryModel3D.OnDetach">
            <summary>
            
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.PatchGeometryModel3D.OnRender(HelixToolkit.Wpf.SharpDX.RenderContext)">
            <summary>
            
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.PatchGeometryModel3D.OnHitTest(HelixToolkit.Wpf.SharpDX.IRenderMatrices,SharpDX.Ray,System.Collections.Generic.List{HelixToolkit.Wpf.SharpDX.HitTestResult}@)">
            <summary>
            
            </summary>
            <param name="rayWS"></param>
            <param name="hits"></param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.PatchGeometryModel3D.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.PatchGeometryModel3D.CreateDefaultVertexArray">
            <summary>
            Creates a <see cref="T:DefaultVertex[]"/>.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.PointGeometryModel3D.VertexBuffer">
            <summary>
            For subclass override
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.PointGeometryModel3D.OnHitTest(HelixToolkit.Wpf.SharpDX.IRenderMatrices,SharpDX.Ray,System.Collections.Generic.List{HelixToolkit.Wpf.SharpDX.HitTestResult}@)">
            <summary>
            Checks if the ray hits the geometry of the model.
            If there a more than one hit, result returns the hit which is nearest to the ray origin.
            </summary>
            <param name="rayWS">Hitring ray from the camera.</param>
            <param name="hits">results of the hit.</param>
            <returns>True if the ray hits one or more times.</returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.PointGeometryModel3D.OnAttach(HelixToolkit.Wpf.SharpDX.IRenderHost)">
            <summary>
            
            </summary>
            <param name="host"></param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.PointGeometryModel3D.OnDetach">
            <summary>
            
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.PointGeometryModel3D.OnRender(HelixToolkit.Wpf.SharpDX.RenderContext)">
            <summary>
            
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.PointGeometryModel3D.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.PointGeometryModel3D.CreateVertexArray">
            <summary>
            Creates a <see cref="T:PointsVertex[]"/>.
            </summary>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.ViewBoxModel3D">
            <summary>
            <para>Viewbox replacement for Viewport using swapchain rendering.</para>
            <para>To replace box texture (such as text, colors), bind to custom material with different diffuseMap. </para>
            <para>Create a image with 1 row and 6 evenly distributed columns. Each column occupies one box face. The face order is Front, Back, Down, Up, Left, Right</para>
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.BillboardSingleImage3D.Type">
            <summary>
            Billboard type, <see cref="T:HelixToolkit.Wpf.SharpDX.BillboardType"/>
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.BillboardSingleImage3D.Center">
            <summary>
            Billboard center location
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.BillboardSingleImage3D.MaskColor">
            <summary>
            If color in image is equal to the mask color, the color will set to transparent in image.
            Default color is Transparent, which did not mask any color.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.BillboardSingleText3D.Type">
            <summary>
            Billboard type, <see cref="T:HelixToolkit.Wpf.SharpDX.BillboardType"/>
            </summary>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.Model.Lights3D.Light3DSceneShared">
            <summary>
            Used to hold shared variables for Lights per scene
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Model.Lights3D.Light3DSceneShared.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Model.Lights3D.Light3DSceneShared.Reset">
            <summary>
            Reset
            </summary>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Properties.Resources._default">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Properties.Resources._deferred">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:HelixToolkit.Wpf.SharpDX.Properties.Resources.BillboardText" -->
        <!-- Badly formed XML comment ignored for member "P:HelixToolkit.Wpf.SharpDX.Properties.Resources.Common" -->
        <!-- Badly formed XML comment ignored for member "P:HelixToolkit.Wpf.SharpDX.Properties.Resources.Default" -->
        <member name="P:HelixToolkit.Wpf.SharpDX.Properties.Resources.DefaultViewboxTexture">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:HelixToolkit.Wpf.SharpDX.Properties.Resources.Deferred" -->
        <!-- Badly formed XML comment ignored for member "P:HelixToolkit.Wpf.SharpDX.Properties.Resources.DeferredLighting" -->
        <!-- Badly formed XML comment ignored for member "P:HelixToolkit.Wpf.SharpDX.Properties.Resources.Lines" -->
        <!-- Badly formed XML comment ignored for member "P:HelixToolkit.Wpf.SharpDX.Properties.Resources.Material" -->
        <member name="P:HelixToolkit.Wpf.SharpDX.Properties.Resources.random_dot3">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Properties.Resources.random4x4_dot3">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:HelixToolkit.Wpf.SharpDX.Properties.Resources.Tessellation" -->
        <member name="T:HelixToolkit.Wpf.SharpDX.Utilities.RelayExceptionEventArgs">
            <summary>
            Extended <see cref="T:System.EventArgs"/> to relay an <see cref="P:HelixToolkit.Wpf.SharpDX.Utilities.RelayExceptionEventArgs.Exception"/>.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Utilities.RelayExceptionEventArgs.Exception">
            <summary>
            The <see cref="P:HelixToolkit.Wpf.SharpDX.Utilities.RelayExceptionEventArgs.Exception"/> to be relayed.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Utilities.RelayExceptionEventArgs.Handled">
            <summary>
             Gets or sets a value indicating whether the <see cref="P:HelixToolkit.Wpf.SharpDX.Utilities.RelayExceptionEventArgs.Exception"/> is handled.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Utilities.RelayExceptionEventArgs.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Wpf.SharpDX.Utilities.RelayExceptionEventArgs"/> class.
            </summary>
            <param name="exception">The <see cref="P:HelixToolkit.Wpf.SharpDX.Utilities.RelayExceptionEventArgs.Exception"/> to be relayed.</param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Utilities.TokenizerHelper.#ctor(System.String,System.IFormatProvider)">
            <summary> 
            Constructor for TokenizerHelper which accepts an IFormatProvider.
            If the IFormatProvider is null, we use the thread's IFormatProvider info. 
            We will use ',' as the list separator, unless it's the same as the
            decimal separator.  If it *is*, then we can't determine if, say, "23,5" is one
            number or two.  In this case, we will use ";" as the separator.
            </summary> 
            <param name="str"> The string which will be tokenized. </param>
            <param name="formatProvider"> The IFormatProvider which controls this tokenization. </param> 
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Utilities.TokenizerHelper.#ctor(System.String,System.Char,System.Char)">
            <summary>
            Initialize the TokenizerHelper with the string to tokenize,
            the char which represents quotes and the list separator.
            </summary> 
            <param name="str"> The string to tokenize. </param>
            <param name="quoteChar"> The quote char. </param> 
            <param name="separator"> The list separator. </param> 
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Utilities.TokenizerHelper.Initialize(System.String,System.Char,System.Char)">
            <summary>
            Initialize the TokenizerHelper with the string to tokenize,
            the char which represents quotes and the list separator.
            </summary> 
            <param name="str"> The string to tokenize. </param>
            <param name="quoteChar"> The quote char. </param> 
            <param name="separator"> The list separator. </param> 
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Utilities.TokenizerHelper.LastTokenRequired">
            <summary> 
            Throws an exception if there is any non-whitespace left un-parsed.
            </summary> 
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Utilities.TokenizerHelper.NextToken">
            <summary> 
            Advances to the NextToken
            </summary>
            <returns>true if next token was found, false if at end of string</returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Utilities.TokenizerHelper.NextTokenRequired">
            <summary> 
            Advances to the NextToken, throwing an exception if not present
            </summary>
            <returns>The next token found</returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Utilities.TokenizerHelper.NextTokenRequired(System.Boolean)">
            <summary>
            Advances to the NextToken, throwing an exception if not present 
            </summary> 
            <returns>The next token found</returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Utilities.TokenizerHelper.NextToken(System.Boolean)">
            <summary>
            Advances to the NextToken
            </summary>
            <returns>true if next token was found, false if at end of string</returns> 
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Utilities.TokenizerHelper.NextToken(System.Boolean,System.Char)">
            <summary>
            Advances to the NextToken.  A separator character can be specified
            which overrides the one previously set. 
            </summary>
            <returns>true if next token was found, false if at end of string</returns> 
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.IOctree.ActiveNodes">
            <summary>
            This is a bitmask indicating which child nodes are actively being used.
            It adds slightly more complexity, but is faster for performance since there is only one comparison instead of 8.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.IOctree.AutoDeleteIfEmpty">
            <summary>
            Delete self if is empty;
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.IOctree.IsEmpty">
            <summary>
            Returns true if this node tree and all children have no content
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.IOctree.HitTest(HelixToolkit.Wpf.SharpDX.IRenderMatrices,HelixToolkit.Wpf.SharpDX.GeometryModel3D,SharpDX.Matrix,SharpDX.Ray,System.Collections.Generic.List{HelixToolkit.Wpf.SharpDX.HitTestResult}@)">
            <summary>
            Normal hit test from top to bottom
            </summary>
            <param name="model"></param>
            <param name="modelMatrix"></param>
            <param name="rayWS"></param>
            <param name="hits"></param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.IOctree.HitTestCurrentNodeExcludeChild(HelixToolkit.Wpf.SharpDX.IRenderMatrices,HelixToolkit.Wpf.SharpDX.GeometryModel3D,SharpDX.Matrix,SharpDX.Ray@,SharpDX.Ray@,System.Collections.Generic.List{HelixToolkit.Wpf.SharpDX.HitTestResult}@,System.Boolean@)">
            <summary>
            Hit test for only this node, not its child node
            </summary>
            <param name="model"></param>
            <param name="modelMatrix"></param>
            <param name="rayWS"></param>
            <param name="hits"></param>
            <param name="isIntersect"></param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.IOctree.FindNearestPointBySphereExcludeChild(HelixToolkit.Wpf.SharpDX.IRenderMatrices,SharpDX.BoundingSphere@,System.Collections.Generic.List{HelixToolkit.Wpf.SharpDX.HitTestResult}@,System.Boolean@)">
            <summary>
            Search nearest point by a search sphere at this node only
            </summary>
            <param name="sphere"></param>
            <param name="result"></param>
            <param name="isIntersect"></param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.IOctree.FindNearestPointBySphere(HelixToolkit.Wpf.SharpDX.IRenderMatrices,SharpDX.BoundingSphere@,System.Collections.Generic.List{HelixToolkit.Wpf.SharpDX.HitTestResult}@)">
            <summary>
            Search nearest point by a search sphere for whole octree
            </summary>
            <param name="sphere"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.IOctree.FindNearestPointFromPoint(HelixToolkit.Wpf.SharpDX.IRenderMatrices,SharpDX.Vector3@,System.Collections.Generic.List{HelixToolkit.Wpf.SharpDX.HitTestResult}@,System.Single)">
            <summary>
            Search nearest point from point on mesh
            </summary>
            <param name="point"></param>
            <param name="result"></param>
            <param name="heuristic">Use huristic search, return proximated nearest point. Set to 1.0f to disable heuristic. Value must be 0.1f ~ 1.0f</param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.IOctree.FindNearestPointByPointAndSearchRadius(HelixToolkit.Wpf.SharpDX.IRenderMatrices,SharpDX.Vector3@,System.Single,System.Collections.Generic.List{HelixToolkit.Wpf.SharpDX.HitTestResult}@)">
            <summary>
            Search nearest point by a point and search radius
            </summary>
            <param name="point"></param>
            <param name="radius"></param>
            <param name="points"></param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.IOctree.BuildTree">
            <summary>
            Build the whole tree from top to bottom iteratively.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.IOctree.BuildCurretNodeOnly">
            <summary>
            Build current node level only, this will only build current node and create children, but not build its children. 
            To build from top to bottom, call BuildTree
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.IOctree.RemoveSelf">
            <summary>
            Remove self from parent node
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.IOctree.RemoveChild(HelixToolkit.Wpf.SharpDX.IOctree)">
            <summary>
            Remove child from ChildNodes
            </summary>
            <param name="child"></param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.IOctreeBase`1.Add(`0)">
            <summary>
            <para>Add item into octree. Return true if successful, otherwise return false to indicate the tree needs to be recreated.</para>
            <para>Note: When return false, it usually indicates the bound of new object is outside the max bound of current octree. </para>
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.IOctreeBase`1.Add(`0,HelixToolkit.Wpf.SharpDX.IOctree@)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="octant">The octant object belongs</param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.IOctreeBase`1.Expand(SharpDX.Vector3@)">
            <summary>
            Expand the octree to direction
            </summary>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.IOctreeBase`1.Shrink">
            <summary>
            Shrink root if there is no objects
            </summary>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.IOctreeBase`1.RemoveByBound(`0)">
            <summary>
            Remove item(fast). Search using its bounding box. <see cref="M:HelixToolkit.Wpf.SharpDX.IOctreeBase`1.FindChildByItemBound(`0,System.Int32@)"/>
            </summary>
            <param name="item"></param>
            <returns>Return false if item not found</returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.IOctreeBase`1.RemoveByBound(`0,SharpDX.BoundingBox@)">
            <summary>
            Remove item(fast). Search using manual bounding box, this is useful if the item's bound has been changed, use its old bound. <see cref="M:HelixToolkit.Wpf.SharpDX.IOctreeBase`1.FindChildByItemBound(`0,SharpDX.BoundingBox@,System.Int32@)"/>
            </summary>
            <param name="item"></param>
            <param name="bound"></param>
            <returns>Return false if item not found</returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.IOctreeBase`1.RemoveSafe(`0)">
            <summary>
            Remove item using exhaust search(Slow). <see cref="M:HelixToolkit.Wpf.SharpDX.IOctreeBase`1.FindChildByItem(`0,System.Int32@)"/>
            </summary>
            <param name="item"></param>
            <returns>Return false if item not found</returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.IOctreeBase`1.RemoveAt(System.Int32)">
            <summary>
            Remove item from current node by its index in Objects
            </summary>
            <param name="index"></param>
            <returns>Return false if index out of bound</returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.IOctreeBase`1.FindChildByItemBound(`0,System.Int32@)">
            <summary>
            Fast search node by item bound
            </summary>
            <param name="item"></param>
            <param name="index">The item index in Objects, if not found, output -1</param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.IOctreeBase`1.FindChildByItemBound(`0,SharpDX.BoundingBox@,System.Int32@)">
            <summary>
            Fast search node by item bound
            </summary>
            <param name="item">The item.</param>
            <param name="bound">The bounding-box.</param>
            <param name="index">The item index in Objects, if not found, output -1</param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.IOctreeBase`1.FindChildByItem(`0,System.Int32@)">
            <summary>
            Exhaust search, slow.
            </summary>
            <param name="item"></param>
            <param name="index">The item index in Objects, if not found, output -1</param>
            <returns></returns>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.OctreeBase`1.MIN_SIZE">
            <summary>
            The minumum size for enclosing region is a 1x1x1 cube.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.OctreeBase`1.childNodes">
            <summary>
            These are all of the possible child octants for this node in the tree.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.OctreeBase`1.#ctor(SharpDX.BoundingBox@,System.Collections.Generic.List{`0},HelixToolkit.Wpf.SharpDX.IOctree,HelixToolkit.Wpf.SharpDX.OctreeBuildParameter,System.Collections.Generic.Queue{HelixToolkit.Wpf.SharpDX.IOctree})">
            <summary>
            Creates an oct tree which encloses the given region and contains the provided objects.
            </summary>
            <param name="bound">The bounding region for the oct tree.</param>
            <param name="objList">The list of objects contained within the bounding region</param>
            <param name="parent"></param>
            <param name="parameter"></param>
            <param name="queueCache"></param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.OctreeBase`1.#ctor(HelixToolkit.Wpf.SharpDX.IOctree,HelixToolkit.Wpf.SharpDX.OctreeBuildParameter,System.Collections.Generic.Queue{HelixToolkit.Wpf.SharpDX.IOctree})">
            <summary>
            
            </summary>
            <param name="parent"></param>
            <param name="parameter"></param>
            <param name="queueCache"></param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.OctreeBase`1.#ctor(SharpDX.BoundingBox@,HelixToolkit.Wpf.SharpDX.IOctree,HelixToolkit.Wpf.SharpDX.OctreeBuildParameter,System.Collections.Generic.Queue{HelixToolkit.Wpf.SharpDX.IOctree})">
            <summary>
            Creates an octTree with a suggestion for the bounding region containing the items.
            </summary>
            <param name="bound">The suggested dimensions for the bounding region. 
            Note: if items are outside this region, the region will be automatically resized.</param>
            <param name="parent"></param>
            <param name="parameter"></param>
            <param name="queueCache"></param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.OctreeBase`1.BuildSubTree">
            <summary>
            Build sub tree nodes
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.OctreeBase`1.FindEnclosingBox">
            <summary>
            This finds the dimensions of the bounding box necessary to tightly enclose all items in the object list.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.OctreeBase`1.FindEnclosingCube(SharpDX.BoundingBox@)">
            <summary>
            This finds the smallest enclosing cube which is a power of 2, for all objects in the list.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.OctreeBase`1.PushExistingToChild(HelixToolkit.Wpf.SharpDX.IOctreeBase{`0},System.Int32,System.Func{SharpDX.BoundingBox,`0,System.Boolean},HelixToolkit.Wpf.SharpDX.OctreeBase{`0}.CreateNodeDelegate,HelixToolkit.Wpf.SharpDX.IOctree@)">
            <summary>
            Push existing item into child
            </summary>
            <param name="node"></param>
            <param name="index"></param>
            <param name="getBound"></param>
            <param name="createNodeFunc"></param>
            <param name="octant"></param>
            <returns>True: Pushed into child. Otherwise false.</returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.OctreeBase`1.Expand(SharpDX.Vector3@)">
            <summary>
            Return new root
            </summary>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.OctreeBase`1.Expand(HelixToolkit.Wpf.SharpDX.IOctree,SharpDX.Vector3@,HelixToolkit.Wpf.SharpDX.OctreeBase{`0}.CreateNodeDelegate)">
            <summary>
            Return new root
            </summary>
            <param name="oldRoot"></param>
            <param name="direction"></param>
            <param name="createNodeFunc"></param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.OctreeBase`1.Shrink">
            <summary>
            Return new root
            </summary>
            <returns></returns>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.MeshGeometryOctree">
            <summary>
            MeshGeometryOctree slices mesh geometry by triangles into octree. Objects are tuple of each triangle index and its bounding box.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.PointGeometryOctree.HitTestCurrentNodeExcludeChild(HelixToolkit.Wpf.SharpDX.IRenderMatrices,HelixToolkit.Wpf.SharpDX.GeometryModel3D,SharpDX.Matrix,SharpDX.Ray@,SharpDX.Ray@,System.Collections.Generic.List{HelixToolkit.Wpf.SharpDX.HitTestResult}@,System.Boolean@)">
            <summary>
            Return nearest point it gets hit. And the distance from ray origin to the point it gets hit
            </summary>
            <param name="model"></param>
            <param name="modelMatrix"></param>
            <param name="rayWS"></param>
            <param name="hits"></param>
            <param name="isIntersect"></param>
            <returns></returns>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.GeometryModel3DOctree.OctantDictionary">
            <summary>
            Only root contains dictionary
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.OctreeBuildParameter.MinimumOctantSize">
            <summary>
            Minimum Octant size.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.OctreeBuildParameter.MinObjectSizeToSplit">
            <summary>
            Minimum object in each octant to start splitting into smaller octant during build
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.OctreeBuildParameter.AutoDeleteIfEmpty">
            <summary>
            Delete empty octant automatically
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.OctreeBuildParameter.Cubify">
            <summary>
            Generate cube octants instead of rectangle octants
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.OctreeBuildParameter.RecordHitPathBoundingBoxes">
            <summary>
            Record hit path bounding boxes for debugging or display purpose only
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.OctreeManagerBase.MinSize">
            <summary>
            Minimum octant size
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.OctreeManagerBase.AutoDeleteIfEmpty">
            <summary>
            Delete octant node if its empty
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.OctreeManagerBase.Cubify">
            <summary>
            Create cube octree
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.OctreeManagerBase.RecordHitPathBoundingBoxes">
            <summary>
            Record the hit path bounding box for debugging
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.OctreeManagerBase.MinObjectSizeToSplit">
            <summary>
            Minimum object in each octant to start splitting into smaller octant during build
            </summary>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.GeometryModel3DOctreeManager">
            <summary>
            Use to create geometryModel3D octree for groups. Each ItemsModel3D must has its own manager, do not share between two ItemsModel3D
            </summary>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.OffReader">
            <summary>
            A Geomview Object File Format (OFF) reader.
            </summary>
            <remarks>
            The reader does not parse colors, normals and texture coordinates.
            Only 3 dimensional vertices are supported.
            Homogeneous coordinates are not supported.
            See the following links for information about the file format:
            http://www.geomview.org/
            http://people.sc.fsu.edu/~jburkardt/data/off/off.html
            http://people.sc.fsu.edu/~jburkardt/html/off_format.html
            http://segeval.cs.princeton.edu/public/off_format.html
            http://paulbourke.net/dataformats/off/
            </remarks>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.OffReader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Wpf.SharpDX.OffReader" /> class.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.OffReader.Faces">
            <summary>
            Gets the faces.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.OffReader.Vertices">
            <summary>
            Gets the vertices.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.OffReader.Read(System.String,HelixToolkit.Wpf.SharpDX.ModelInfo)">
            <summary>
            Reads the model from the specified stream.
            </summary>
            <param name="path">The path.</param>
            <param name="info">The model info.</param>
            <returns>The model.</returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.OffReader.Read(System.IO.Stream,HelixToolkit.Wpf.SharpDX.ModelInfo)">
            <summary>
            Reads the model from the specified stream.
            </summary>
            <param name="s">The stream.</param>
            <param name="info">The model info.</param>
            <returns>The model.</returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.OffReader.CreateMeshGeometry3D(HelixToolkit.Wpf.SharpDX.ModelInfo)">
            <summary>
            Creates a MeshGeometry3D object from the loaded file. Polygons are triangulated using triangle fans.
            </summary>
            <param name="info">
            The model info.
            </param>
            <returns>
            A MeshGeometry3D.
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.OffReader.BuildModel(HelixToolkit.Wpf.SharpDX.ModelInfo)">
            <summary>
            Creates a Model3D object from the loaded file.
            </summary>
            <param name="info">
            The model info.
            </param>
            <returns>A Model3D group.</returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.OffReader.Load(System.IO.Stream)">
            <summary>
            Loads the model from the specified stream.
            </summary>
            <param name="s">
            The stream.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.OffReader.GetIntValues(System.String)">
            <summary>
            Parses integer values from a string.
            </summary>
            <param name="input">
            The input string.
            </param>
            <returns>
            Array of integer values.
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.OffReader.GetValues(System.String)">
            <summary>
            Parses double values from a string.
            </summary>
            <param name="input">
            The input string.
            </param>
            <returns>
            Array of double values.
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.OffReader.RemoveComments(System.String)">
            <summary>
            Removes comments from the line.
            </summary>
            <param name="input">
            The line.
            </param>
            <returns>
            A line without comments.
            </returns>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.StudioReader">
             <summary>
            Ported from HelixToolkit.Wpf
             </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.StudioReader.obGroup">
            <summary>
            Helper class to create objects
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.StudioReader.Directory">
            <summary>
            Gets or sets the directory
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.StudioReader.TexturePath">
            <summary>
            Gets or sets the texture path.
            </summary>
            <value>The texture path.</value>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.StudioReader.ReadChunkId(System.IO.BinaryReader)">
            <summary>
            Read a chunk id.
            </summary>
            <param name="reader">
            The reader.
            </param>
            <returns>
            The chunk ID.
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.StudioReader.ReadChunkSize(System.IO.BinaryReader)">
            <summary>
            Read a chunk size.
            </summary>
            <param name="reader">
            The reader.
            </param>
            <returns>
            The read chunk size.
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.StudioReader.ReadMaterial(System.IO.BinaryReader,System.Int32)">
            <summary>
            reads the Material of a chunck
            </summary>
            <param name="reader"></param>
            <param name="chunkSize"></param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.StudioReader.ReadObject(System.IO.BinaryReader,System.Int32)">
            <summary>
            Reads an object
            </summary>
            <param name="reader"></param>
            <param name="chunkSize"></param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.StudioReader.ReadTriangularMesh(System.IO.BinaryReader,System.Int32)">
            <summary>
            Reads a triangular mesh.
            </summary>
            <param name="reader">
            The reader.
            </param>
            <param name="chunkSize">
            The chunk size.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.StudioReader.CreateMesh(HelixToolkit.Wpf.SharpDX.Core.Vector3Collection,HelixToolkit.Wpf.SharpDX.Core.Vector2Collection,HelixToolkit.Wpf.SharpDX.Core.IntCollection,HelixToolkit.Wpf.SharpDX.Core.Vector3Collection@,HelixToolkit.Wpf.SharpDX.Core.Vector3Collection@,HelixToolkit.Wpf.SharpDX.Core.Vector3Collection@,HelixToolkit.Wpf.SharpDX.Material)">
            <summary>
            Create a Mesh, with found props
            </summary>
            <param name="positions"></param>
            <param name="textureCoordinates"></param>
            <param name="triangleIndices"></param>
            <param name="normals"></param>
            <param name="tangents"></param>
            <param name="bitangents"></param>
            <param name="material"></param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.StudioReader.ComputeNormals(HelixToolkit.Wpf.SharpDX.Core.Vector3Collection,HelixToolkit.Wpf.SharpDX.Core.IntCollection,HelixToolkit.Wpf.SharpDX.Core.Vector3Collection@)">
            <summary>
            Stolen from MeshBuilder class, maybe make this static method there public...
            </summary>
            <param name="positions"></param>
            <param name="triangleIndices"></param>
            <param name="normals"></param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.StudioReader.ReadFaceSets(System.IO.BinaryReader,System.Int32)">
            <summary>
            Reads face sets.
            </summary>
            <param name="reader">
            The reader.
            </param>
            <param name="chunkSize">
            The chunk size.
            </param>
            <returns>
            A list of face sets.
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.StudioReader.ReadVector(System.IO.BinaryReader)">
            <summary>
            Reads a vector.
            </summary>
            <param name="reader">
            The reader.
            </param>
            <returns>
            A vector.
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.StudioReader.ReadTransformation(System.IO.BinaryReader)">
            <summary>
            Reads a transformation.
            </summary>
            <param name="reader">
            The reader.
            </param>
            <returns>
            A transformation.
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.StudioReader.Transform(System.Windows.Media.Media3D.Matrix3D,SharpDX.Vector3)">
            <summary>
            Apply transform, doesn't work yet because datatypes(Matrix,Vector etc from .Media are use propably some float vs double offsets
            </summary>
            <param name="matrix"></param>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.StudioReader.ReadBitmapSoure(System.String,SharpDX.Color)">
            <summary>
            A bit hacky we use the give texture as normalMap, if not existant we create a BitMapSource in the fallbackColor
            </summary>
            <param name="texture"></param>
            <param name="fallBackColor"></param>
            <returns></returns>
            
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.StudioReader.BitMapSoureFromFallBack(SharpDX.Color)">
            <summary>
            Creates FallBack Bitmapsource http://stackoverflow.com/questions/10637064/create-bitmapimage-and-apply-to-it-a-specific-color
            </summary>
            <param name="fallBackColor"></param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.StudioReader.ReadMatMap(System.IO.BinaryReader,System.Int32)">
            <summary>
            Reads a material map.
            </summary>
            <param name="reader">
            The reader.
            </param>
            <param name="size">
            The size.
            </param>
            <returns>
            The mat map.
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.StudioReader.ReadColor(System.IO.BinaryReader)">
            <summary>
            Read a color.
            </summary>
            <param name="reader">
            The reader.
            </param>
            <returns>
            A color.
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.StudioReader.ReadData(System.IO.BinaryReader,System.Int32)">
            <summary>
            Read data.
            </summary>
            <param name="reader">
            The reader.
            </param>
            <param name="size">
            Excluding header size
            </param>
            <returns>
            The data.
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.StudioReader.ReadString(System.IO.BinaryReader)">
            <summary>
            Reads a string.
            </summary>
            <param name="reader">
            The reader.
            </param>
            <returns>
            The string.
            </returns>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.StudioReader.FaceSet">
            <summary>
            Represents a set of faces that belongs to the same material.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.StudioReader.FaceSet.Faces">
            <summary>
            Gets or sets Faces.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.StudioReader.FaceSet.Name">
            <summary>
            Gets or sets the name of the material.
            </summary>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.Camera">
            <summary>
            Specifies what portion of the 3D scene is rendered by the Viewport3DX element.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Camera.Position">
            <summary>
            Gets or sets the position.
            </summary>
            <value>
            The position.
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Camera.LookDirection">
            <summary>
            Gets or sets the look direction.
            </summary>
            <value>
            The look direction.
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Camera.UpDirection">
            <summary>
            Gets or sets up direction.
            </summary>
            <value>
            Up direction.
            </value>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Camera.CreateViewMatrix">
            <summary>
            Creates the view matrix.
            </summary>
            <returns>A <see cref="T:SharpDX.Matrix" />.</returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Camera.CreateProjectionMatrix(System.Double)">
            <summary>
            Creates the projection matrix.
            </summary>
            <param name="aspectRatio">The aspect ratio.</param>
            <returns>A <see cref="T:SharpDX.Matrix" />.</returns>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.MatrixCamera">
            <summary>
            Camera which specifies the view and projection transforms as Matrix3D objects
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.MatrixCamera.ProjectionMatrixProperty">
            <summary>
            The projection matrix property
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.MatrixCamera.ViewMatrixProperty">
            <summary>
            The view matrix property
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MatrixCamera.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Wpf.SharpDX.MatrixCamera" /> class.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MatrixCamera.#ctor(System.Windows.Media.Media3D.Matrix3D,System.Windows.Media.Media3D.Matrix3D)">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Wpf.SharpDX.MatrixCamera"/> class.
            </summary>
            <param name="viewMatrix">
            The view matrix.
            </param>
            <param name="projectionMatrix">
            The projection matrix.
            </param>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.MatrixCamera.ProjectionMatrix">
            <summary>
            Gets or sets the projection matrix.
            </summary>
            <value>
            The projection matrix.
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.MatrixCamera.ViewMatrix">
            <summary>
            Gets or sets the view matrix.
            </summary>
            <value>
            The view matrix.
            </value>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MatrixCamera.CreateProjectionMatrix(System.Double)">
            <summary>
            Creates the projection matrix.
            </summary>
            <param name="aspectRatio">
            The aspect ratio.
            </param>
            <returns>
            A <see cref="T:SharpDX.Matrix"/>.
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MatrixCamera.CreateViewMatrix">
            <summary>
            Creates the view matrix.
            </summary>
            <returns>
            A <see cref="T:SharpDX.Matrix" />.
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MatrixCamera.CreateInstanceCore">
            <summary>
            When implemented in a derived class, creates a new instance of the <see cref="T:System.Windows.Freezable" /> derived class.
            </summary>
            <returns>
            The new instance.
            </returns>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.OrthographicCamera">
            <summary>
            Represents an orthographic projection camera.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.OrthographicCamera.WidthProperty">
            <summary>
            The width property
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.OrthographicCamera.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>
            The width.
            </value>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.OrthographicCamera.CreateProjectionMatrix(System.Double)">
            <summary>
            Creates the projection matrix.
            </summary>
            <param name="aspectRatio">
            The aspect ratio.
            </param>
            <returns>
            A <see cref="T:SharpDX.Matrix"/>.
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.OrthographicCamera.CreateInstanceCore">
            <summary>
            When implemented in a derived class, creates a new instance of the <see cref="T:System.Windows.Freezable" /> derived class.
            </summary>
            <returns>
            The new instance.
            </returns>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.PerspectiveCamera">
            <summary>
            Represents a perspective projection camera.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.PerspectiveCamera.FieldOfViewProperty">
            <summary>
            The field of view property
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.PerspectiveCamera.FieldOfView">
            <summary>
            Gets or sets the field of view.
            </summary>
            <value>
            The field of view.
            </value>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.PerspectiveCamera.CreateProjectionMatrix(System.Double)">
            <summary>
            Creates the projection matrix.
            </summary>
            <param name="aspectRatio">
            The aspect ratio.
            </param>
            <returns>
            The <see cref="T:SharpDX.Matrix"/>.
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.PerspectiveCamera.CreateFrustum(System.Double)">
            <summary>
            Generates and returns the view frustum of the current camera.
            </summary>
            <returns>Frustum as Vector4</returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.PerspectiveCamera.CreateInstanceCore">
            <summary>
            When implemented in a derived class, creates a new instance of the <see cref="T:System.Windows.Freezable" /> derived class.
            </summary>
            <returns>
            The new instance.
            </returns>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.ProjectionCamera">
            <summary>
            An abstract base class for perspective and orthographic projection cameras.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.ProjectionCamera.CreateLeftHandSystemProperty">
            <summary>
            The create left hand system property
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.ProjectionCamera.FarPlaneDistanceProperty">
            <summary>
            The far plane distance property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.ProjectionCamera.LookDirectionProperty">
            <summary>
            The look direction property
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.ProjectionCamera.NearPlaneDistanceProperty">
            <summary>
            The near plane distance property
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.ProjectionCamera.PositionProperty">
            <summary>
            The position property
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.ProjectionCamera.UpDirectionProperty">
            <summary>
            Up direction property
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.ProjectionCamera.CreateLeftHandSystem">
            <summary>
            Gets or sets a value indicating whether to create a left hand system.
            </summary>
            <value>
            <c>true</c> if creating a left hand system; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.ProjectionCamera.FarPlaneDistance">
            <summary>
            Gets or sets the far plane distance.
            </summary>
            <value>
            The far plane distance.
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.ProjectionCamera.LookDirection">
            <summary>
            Gets or sets the look direction.
            </summary>
            <value>
            The look direction.
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.ProjectionCamera.NearPlaneDistance">
            <summary>
            Gets or sets the near plane distance.
            </summary>
            <value>
            The near plane distance.
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.ProjectionCamera.Position">
            <summary>
            Gets or sets the position.
            </summary>
            <value>
            The position.
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.ProjectionCamera.Target">
            <summary>
            Gets the target position.
            </summary>
            <value>
            The target.
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.ProjectionCamera.UpDirection">
            <summary>
            Gets or sets up direction.
            </summary>
            <value>
            Up direction.
            </value>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ProjectionCamera.CreateViewMatrix">
            <summary>
            Creates the view matrix.
            </summary>
            <returns>
            A Matrix.
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ProjectionCamera.CameraChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles camera changes.
            </summary>
            <param name="obj">
            The sender.
            </param>
            <param name="args">
            The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ProjectionCamera.CameraChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            The camera changed.
            </summary>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.CompositeModel3D">
            <summary>
                Represents a composite Model3D.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CompositeModel3D.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:HelixToolkit.Wpf.SharpDX.CompositeModel3D" /> class.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.CompositeModel3D.Children">
            <summary>
                Gets the children.
            </summary>
            <value>
                The children.
            </value>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CompositeModel3D.OnAttach(HelixToolkit.Wpf.SharpDX.IRenderHost)">
            <summary>
            Attaches the specified host.
            </summary>
            <param name="host">
            The host.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CompositeModel3D.OnDetach">
            <summary>
                Detaches this instance.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CompositeModel3D.OnRender(HelixToolkit.Wpf.SharpDX.RenderContext)">
            <summary>
            Renders the specified context.
            </summary>
            <param name="context">
            The context.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CompositeModel3D.ChildrenChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles changes in the Children collection.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CompositeModel3D.UpdateBounds">
            <summary>
            a Model3D does not have bounds, 
            if you want to have a model with bounds, use GeometryModel3D instead:
            but this prevents the CompositeModel3D containg lights, etc. (Lights3D are Models3D, which do not have bounds)
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.CompositeModel3D.OnHitTest(HelixToolkit.Wpf.SharpDX.IRenderMatrices,SharpDX.Ray,System.Collections.Generic.List{HelixToolkit.Wpf.SharpDX.HitTestResult}@)">
            <summary>
            Compute hit-testing for all children
            </summary>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.DraggableGeometryModel3D">
            <summary>
            Example class how to implement mouse dragging for objects.
            Probably it should be moved to a "Dragging Demo."
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.EnvironmentMap3D.FilenameProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.EnvironmentMap3D.Filename">
            <summary>
            Gets or sets the current environment map texture image
            (expects DDS Environment Map image)
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.EnvironmentMap3D.IsActiveProperty">
            <summary>
            Indicates, if this element is active, if not, the model will be not 
            rendered and not reflected.
            default is true.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.EnvironmentMap3D.IsActive">
            <summary>
            Indicates, if this element is active, if not, the model will be not 
            rendered and not reflected.
            default is true.
            </summary>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.Items3DControl">
            <summary>
            Represents a items control for Elements3D
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Items3DControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Wpf.SharpDX.CompositeModel3D" /> class.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Items3DControl.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles changes in the Children collection.
            </summary>
            <param name="e">
            The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Items3DControl.OnItemsSourceChanged(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            
            </summary>
            <param name="oldValue"></param>
            <param name="newValue"></param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Items3DControl.Attach(HelixToolkit.Wpf.SharpDX.IRenderHost)">
            <summary>
            Attaches the specified host.
            </summary>
            <param name="host">
            The host.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Items3DControl.Detach">
            <summary>
                Detaches this instance.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Items3DControl.OnDetach">
            <summary>
            Override Detach
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Items3DControl.HitTest(HelixToolkit.Wpf.SharpDX.IRenderMatrices,SharpDX.Ray,System.Collections.Generic.List{HelixToolkit.Wpf.SharpDX.HitTestResult}@)">
            <summary>
            Compute hit-testing for all children
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Items3DControl.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Items3DControl.Render(HelixToolkit.Wpf.SharpDX.RenderContext)">
            <summary>
            Renders the specified context.
            </summary>
            <param name="context">
            The context.
            </param>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Items3DControl.IsAttached">
            <summary>
            
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Items3DControl.IsThrowingShadow">
            <summary>
            
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Items3DControl.renderHost">
            <summary>
            
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Items3DControl.children">
            <summary>
            
            </summary>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.ItemsModel3D">
            <summary>
                Represents a model that can be used to present a collection of items. supports generating child items by a
                <see cref="T:System.Windows.DataTemplate" />.
            </summary>
            <remarks>
                Use the ItemsSource property to specify the collection to use to generate the content of your ItemsControl. You can set the ItemsSource
                property to any type that implements IEnumerable. ItemsSource is typically used to display a data collection or to bind an
                ItemsControl to a collection object.
            </remarks>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.ItemsModel3D.ItemTemplateProperty">
            <summary>
                The item template property
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.ItemsModel3D.ItemsSourceProperty">
            <summary>
                The items source property
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.ItemsModel3D.OctreeManagerProperty">
            <summary>
            Add octree manager to use octree hit test.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.ItemsModel3D.ItemTemplate">
            <summary>
                Gets or sets the <see cref="T:System.Windows.DataTemplate" /> used to display each item.
            </summary>
            <value>
                The item template.
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.ItemsModel3D.ItemsSource">
            <summary>
                Gets or sets a collection used to generate the content of the <see cref="T:HelixToolkit.Wpf.SharpDX.ItemsModel3D" />.
            </summary>
            <value>
                The items source.
            </value>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ItemsModel3D.ItemsSourceChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes in the ItemsSource property.
            </summary>
            <param name="e">
            The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.
            </param>
            <exception cref="T:System.InvalidOperationException">
            Cannot create a Model3D from ItemTemplate.
            </exception>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.MeshGeometryModel3D.InvertNormal">
            <summary>
            Invert the surface normal during rendering
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.MeshGeometryModel3D.VertexBuffer">
            <summary>
            For subclass override
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.MeshGeometryModel3D.IndexBuffer">
            <summary>
            For subclass override
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshGeometryModel3D.OnAttach(HelixToolkit.Wpf.SharpDX.IRenderHost)">
            <summary>
            
            </summary>
            <param name="host"></param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshGeometryModel3D.OnDetach">
            <summary>
            
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshGeometryModel3D.OnInstancedDrawCall(HelixToolkit.Wpf.SharpDX.RenderContext)">
            <summary>
            Just before calling DrawIndexedInstanced. All buffers are attached. Override to use for multipass drawing
            </summary>
            <param name="renderContext"></param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshGeometryModel3D.OnDrawCall(HelixToolkit.Wpf.SharpDX.RenderContext)">
            <summary>
            Just before calling DrawIndexed. All buffers are attached. Override to use for multipass drawing
            </summary>
            <param name="renderContext"></param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshGeometryModel3D.CreateDefaultVertexArray">
            <summary>
            Creates a <see cref="T:DefaultVertex[]"/>.
            </summary>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.Element3DCollection">
            <summary>
            Provides a collection of Element3D.
            </summary>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.ObservableElement3DCollection">
            <summary>
            Provides an observable collection of Element3D.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.MaterialGeometryModel3D.RenderDiffuseMapProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.MaterialGeometryModel3D.RenderDiffuseAlphaMapProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.MaterialGeometryModel3D.RenderNormalMapProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.MaterialGeometryModel3D.RenderDisplacementMapProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.MaterialGeometryModel3D.MaterialProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.MaterialGeometryModel3D.TextureCoodScaleProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.MaterialGeometryModel3D.RenderDiffuseMap">
            <summary>
            
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.MaterialGeometryModel3D.RenderNormalMap">
            <summary>
            
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.MaterialGeometryModel3D.RenderDiffuseAlphaMap">
            <summary>
            
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.MaterialGeometryModel3D.RenderDisplacementMap">
            <summary>
            
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.MaterialGeometryModel3D.Material">
            <summary>
            
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.MaterialGeometryModel3D.TextureCoodScale">
            <summary>
            
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MaterialGeometryModel3D.MaterialChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.MaterialGeometryModel3D.VertexBuffer">
            <summary>
            For subclass override
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.MaterialGeometryModel3D.IndexBuffer">
            <summary>
            For subclass override
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MaterialGeometryModel3D.AttachMaterial">
            <summary>
            
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MaterialGeometryModel3D.OnDetach">
            <summary>
            
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.TransformableItems3DControl.OnHitTest(HelixToolkit.Wpf.SharpDX.IRenderMatrices,SharpDX.Ray,System.Collections.Generic.List{HelixToolkit.Wpf.SharpDX.HitTestResult}@)">
            <summary>
            Compute hit-testing for all children
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.TransformableItems3DControl.OnRender(HelixToolkit.Wpf.SharpDX.RenderContext)">
            <summary>
            Renders the specified context.
            </summary>
            <param name="context">
            The context.
            </param>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.UICompositeManipulator3D.CanRotateXProperty">
            <summary>
            The can rotate x property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.UICompositeManipulator3D.CanRotateYProperty">
            <summary>
            The can rotate y property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.UICompositeManipulator3D.CanRotateZProperty">
            <summary>
            The can rotate z property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.UICompositeManipulator3D.CanTranslateXProperty">
            <summary>
            The can translate x property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.UICompositeManipulator3D.CanTranslateYProperty">
            <summary>
            The can translate y property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.UICompositeManipulator3D.CanTranslateZProperty">
            <summary>
            The can translate z property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.UICompositeManipulator3D.DiameterProperty">
            <summary>
            The diameter property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.UICompositeManipulator3D.TargetTransformProperty">
            <summary>
              The target transform property.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.UICompositeManipulator3D.TargetTransform">
            <summary>
              Gets or sets TargetTransform.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.UICompositeManipulator3D.CanRotateX">
            <summary>
            Gets or sets a value indicating whether this instance can rotate X.
            </summary>
            <value> <c>true</c> if this instance can rotate X; otherwise, <c>false</c> . </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.UICompositeManipulator3D.CanRotateY">
            <summary>
            Gets or sets a value indicating whether this instance can rotate Y.
            </summary>
            <value> <c>true</c> if this instance can rotate Y; otherwise, <c>false</c> . </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.UICompositeManipulator3D.CanRotateZ">
            <summary>
            Gets or sets a value indicating whether this instance can rotate Z.
            </summary>
            <value> <c>true</c> if this instance can rotate Z; otherwise, <c>false</c> . </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.UICompositeManipulator3D.CanTranslateX">
            <summary>
            Gets or sets a value indicating whether this instance can translate X.
            </summary>
            <value> <c>true</c> if this instance can translate X; otherwise, <c>false</c> . </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.UICompositeManipulator3D.CanTranslateY">
            <summary>
            Gets or sets a value indicating whether this instance can translate Y.
            </summary>
            <value> <c>true</c> if this instance can translate Y; otherwise, <c>false</c> . </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.UICompositeManipulator3D.CanTranslateZ">
            <summary>
            Gets or sets a value indicating whether this instance can translate Z.
            </summary>
            <value> <c>true</c> if this instance can translate Z; otherwise, <c>false</c> . </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.UICompositeManipulator3D.Diameter">
            <summary>
            Gets or sets the diameter.
            </summary>
            <value> The diameter. </value>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.UICompositeManipulator3D.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.UICompositeManipulator3D.Bind(HelixToolkit.Wpf.SharpDX.GeometryModel3D)">
            <summary>
            Binds this manipulator to a given Model3D.
            </summary>
            <param name="source">
            Source Visual3D which receives the manipulator transforms. 
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.UICompositeManipulator3D.UnBind">
            <summary>
              Releases the binding of this manipulator.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.UICompositeManipulator3D.OnRender(HelixToolkit.Wpf.SharpDX.RenderContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.UICompositeManipulator3D.OnHitTest(HelixToolkit.Wpf.SharpDX.IRenderMatrices,SharpDX.Ray,System.Collections.Generic.List{HelixToolkit.Wpf.SharpDX.HitTestResult}@)">
            <summary>
            
            </summary>
            <param name="ray"></param>
            <param name="hits"></param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.UICompositeManipulator3D.OnChildrenChanged">
            <summary>
            The on children changed.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.UICompositeManipulator3D.ChildrenChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            The children changed.
            </summary>
            <param name="d">
            The d.
            </param>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.UIManipulator3D">
            <summary>
              An abstract base class for manipulators.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.UIManipulator3D.TargetTransformProperty">
            <summary>
              The target transform property. 
              Bind the Tranform of the Target to this Property
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.UIManipulator3D.OffsetProperty">
            <summary>
              The offset property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.UIManipulator3D.ValueProperty">
            <summary>
              The value property.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.UIManipulator3D.ValueChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when value has been changed.
            </summary>
            <param name="d">
            The sender. 
            </param>
            <param name="e">
            The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data. 
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.UIManipulator3D.OffsetChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="e"></param>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.UIManipulator3D.TargetTransform">
            <summary>
              Gets or sets TargetTransform.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.UIManipulator3D.Offset">
            <summary>
              Gets or sets the offset of the visual (this vector is added to the Position point).
            </summary>
            <value> The offset. </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.UIManipulator3D.Value">
            <summary>
              Gets or sets the manipulator value.
            </summary>
            <value> The value. </value>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.UIManipulator3D.Bind(HelixToolkit.Wpf.SharpDX.GeometryModel3D)">
            <summary>
            Binds this manipulator to a given Model3D.
            </summary>
            <param name="source">
            Source Visual3D which receives the manipulator transforms. 
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.UIManipulator3D.UnBind">
            <summary>
              Releases the binding of this manipulator.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.UIManipulator3D.OnValueChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when value is changed.
            </summary>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.UIManipulator3D.OnOffetChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.UIManipulator3D.OnMouse3DDown(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.UIManipulator3D.OnMouse3DUp(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.UIManipulator3D.OnMouse3DMove(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.UIManipulator3D.UpdateManipulator(System.Windows.RoutedEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.UIManipulator3D.ModelChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when Geometry is changed.
            </summary>
            <param name="d">
            The sender. 
            </param>
            <param name="e">
            The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data. 
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.UIManipulator3D.OnModelChanged">
            <summary>
            
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.UIManipulator3D.ToWorldPos(SharpDX.Vector3)">
            <summary>
            
            </summary>
            <param name="vec"></param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.UIManipulator3D.ToWorldVec(SharpDX.Vector3)">
            <summary>
            
            </summary>
            <param name="vec"></param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.UIManipulator3D.ToModelPos(SharpDX.Vector3)">
            <summary>
            
            </summary>
            <param name="vec"></param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.UIManipulator3D.ToModelVec(SharpDX.Vector3)">
            <summary>
            
            </summary>
            <param name="vec"></param>
            <returns></returns>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.UIRotateManipulator3D">
            <summary>
              A translate manipulator.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.UIRotateManipulator3D.AxisProperty">
            <summary>
            The axis property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.UIRotateManipulator3D.OuterDiameterProperty">
            <summary>
            The diameter property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.UIRotateManipulator3D.InnerDiameterProperty">
            <summary>
            The inner diameter property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.UIRotateManipulator3D.LengthProperty">
            <summary>
            The length property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.UIRotateManipulator3D.PivotProperty">
            <summary>
            The pivot point property.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.UIRotateManipulator3D.Axis">
            <summary>
            Gets or sets the rotation axis.
            </summary>
            <value>The axis.</value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.UIRotateManipulator3D.OuterDiameter">
            <summary>
            Gets or sets the diameter of the manipulator arrow.
            </summary>
            <value> The diameter. </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.UIRotateManipulator3D.InnerDiameter">
            <summary>
            Gets or sets the inner diameter.
            </summary>
            <value>The inner diameter.</value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.UIRotateManipulator3D.Length">
            <summary>
            Gets or sets the length of the cylinder.
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.UIRotateManipulator3D.Pivot">
            <summary>
            Gets or sets the pivot point of the manipulator.
            </summary>
            <value> The position. </value>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.UIRotateManipulator3D.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:HelixToolkit.Wpf.SharpDX.UIManipulator3D" /> class.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.UIRotateManipulator3D.OnModelChanged">
            <summary>
            Called when geometry has been changed.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.UIRotateManipulator3D.UpdateManipulator(System.Windows.RoutedEventArgs)">
            <summary>
            
            </summary>        
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.UIRotateManipulator3D.OnMouse3DMove(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            
            </summary>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.UITranslateManipulator3D">
            <summary>
              A translate manipulator.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.UITranslateManipulator3D.DiameterProperty">
            <summary>
            The diameter property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.UITranslateManipulator3D.DirectionProperty">
            <summary>
            The direction property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.UITranslateManipulator3D.LengthProperty">
            <summary>
            The length property.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.UITranslateManipulator3D.Diameter">
            <summary>
            Gets or sets the diameter of the manipulator arrow.
            </summary>
            <value> The diameter. </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.UITranslateManipulator3D.Direction">
            <summary>
            Gets or sets the direction of the translation.
            </summary>
            <value> The direction. </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.UITranslateManipulator3D.Length">
            <summary>
            Gets or sets the length of the manipulator arrow.
            </summary>
            <value> The length. </value>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.UITranslateManipulator3D.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:HelixToolkit.Wpf.SharpDX.UIManipulator3D" /> class.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.UITranslateManipulator3D.OnModelChanged">
            <summary>
            Called when geometry has been changed.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.UITranslateManipulator3D.UpdateManipulator(System.Windows.RoutedEventArgs)">
            <summary>
            
            </summary>        
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.Element3D">
            <summary>
            Base class for renderable elements.
            </summary>    
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Element3D.IsRenderingProperty">
            <summary>
            Indicates, if this element should be rendered,
            default is true
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Element3D.IsRendering">
            <summary>
            Indicates, if this element should be rendered.
            Use this also to make the model visible/unvisible
            default is true
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Element3D.VisibilityProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Element3D.Visibility">
            <summary>
            
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Element3D.IsAttached">
            <summary>
            If this has been attached onto renderhost. 
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Element3D.SetRenderTechnique(HelixToolkit.Wpf.SharpDX.IRenderHost)">
            <summary>
            Override this function to set render technique during Attach Host.
            </summary>
            <param name="host"></param>
            <returns>Return RenderTechnique</returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Element3D.Attach(HelixToolkit.Wpf.SharpDX.IRenderHost)">
            <summary>
            <para>Attaches the element to the specified host. To overide Attach, please override <see cref="M:HelixToolkit.Wpf.SharpDX.Element3D.OnAttach(HelixToolkit.Wpf.SharpDX.IRenderHost)"/> function.</para>
            <para>To set different render technique instead of using technique from host, override <see cref="M:HelixToolkit.Wpf.SharpDX.Element3D.SetRenderTechnique(HelixToolkit.Wpf.SharpDX.IRenderHost)"/></para>
            <para>Attach Flow: <see cref="M:HelixToolkit.Wpf.SharpDX.Element3D.SetRenderTechnique(HelixToolkit.Wpf.SharpDX.IRenderHost)"/> -> Set RenderHost -> Get Effect -> <see cref="M:HelixToolkit.Wpf.SharpDX.Element3D.OnAttach(HelixToolkit.Wpf.SharpDX.IRenderHost)"/> -> <see cref="M:HelixToolkit.Wpf.SharpDX.Element3D.OnAttached"/> -> <see cref="M:HelixToolkit.Wpf.SharpDX.Element3D.InvalidateRender"/></para>
            </summary>
            <param name="host">The host.</param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Element3D.OnAttached">
            <summary>
            Called after <see cref="M:HelixToolkit.Wpf.SharpDX.Element3D.OnAttach(HelixToolkit.Wpf.SharpDX.IRenderHost)"/>
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Element3D.OnAttach(HelixToolkit.Wpf.SharpDX.IRenderHost)">
            <summary>
            To override Attach routine, please override this.
            </summary>
            <param name="host"></param>       
            <returns>Return true if attached</returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Element3D.Detach">
            <summary>
            Detaches the element from the host. Override <see cref="M:HelixToolkit.Wpf.SharpDX.Element3D.OnDetach"/>
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Element3D.OnDetach">
            <summary>
            Used to override Detach
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Element3D.InvalidateRender">
            <summary>
            Tries to invalidate the current render.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Element3D.CanRender(HelixToolkit.Wpf.SharpDX.RenderContext)">
            <summary>
            <para>Determine if this can be rendered.</para>
            <para>Default returns <see cref="P:HelixToolkit.Wpf.SharpDX.Element3D.IsAttached"/> &amp;&amp; <see cref="P:HelixToolkit.Wpf.SharpDX.Element3D.IsRendering"/> &amp;&amp; <see cref="P:HelixToolkit.Wpf.SharpDX.Element3D.Visibility"/> == <see cref="F:System.Windows.Visibility.Visible"/></para>
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Element3D.Render(HelixToolkit.Wpf.SharpDX.RenderContext)">
            <summary>
            <para>Renders the element in the specified context. To override Render, please override <see cref="M:HelixToolkit.Wpf.SharpDX.Element3D.OnRender(HelixToolkit.Wpf.SharpDX.RenderContext)"/></para>
            <para>Uses <see cref="M:HelixToolkit.Wpf.SharpDX.Element3D.CanRender(HelixToolkit.Wpf.SharpDX.RenderContext)"/>  to call OnRender or not. </para>
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Element3D.OnRender(HelixToolkit.Wpf.SharpDX.RenderContext)">
            <summary>
            Used to overriding <see cref="M:HelixToolkit.Wpf.SharpDX.Element3D.Render(HelixToolkit.Wpf.SharpDX.RenderContext)"/> routine.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Element3D.Dispose">
            <summary>
            Disposes the Element3D. Frees all DX resources.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Element3D.FindVisualAncestor``1(System.Windows.DependencyObject)">
            <summary>
            Looks for the first visual ancestor of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of visual ancestor.</typeparam>
            <param name="obj">The respective <see cref="T:System.Windows.DependencyObject"/>.</param>
            <returns>
            The first visual ancestor of type <typeparamref name="T"/> if exists, else <c>null</c>.
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Element3D.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Invoked whenever the effective value of any dependency property on this <see cref="T:HelixToolkit.Wpf.SharpDX.Element3D"/> has been updated.
            </summary>
            <param name="e">The event data that describes the property that changed, as well as old and new values.</param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Element3D.CheckAffectsRender(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Check if dependency property changed event affects render
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.GeometryModel3D">
            <summary>
            Provides a base class for a scene model which contains geometry
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.GeometryModel3D.ReuseVertexArrayBuffer">
            <summary>
            Reuse previous vertext array buffer during CreateBuffer. Reduce excessive memory allocation during rapid geometry model changes. 
            Example: Repeatly updates textures, or geometries with close number of vertices.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.GeometryModel3D.IsMultisampleEnabled">
            <summary>
            Only works under FillMode = Wireframe. MSAA is determined by viewport MSAA settings for FillMode = Solid
            </summary>
        </member>
        <member name="E:HelixToolkit.Wpf.SharpDX.GeometryModel3D.MouseDown3D">
            <summary>
            Provide CLR accessors for the event 
            </summary>
        </member>
        <member name="E:HelixToolkit.Wpf.SharpDX.GeometryModel3D.MouseUp3D">
            <summary>
            Provide CLR accessors for the event 
            </summary>
        </member>
        <member name="E:HelixToolkit.Wpf.SharpDX.GeometryModel3D.MouseMove3D">
            <summary>
            Provide CLR accessors for the event 
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.GeometryModel3D.OnRasterStateChanged">
            <summary>
            Make sure to check if <see cref="P:HelixToolkit.Wpf.SharpDX.Element3D.IsAttached"/> == true
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.GeometryModel3D.CheckGeometry">
            <summary>
            <para>Check geometry validity.</para>
            Return false if (this.geometryInternal == null || this.geometryInternal.Positions == null || this.geometryInternal.Positions.Count == 0 || this.geometryInternal.Indices == null || this.geometryInternal.Indices.Count == 0)
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.GeometryModel3D.OnAttach(HelixToolkit.Wpf.SharpDX.IRenderHost)">
            <summary>
            Overriding OnAttach, use <see cref="M:HelixToolkit.Wpf.SharpDX.GeometryModel3D.CheckGeometry"/> to check if it can be attached.
            </summary>
            <param name="host"></param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.GeometryModel3D.CanRender(HelixToolkit.Wpf.SharpDX.RenderContext)">
            <summary>
            <para>base.CanRender(context) &amp;&amp; <see cref="M:HelixToolkit.Wpf.SharpDX.GeometryModel3D.CheckGeometry"/> </para>
            <para>If RenderContext IsShadowPass=true, return false if <see cref="P:HelixToolkit.Wpf.SharpDX.GeometryModel3D.IsThrowingShadow"/> = false</para>
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.GeometryModel3D.HitTest(HelixToolkit.Wpf.SharpDX.IRenderMatrices,SharpDX.Ray,System.Collections.Generic.List{HelixToolkit.Wpf.SharpDX.HitTestResult}@)">
            <summary>
            Checks if the ray hits the geometry of the model.
            If there a more than one hit, result returns the hit which is nearest to the ray origin.
            </summary>
            <param name="context">Render context from viewport</param>
            <param name="rayWS">Hitring ray from the camera.</param>
            <param name="hits">results of the hit.</param>
            <returns>True if the ray hits one or more times.</returns>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.GroupElement3D">
            <summary>
            Supports both ItemsSource binding and Xaml children. Binds with ObservableElement3DCollection 
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.GroupElement3D.ItemsSource">
            <summary>
            ItemsSource for binding to collection. Please use ObservableElement3DCollection for observable, otherwise may cause memory leak.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.GroupElement3D.ItemsSourceProperty">
            <summary>
            ItemsSource for binding to collection. Please use ObservableElement3DCollection for observable, otherwise may cause memory leak.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Light3D.Direction">
            <summary>
            Direction of the light.
            It applies to Directional Light and to Spot Light,
            for all other lights it is ignored.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Light3D.DirectionTransform">
            <summary>
            Transforms the Direction Vector of the Light.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Light3D.Color">
            <summary>
            Color of the light.
            For simplicity, this color applies to the diffuse and specular properties of the light.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Light3D.DirectionTransformPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Light3D.LightViewMatrix">
            <summary>
            The lighting model.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.PointLightBase3D.Position">
            <summary>
            The position of the model in world space.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.PointLightBase3D.Attenuation">
            <summary>
            Attenuation coefficients:
            X = constant attenuation,
            Y = linar attenuation,
            Z = quadratic attenuation.
            For details see: http://msdn.microsoft.com/en-us/library/windows/desktop/bb172279(v=vs.85).aspx
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.PointLightBase3D.Range">
            <summary>
            Range of this light. This is the maximum distance 
            of a pixel being lit by this light.
            For details see: http://msdn.microsoft.com/en-us/library/windows/desktop/bb172279(v=vs.85).aspx
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.LineGeometryModel3D.VertexBuffer">
            <summary>
            For subclass override
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.LineGeometryModel3D.IndexBuffer">
            <summary>
            For subclass override
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.LineGeometryModel3D.OnDetach">
            <summary>
            
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.LineGeometryModel3D.CreateLinesVertexArray">
            <summary>
            Creates a <see cref="T:LinesVertex[]"/>.
            </summary>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.Model3D">
            <summary>
            Provides a base class for a scene model
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Model3D.totalModelMatrix">
            <summary>
            This is a hack model matrix. It is always pushed but
            never poped. It can be used to get the total model matrix
            in functions different than render or hittext, e.g., OnMouse3DMove.
            This is a temporar solution, until we have more time to think how to make it better.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.SpotLight3D.Falloff">
            <summary>
            Decay Exponent of the spotlight.
            The falloff the spotlight between inner and outer angle
            depends on this value.
            For details see: http://msdn.microsoft.com/en-us/library/windows/desktop/bb174697(v=vs.85).aspx
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.SpotLight3D.OuterAngle">
            <summary>
            Full outer angle of the spot (Phi) in degrees
            For details see: http://msdn.microsoft.com/en-us/library/windows/desktop/bb174697(v=vs.85).aspx
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.SpotLight3D.InnerAngle">
            <summary>
            Full inner angle of the spot (Theta) in degrees. 
            For details see: http://msdn.microsoft.com/en-us/library/windows/desktop/bb174697(v=vs.85).aspx
            </summary>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.UIElement3D">
            <summary>
            Base class for renderable GUI elements.
            </summary> 
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.IHitable.HitTest(HelixToolkit.Wpf.SharpDX.IRenderMatrices,SharpDX.Ray,System.Collections.Generic.List{HelixToolkit.Wpf.SharpDX.HitTestResult}@)">
             <summary>
            
             </summary>
             <param name="context">Used to get view/projection matrices during hit test. <para>Only needs for screen space model hit test(line/point/billboard). Can be set to null for mesh geometry hit test.</para></param>
             <param name="ray"></param>
             <param name="hits"></param>
             <returns>Return all hitted details with distance from nearest to farest.</returns>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.IHitable.IsHitTestVisible">
            <summary>
            Indicates, if this element should be hit-tested.        
            default is true
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.IParameterVariables.OnAttach(SharpDX.Direct3D11.Effect)">
            <summary>
            Create variables
            </summary>
            <param name="effect"></param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.IParameterVariables.OnDettach">
            <summary>
            Release variables
            </summary>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.PhongMaterial">
            <summary>
            Implments a phong-material with its all properties
            Includes Diffuse, Normal, Displacement, Specular, etc. maps
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.PhongMaterial.AmbientColorProperty">
            <summary>
            Identifies the System.Windows.Media.Media3D.DiffuseMaterial.AmbientColor�dependency
            property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.PhongMaterial.DiffuseColorProperty">
            <summary>
            Identifies the System.Windows.Media.Media3D.DiffuseMaterial.Color�dependency
            property.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.PhongMaterial.EmissiveColorProperty">
            <summary>
                    
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.PhongMaterial.SpecularColorProperty">
            <summary>
                    
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.PhongMaterial.SpecularShininessProperty">
            <summary>
                    
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.PhongMaterial.ReflectiveColorProperty">
            <summary>
                    
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.PhongMaterial.DiffuseMapProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.PhongMaterial.DiffuseAlphaMapProperty">
            <summary>
            Supports alpha channel image, such as PNG.
            Usage: Load the image file(BMP, PNG, etc) as a stream.
            It can be used to replace DiffuseMap, or used as a mask and apply onto diffuse map. 
            The color will be cDiffuse*cAlpha.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.PhongMaterial.NormalMapProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.PhongMaterial.DisplacementMapProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.PhongMaterial.#ctor">
            <summary>
            Constructs a Shading Material which correspnds with 
            the Phong and BlinnPhong lighting models.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.PhongMaterial.AmbientColor">
            <summary>
            Gets or sets a color that represents how the material reflects System.Windows.Media.Media3D.AmbientLight.
            For details see: http://msdn.microsoft.com/en-us/library/windows/desktop/bb147175(v=vs.85).aspx
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.PhongMaterial.DiffuseColor">
            <summary>
            Gets or sets the diffuse color for the material.
            For details see: http://msdn.microsoft.com/en-us/library/windows/desktop/bb147175(v=vs.85).aspx
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.PhongMaterial.EmissiveColor">
            <summary>
            Gets or sets the emissive color for the material.
            For details see: http://msdn.microsoft.com/en-us/library/windows/desktop/bb147175(v=vs.85).aspx
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.PhongMaterial.ReflectiveColor">
            <summary>
            A fake parameter for reflectivity of the environment map
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.PhongMaterial.SpecularColor">
            <summary>
            Gets or sets the specular color for the material.
            For details see: http://msdn.microsoft.com/en-us/library/windows/desktop/bb147175(v=vs.85).aspx
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.PhongMaterial.SpecularShininess">
            <summary>
            The power of specular reflections. 
            For details see: http://msdn.microsoft.com/en-us/library/windows/desktop/bb147175(v=vs.85).aspx
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.PhongMaterial.DiffuseMap">
            <summary>
            System.Windows.Media.Brush to be applied as a System.Windows.Media.Media3D.Material
            to a 3-D model.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.PhongMaterial.NormalMap">
            <summary>
            
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.PhongMaterial.DisplacementMap">
            <summary>
            
            </summary>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.PhongMaterials">
            <summary>
            
            </summary>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.Exporter">
            <summary>
            An abstract base class providing common functionality for exporters.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Exporter.disposed">
            <summary>
            The disposed flag.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Exporter.RenderBrush(System.String,System.Windows.Media.Brush,System.Int32,System.Int32)">
            <summary>
            Renders the brush.
            </summary>
            <param name="path">
            The path.
            </param>
            <param name="brush">
            The brush.
            </param>
            <param name="w">
            The w.
            </param>
            <param name="h">
            The h.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Exporter.Close">
            <summary>
            Closes this exporter.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Exporter.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Exporter.Export(HelixToolkit.Wpf.SharpDX.Viewport3DX)">
            <summary>
            Exports the specified viewport.
            Exports model, camera and lights.
            </summary>
            <param name="viewport">
            The viewport.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Exporter.Export(HelixToolkit.Wpf.SharpDX.Model3D)">
            <summary>
            Exports the specified model.
            </summary>
            <param name="model">
            The model.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Exporter.ExportCamera(HelixToolkit.Wpf.SharpDX.Camera)">
            <summary>
            Exports the camera.
            </summary>
            <param name="camera">
            The camera.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Exporter.ExportHeader">
            <summary>
            Exports the header.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Exporter.ExportLight(System.Windows.Media.Media3D.Light,System.Windows.Media.Media3D.Transform3D)">
            <summary>
            Exports the light.
            </summary>
            <param name="light">
            The light.
            </param>
            <param name="inheritedTransform">
            The inherited transform.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Exporter.ExportModel(HelixToolkit.Wpf.SharpDX.GeometryModel3D,System.Windows.Media.Media3D.Transform3D)">
            <summary>
            Exports the model.
            </summary>
            <param name="model">
            The model.
            </param>
            <param name="inheritedTransform">
            The inherited transform.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Exporter.ExportViewport(HelixToolkit.Wpf.SharpDX.Viewport3DX)">
            <summary>
            Exports the viewport.
            </summary>
            <param name="viewport">
            The viewport.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Exporter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.IExporter">
            <summary>
            Interface for 3D exporters.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.IExporter.Export(HelixToolkit.Wpf.SharpDX.Viewport3DX)">
            <summary>
            Exports the specified viewport.
            </summary>
            <param name="viewport">
            The viewport.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.IExporter.Export(HelixToolkit.Wpf.SharpDX.Model3D)">
            <summary>
            Exports the specified model.
            </summary>
            <param name="model">
            The model.
            </param>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.IModelReader">
            <summary>
            Interface for model readers.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.IModelReader.Read(System.String,HelixToolkit.Wpf.SharpDX.ModelInfo)">
            <summary>
            Reads the model from the specified path.
            </summary>
            <param name="path">
            The path.
            </param>
            <param name="info">
            The model info.
            </param>
            <returns>
            The model.
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.IModelReader.Read(System.IO.Stream,HelixToolkit.Wpf.SharpDX.ModelInfo)">
            <summary>
            Reads the model from the specified stream.
            </summary>
            <param name="s">
            The stream.
            </param>
            <param name="info">
            The model info.
            </param>
            <returns>
            The model.
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.LineBuilder.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.LineBuilder.Add(System.Boolean,SharpDX.Vector3[])">
            <summary>
            
            </summary>
            <param name="isClosed"></param>
            <param name="points"></param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.LineBuilder.AddBox(SharpDX.Vector3,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="center"></param>
            <param name="xlength"></param>
            <param name="ylength"></param>
            <param name="zlength"></param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.LineBuilder.AddLine(SharpDX.Vector3,SharpDX.Vector3)">
            <summary>
            
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.LineBuilder.AddGrid(HelixToolkit.Wpf.SharpDX.BoxFaces,System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="plane"></param>
            <param name="columns"></param>
            <param name="rows"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.LineBuilder.ToLineGeometry3D(System.Boolean)">
            <summary>
            Creates the resulting <see cref="T:HelixToolkit.Wpf.SharpDX.LineGeometry3D"/>.
            </summary>
            <param name="unshareVertices">
            If true, the resulting <see cref="T:HelixToolkit.Wpf.SharpDX.LineGeometry3D"/> has no shared vertices.
            </param>
            <returns>Returns the resulting <see cref="T:HelixToolkit.Wpf.SharpDX.LineGeometry3D"/>.</returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.LineBuilder.GenerateGrid(System.Int32)">
            <summary>
            Generates a square grid with a step of 1.0 
            </summary>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.LineBuilder.GenerateGrid(SharpDX.Vector3,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Generates a square grid with a step of 1.0 
            </summary>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.LineBuilder.GenerateGrid(SharpDX.Vector3,System.Int32,System.Int32)">
            <summary>
            Generates a square grid with a step of 1.0 
            </summary>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.LineBuilder.GenerateBoundingBox(HelixToolkit.Wpf.SharpDX.Geometry3D)">
            <summary>
            Returns a line geometry of the axis-aligned bounding-box of the given mesh.
            </summary>
            <param name="mesh">Input mesh for the computation of the b-box</param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.LineBuilder.GenerateBoundingBox(SharpDX.Vector3[])">
            <summary>
            Returns a line geometry of the axis-aligned bounding-box of the given mesh.
            </summary>
            <param name="points">Input points for the computation of the b-box</param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.LineBuilder.GenerateBoundingBox(SharpDX.BoundingBox)">
            <summary>
            Returns a line geometry of the axis-aligned bounding-box.
            </summary>
            <param name="bb">The bounding-box</param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.LineBuilder.GenerateCircle(SharpDX.Vector3,System.Single,System.Int32)">
            <summary>
            
            </summary>
            <param name="plane"></param>
            <param name="radius"></param>
            <param name="segments"></param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.LineBuilder.GetPointToLineDistance2D(SharpDX.Vector3@,SharpDX.Vector3@,SharpDX.Vector3@,SharpDX.Vector3@,System.Single@)">
            <summary>
            ~7874015 tests per second, 3.36 times faster than GetRayToLineDistance()
            </summary>
            <param name="pt"></param>
            <param name="p0"></param>
            <param name="p1"></param>
            <param name="closest"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.LineBuilder.GetRayToLineDistance(SharpDX.Ray,SharpDX.Vector3,SharpDX.Vector3,SharpDX.Vector3@,SharpDX.Vector3@,System.Single@,System.Single@)">
            <summary>
            
            </summary>
            <param name="ray"></param>
            <param name="t0"></param>
            <param name="t1"></param>
            <param name="sp"></param>
            <param name="tp"></param>
            <param name="sc"></param>
            <param name="tc"></param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.LineBuilder.GetLineToLineDistance(SharpDX.Vector3,SharpDX.Vector3,SharpDX.Vector3,SharpDX.Vector3,SharpDX.Vector3@,SharpDX.Vector3@,System.Single@,System.Single@,System.Boolean)">
            <summary>
            Source: http://geomalgorithms.com/a07-_distance.html
            ~2341920 tests per second</summary>
            <param name="s0"></param>
            <param name="s1"></param>
            <param name="t0"></param>
            <param name="t1"></param>
            <param name="sp"></param>
            <param name="tp"></param>
            <param name="sc"></param>
            <param name="tc"></param>
            <param name="sIsRay"></param>
            <returns></returns>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.ObjExporter">
            <summary>
            Export the 3D visual tree to a Wavefront OBJ file
            </summary>
            <remarks>
            http://en.wikipedia.org/wiki/Obj
            http://www.martinreddy.net/gfx/3d/OBJ.spec
            http://www.eg-models.de/formats/Format_Obj.html
            </remarks>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.ObjExporter.ExportNormals">
            <summary>
            Gets or sets a value indicating whether to export normals.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.ObjExporter.UseDissolveForTransparency">
            <summary>
            Gets or sets a value indicating whether to use "d" for transparency (default is "Tr").
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.ObjExporter.directory">
            <summary>
            The directory.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.ObjExporter.exportedMaterials">
            <summary>
            The exported materials.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.ObjExporter.mwriter">
            <summary>
            The mwriter.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.ObjExporter.writer">
            <summary>
            The writer.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.ObjExporter.normalIndex">
            <summary>
            Normal index counter.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.ObjExporter.textureIndex">
            <summary>
            Texture index counter.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.ObjExporter.vertexIndex">
            <summary>
            Vertex index counter.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ObjExporter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Wpf.SharpDX.ObjExporter"/> class.
            </summary>
            <param name="outputFileName">
            Name of the output file.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ObjExporter.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Wpf.SharpDX.ObjExporter"/> class.
            </summary>
            <param name="outputFileName">
            Name of the output file.
            </param>
            <param name="comment">
            The comment.
            </param>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.ObjExporter.SwitchYZ">
            <summary>
            Gets or sets a value indicating whether to switch Y and Z coordinates.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ObjExporter.Close">
            <summary>
            Closes this exporter.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ObjExporter.ExportMesh(HelixToolkit.Wpf.SharpDX.MeshGeometry3D,System.Windows.Media.Media3D.Transform3D)">
            <summary>
            The export mesh.
            </summary>
            <param name="m">
            The m.
            </param>
            <param name="t">
            The t.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ObjExporter.ExportModel(HelixToolkit.Wpf.SharpDX.GeometryModel3D,System.Windows.Media.Media3D.Transform3D)">
            <summary>
            The export model.
            </summary>
            <param name="model">
            The model.
            </param>
            <param name="transform">
            The transform.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ObjExporter.ExportMaterial(System.String,HelixToolkit.Wpf.SharpDX.Material,HelixToolkit.Wpf.SharpDX.Material)">
            <summary>
            The export material.
            </summary>
            <param name="matName">
            The mat name.
            </param>
            <param name="material">
            The material.
            </param>
            <param name="backMaterial">
            The back material.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ObjExporter.ToColorString(System.Windows.Media.Color)">
            <summary>
            Converts a color to a string.
            </summary>
            <param name="color">
            The color.
            </param>
            <returns>
            The string.
            </returns>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.ObjReader">
            <summary>
            A Wavefront .obj file reader.
            </summary>
            <remarks>
            See the file format specifications at
            http://en.wikipedia.org/wiki/Obj
            http://en.wikipedia.org/wiki/Material_Template_Library
            http://www.martinreddy.net/gfx/3d/OBJ.spec
            http://www.eg-models.de/formats/Format_Obj.html
            </remarks>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ObjReader.#ctor">
            <summary>
            Initializes a new instance of the <see cref = "T:HelixToolkit.Wpf.SharpDX.ObjReader" /> class.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.ObjReader.DefaultColor">
            <summary>
            Gets or sets the default color.
            </summary>
            <value>The default color.</value>
            <remarks>
            The default value is Colors.Gold.
            </remarks>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.ObjReader.IgnoreErrors">
            <summary>
            Gets or sets a value indicating whether to ignore errors.
            </summary>
            <value><c>true</c> if errors should be ignored; <c>false</c> if errors should throw an exception.</value>
            <remarks>
            The default value is on (true).
            </remarks>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.ObjReader.SwitchYZ">
            <summary>
            Gets or sets a value indicating whether to switch Y and Z coordinates.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.ObjReader.SkipTransparencyValues">
            <summary>
            Gets or sets a value indicating whether to skip transparency values ("Tr") in the material files.
            </summary>
            <value>
            <c>true</c> if transparency values should be skipped; otherwise, <c>false</c>.
            </value>
            <remarks>
            This option is added to allow disabling the "Tr" values in files where it has been defined incorrectly.
            The transparency values ("Tr") are interpreted as 0 = transparent, 1 = opaque.
            The dissolve values ("d") are interpreted as 0 = transparent, 1=opaque.
            </remarks>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.ObjReader.IsSmoothingDefault">
            <summary>
            Sets a value indicating whether smoothing is default.
            </summary>
            <remarks>
            The default value is smoothing=on (true).
            </remarks>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.ObjReader.Groups">
            <summary>
            Gets the groups of the file.
            </summary>
            <value>The groups.</value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.ObjReader.Materials">
            <summary>
            Gets the materials in the imported material files.
            </summary>
            <value>The materials.</value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.ObjReader.TexturePath">
            <summary>
            Gets or sets the path to the textures.
            </summary>
            <value>The texture path.</value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.ObjReader.ModelInfo">
            <summary>
            Additional info how to treat the model
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ObjReader.Read(System.String,HelixToolkit.Wpf.SharpDX.ModelInfo)">
            <summary>
            Reads the model from the specified path.
            </summary>
            <param name="path">
            The path.
            </param>
            <param name="info">
            The model info.
            </param>
            <returns>
            The model.
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ObjReader.Read(System.IO.Stream,HelixToolkit.Wpf.SharpDX.ModelInfo)">
            <summary>
            Reads the model from the specified stream.
            </summary>
            <param name="s">
            The stream.
            </param>
            <param name="info">
            The model info.
            </param>
            <returns>
            The model.
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ObjReader.ReadZ(System.String)">
            <summary>
            Reads a GZipStream compressed OBJ file.
            </summary>
            <param name="path">
            The path.
            </param>
            <returns>
            A Model3D object containing the model.
            </returns>
            <remarks>
            This is a file format used by Helix Toolkit only.
            Use the GZipHelper class to compress an .obj file.
            </remarks>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.ObjReader.smoothingGroupMaps">
            <summary>
            The smoothing group maps.
            </summary>
            <remarks>
            The outer dictionary maps from a smoothing group number to a Dictionary&lt;long,int&gt;.
            The inner dictionary maps from an obj file (vertex, texture coordinates, normal) index to a vertex index in the current group.
            </remarks>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.ObjReader.currentSmoothingGroup">
            <summary>
            The current smoothing group.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.ObjReader.currentLineNo">
            <summary>
            The line number of the line being parsed.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.ObjReader.CurrentGroup">
            <summary>
            Gets the current group.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.ObjReader.Normals">
            <summary>
            Gets or sets the normals.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.ObjReader.Points">
            <summary>
            Gets or sets the points.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.ObjReader.Reader">
            <summary>
            Gets or sets the stream reader.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.ObjReader.TextureCoordinates">
            <summary>
            Gets or sets the texture coordinates.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ObjReader.ColorParse(System.String)">
            <summary>
            Parses a color string.
            </summary>
            <param name="values">
            The input.
            </param>
            <returns>
            The parsed color.
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ObjReader.DoubleParse(System.String)">
            <summary>
            Parse a string containing a double value.
            </summary>
            <param name="input">
            The input string.
            </param>
            <returns>
            The value.
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ObjReader.Split(System.String)">
            <summary>
            Splits the specified string using whitespace(input) as separators.
            </summary>
            <param name="input">
            The input string.
            </param>
            <returns>
            List of input.
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ObjReader.SplitLine(System.String,System.String@,System.String@)">
            <summary>
            Splits a line in keyword and arguments.
            </summary>
            <param name="line">
            The line.
            </param>
            <param name="keyword">
            The keyword.
            </param>
            <param name="arguments">
            The arguments.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ObjReader.AddGroup(System.String)">
            <summary>
            Adds a group with the specified name.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ObjReader.EnsureNewMesh">
            <summary>
            Ensures that a new mesh is created.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ObjReader.SetSmoothingGroup(System.String)">
            <summary>
            Sets the smoothing group number.
            </summary>
            <param name="values">The group number.</param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ObjReader.AddFace(System.String)">
            <summary>
            Adds a face.
            </summary>
            <param name="values">
            The input values.
            </param>
            <remarks>
            Adds a polygonal face. The numbers are indexes into the arrays of vertex positions,
            texture coordinates, and normals respectively. A number may be omitted if,
            for example, texture coordinates are not being defined in the model.
            There is no maximum number of vertices that a single polygon may contain.
            The .obj file specification says that each face must be flat and convex.
            </remarks>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ObjReader.AddNormal(System.String)">
            <summary>
            Adds a normal.
            </summary>
            <param name="values">
            The input values.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ObjReader.AddTexCoord(System.String)">
            <summary>
            Adds a texture coordinate.
            </summary>
            <param name="values">
            The input values.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ObjReader.AddVertex(System.String)">
            <summary>
            Adds a vertex.
            </summary>
            <param name="values">
            The input values.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ObjReader.BuildModel">
            <summary>
            Builds the model.
            </summary>
            <returns>
            A Model3D object.
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ObjReader.GetMaterial(System.String)">
            <summary>
            Gets the material with the specified name.
            </summary>
            <param name="materialName">
            The material name.
            </param>
            <returns>
            The material.
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ObjReader.LoadMaterialLib(System.String)">
            <summary>
            Loads a material library.
            </summary>
            <param name="mtlFile">
            The mtl file.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ObjReader.SetMaterial(System.String)">
            <summary>
            Sets the material for the current group.
            </summary>
            <param name="materialName">
            The material name.
            </param>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.ObjReader.Group">
            <summary>
            Represents a group in the obj file.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.ObjReader.Group.meshBuilders">
            <summary>
            List of mesh builders.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.ObjReader.Group.materials">
            <summary>
            List of materials.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ObjReader.Group.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Wpf.SharpDX.ObjReader.Group"/> class.
            </summary>
            <param name="name">
            The name of the group.
            </param>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.ObjReader.Group.Material">
            <summary>
            Sets the material.
            </summary>
            <value>The material.</value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.ObjReader.Group.MeshBuilder">
            <summary>
            Gets the mesh builder for the current mesh.
            </summary>
            <value>The mesh builder.</value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.ObjReader.Group.Name">
            <summary>
            Gets or sets the group name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ObjReader.Group.AddMesh">
            <summary>
            Adds a mesh.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ObjReader.Group.CreateModels(HelixToolkit.Wpf.SharpDX.ModelInfo)">
            <summary>
            Creates the models of the group.
            </summary>
            <returns>The models.</returns>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.ObjReader.MaterialDefinition">
            <summary>
            A material definition.
            </summary>
            <remarks>
            The file format is documented in http://en.wikipedia.org/wiki/Material_Template_Library.
            </remarks>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ObjReader.MaterialDefinition.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Wpf.SharpDX.ObjReader.MaterialDefinition"/> class.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.ObjReader.MaterialDefinition.AlphaMap">
            <summary>
            Gets or sets the alpha map.
            </summary>
            <value>The alpha map.</value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.ObjReader.MaterialDefinition.Ambient">
            <summary>
            Gets or sets the ambient color.
            </summary>
            <value>The ambient.</value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.ObjReader.MaterialDefinition.AmbientMap">
            <summary>
            Gets or sets the ambient map.
            </summary>
            <value>The ambient map.</value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.ObjReader.MaterialDefinition.BumpMap">
            <summary>
            Gets or sets the bump map.
            </summary>
            <value>The bump map.</value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.ObjReader.MaterialDefinition.Diffuse">
            <summary>
            Gets or sets the diffuse color.
            </summary>
            <value>The diffuse.</value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.ObjReader.MaterialDefinition.DiffuseMap">
            <summary>
            Gets or sets the diffuse map.
            </summary>
            <value>The diffuse map.</value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.ObjReader.MaterialDefinition.Dissolved">
            <summary>
            Gets or sets the opacity value.
            </summary>
            <value>The opacity.</value>
            <remarks>
            0.0 is transparent, 1.0 is opaque.
            </remarks>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.ObjReader.MaterialDefinition.Illumination">
            <summary>
            Gets or sets the illumination.
            </summary>
            <value>The illumination.</value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.ObjReader.MaterialDefinition.Specular">
            <summary>
            Gets or sets the specular color.
            </summary>
            <value>The specular color.</value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.ObjReader.MaterialDefinition.SpecularCoefficient">
            <summary>
            Gets or sets the specular coefficient.
            </summary>
            <value>The specular coefficient.</value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.ObjReader.MaterialDefinition.SpecularMap">
            <summary>
            Gets or sets the specular map.
            </summary>
            <value>The specular map.</value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.ObjReader.MaterialDefinition.Material">
            <summary>
            Gets or sets the material.
            </summary>
            <value>The material.</value>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ObjReader.MaterialDefinition.GetMaterial(System.String)">
            <summary>
            Gets the material from the specified path.
            </summary>
            <param name="texturePath">
            The texture path.
            </param>
            <returns>
            The material.
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ObjReader.MaterialDefinition.CreateMaterial(System.String)">
            <summary>
            Creates the material.
            </summary>
            <param name="texturePath">The texture path.</param>
            <returns>A WPF material.</returns>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.BoxFaces">
            <summary>
            Box face enumeration.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.BoxFaces.PositiveZ">
            <summary>
            The top.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.BoxFaces.Top">
            <summary>
            The top.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.BoxFaces.NegativeZ">
            <summary>
            The bottom.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.BoxFaces.Bottom">
            <summary>
            The bottom.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.BoxFaces.NegativeY">
            <summary>
            The left side.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.BoxFaces.Left">
            <summary>
            The left side.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.BoxFaces.PositiveY">
            <summary>
            The right side.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.BoxFaces.Right">
            <summary>
            The right side.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.BoxFaces.PositiveX">
            <summary>
            The front side.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.BoxFaces.Front">
            <summary>
            The front side.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.BoxFaces.NegativeX">
            <summary>
            The back side.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.BoxFaces.Back">
            <summary>
            The back side.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.BoxFaces.All">
            <summary>
            All sides.
            </summary>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.MeshFaces">
            <summary>
            MeshFaces.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.MeshFaces.Default">
            <summary>
            Normal Face (3 Points).
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.MeshFaces.QuadPatches">
            <summary>
            Face with 4 Points.
            </summary>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.MeshBuilder">
            <summary>
            Builds MeshGeometry3D objects.
            </summary>
            <remarks>
            Performance tips for MeshGeometry3D (http://msdn.microsoft.com/en-us/library/bb613553.aspx)
            <para>
            High impact:
            Mesh animation—changing the individual vertices of a mesh on a per-frame basis—is not always efficient in
            Windows Presentation Foundation (WPF).  To minimize the performance impact of change notifications when
            each vertex is modified, detach the mesh from the visual tree before performing per-vertex modification.
            Once the mesh has been modified, reattach it to the visual tree.  Also, try to minimize the size of meshes
            that will be animated in this way.
            </para>
            <para>
            Medium impact:
            When a mesh is defined as abutting triangles with shared vertices and those vertices have the same position,
            normal, and texture coordinates, define each shared vertex only once and then define your triangles by
            index with TriangleIndices.
            </para>
            <para>
            Low impact:
            To minimize the construction time of large collections in Windows Presentation Foundation (WPF),
            such as a MeshGeometry3D’s Positions, Normals, TextureCoordinates, and TriangleIndices, pre-size
            the collections before value population. If possible, pass the collections’ constructors prepopulated
            data structures such as arrays or Lists.
            </para>
            </remarks>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.MeshBuilder.AllCurvesShouldHaveTheSameNumberOfPoints">
            <summary>
            'All curves should have the same number of points' exception message.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.MeshBuilder.SourceMeshNormalsShouldNotBeNull">
            <summary>
            'Source mesh normals should not be null' exception message.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.MeshBuilder.SourceMeshTextureCoordinatesShouldNotBeNull">
            <summary>
            'Source mesh texture coordinates should not be null' exception message.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.MeshBuilder.WrongNumberOfDiameters">
            <summary>
            'Wrong number of diameters' exception message.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.MeshBuilder.WrongNumberOfPositions">
            <summary>
            'Wrong number of positions' exception message.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.MeshBuilder.WrongNumberOfNormals">
            <summary>
            'Wrong number of normals' exception message.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.MeshBuilder.WrongNumberOfTextureCoordinates">
            <summary>
            'Wrong number of texture coordinates' exception message.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.MeshBuilder.WrongNumberOfAngles">
            <summary>
            'Wrong number of angles' exception message.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.MeshBuilder.CircleCache">
            <summary>
            The circle cache.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.MeshBuilder.ClosedCircleCache">
            <summary>
            The closed circle cache.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.MeshBuilder.UnitSphereCache">
            <summary>
            The unit sphere cache.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.MeshBuilder.positions">
            <summary>
            The positions.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.MeshBuilder.Positions">
            <summary>
            Gets the positions collection of the mesh.
            </summary>
            <value> The positions. </value>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.MeshBuilder.triangleIndices">
            <summary>
            The triangle indices.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.MeshBuilder.TriangleIndices">
            <summary>
            Gets the triangle indices.
            </summary>
            <value>The triangle indices.</value>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.MeshBuilder.normals">
            <summary>
            The normal vectors.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.MeshBuilder.Normals">
            <summary>
            Gets the normal vectors of the mesh.
            </summary>
            <value>The normal vectors.</value>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.MeshBuilder.textureCoordinates">
            <summary>
            The texture coordinates.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.MeshBuilder.TextureCoordinates">
            <summary>
            Gets the texture coordinates of the mesh.
            </summary>
            <value>The texture coordinates.</value>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.MeshBuilder.tangents">
            <summary>
            The Tangents.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.MeshBuilder.Tangents">
            <summary>
            Gets and sets the tangents of the mesh.
            </summary>
            <value>The tangents.</value>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.MeshBuilder.bitangents">
            <summary>
            The Bi-Tangents.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.MeshBuilder.BiTangents">
            <summary>
            Gets and sets the bi-tangents of the mesh.
            </summary>
            <value>The bi-tangents.</value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.MeshBuilder.HasNormals">
            <summary>
            Do we have Normals or not.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.MeshBuilder.HasTexCoords">
            <summary>
            Do we have Texture Coordinates or not.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.MeshBuilder.HasTangents">
            <summary>
            Do we have Tangents or not.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.MeshBuilder.CreateNormals">
            <summary>
            Gets or sets a value indicating whether to create normal vectors.
            </summary>
            <value>
            <c>true</c> if normal vectors should be created; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.MeshBuilder.CreateTextureCoordinates">
            <summary>
            Gets or sets a value indicating whether to create texture coordinates.
            </summary>
            <value>
            <c>true</c> if texture coordinates should be created; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Wpf.SharpDX.MeshBuilder"/> class.
            </summary>
            <remarks>
            Normal and texture coordinate generation are included.
            </remarks>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Wpf.SharpDX.MeshBuilder"/> class.
            </summary>
            <param name="generateNormals">
            Generate normal vectors.
            </param>
            <param name="generateTexCoords">
            Generate texture coordinates.
            </param>
            <param name="tangentSpace">
            Generate tangents.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.GetCircle(System.Int32,System.Boolean)">
            <summary>
            Gets a circle section (cached).
            </summary>
            <param name="thetaDiv">
            The number of division.
            </param>
            <param name="closed">
            Is the circle closed?
            If true, the last point will not be at the same position than the first one.
            </param>
            <returns>
            A circle.
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.GetCircleSegment(System.Int32,System.Double,System.Double)">
            <summary>
            Gets a circle segment section.
            </summary>
            <param name="thetaDiv">The number of division.</param>
            <param name="totalAngle">The angle of the circle segment.</param>
            <param name="angleOffset">The angle-offset to use.</param>
            <returns>
            A circle segment.
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.GetUnitSphere(System.Int32)">
            <summary>
            Gets a unit sphere from the cache.
            </summary>
            <param name="subdivisions">
            The number of subdivisions.
            </param>
            <returns>
            A unit sphere mesh.
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.ComputeNormals(HelixToolkit.Wpf.SharpDX.Core.Vector3Collection,HelixToolkit.Wpf.SharpDX.Core.IntCollection,HelixToolkit.Wpf.SharpDX.Core.Vector3Collection@)">
            <summary>
            Calculate the Mesh's Normals
            </summary>
            <param name="positions">The Positions.</param>
            <param name="triangleIndices">The TriangleIndices.</param>
            <param name="normals">The calcualted Normals.</param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.ComputeTangents(HelixToolkit.Wpf.SharpDX.MeshFaces)">
            <summary>
            Calculate the Mesh's Tangents
            </summary>
            <param name="meshFaces">The Faces of the Mesh</param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.ComputeTangents(HelixToolkit.Wpf.SharpDX.Core.Vector3Collection,HelixToolkit.Wpf.SharpDX.Core.Vector3Collection,HelixToolkit.Wpf.SharpDX.Core.Vector2Collection,HelixToolkit.Wpf.SharpDX.Core.IntCollection,HelixToolkit.Wpf.SharpDX.Core.Vector3Collection@,HelixToolkit.Wpf.SharpDX.Core.Vector3Collection@)">
            <summary>
            Tangent Space computation for IndexedTriangle meshes
            Based on:
            http://www.terathon.com/code/tangent.html
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.ComputeTangentsQuads(HelixToolkit.Wpf.SharpDX.Core.Vector3Collection,HelixToolkit.Wpf.SharpDX.Core.Vector3Collection,HelixToolkit.Wpf.SharpDX.Core.Vector2Collection,HelixToolkit.Wpf.SharpDX.Core.IntCollection,HelixToolkit.Wpf.SharpDX.Core.Vector3Collection@,HelixToolkit.Wpf.SharpDX.Core.Vector3Collection@)">
            <summary>
            Calculate the Tangents for a Quad.
            </summary>
            <param name="positions">The Positions.</param>
            <param name="normals">The Normals.</param>
            <param name="textureCoordinates">The TextureCoordinates.</param>
            <param name="indices">The Indices.</param>
            <param name="tangents">The calculated Tangens.</param>
            <param name="bitangents">The calculated Bi-Tangens.</param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.ComputeTangents(HelixToolkit.Wpf.SharpDX.MeshGeometry3D)">
            <summary>
            Calculate the Tangents for a MeshGeometry3D.
            </summary>
            <param name="meshGeometry">The MeshGeometry3D.</param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.ComputeNormalsAndTangents(HelixToolkit.Wpf.SharpDX.MeshFaces,System.Boolean)">
            <summary>
            Calculate the Normals and Tangents for all MeshFaces.
            </summary>
            <param name="meshFaces">The MeshFaces.</param>
            <param name="tangents">Also calculate the Tangents or not.</param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.AddArrow(SharpDX.Vector3,SharpDX.Vector3,System.Double,System.Double,System.Int32)">
            <summary>
            Adds an arrow to the mesh.
            </summary>
            <param name="point1">
            The start point.
            </param>
            <param name="point2">
            The end point.
            </param>
            <param name="diameter">
            The diameter of the arrow cylinder.
            </param>
            <param name="headLength">
            Length of the head (relative to diameter).
            </param>
            <param name="thetaDiv">
            The number of divisions around the arrow.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.AddBoundingBox(System.Windows.Media.Media3D.Rect3D,System.Double)">
            <summary>
            Adds the edges of a bounding box as cylinders.
            </summary>
            <param name="boundingBox">
            The bounding box.
            </param>
            <param name="diameter">
            The diameter of the cylinders.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.AddBox(SharpDX.Vector3,System.Double,System.Double,System.Double)">
            <summary>
            Adds a box aligned with the X, Y and Z axes.
            </summary>
            <param name="center">
            The center point of the box.
            </param>
            <param name="xlength">
            The length of the box along the X axis.
            </param>
            <param name="ylength">
            The length of the box along the Y axis.
            </param>
            <param name="zlength">
            The length of the box along the Z axis.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.AddBox(System.Windows.Media.Media3D.Rect3D,HelixToolkit.Wpf.SharpDX.BoxFaces)">
            <summary>
            Adds a box aligned with the X, Y and Z axes.
            </summary>
            <param name="rectangle">
            The 3-D "rectangle".
            </param>
            <param name="faces">The faces to include.</param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.AddBox(SharpDX.Vector3,System.Double,System.Double,System.Double,HelixToolkit.Wpf.SharpDX.BoxFaces)">
            <summary>
            Adds a box with the specified faces, aligned with the X, Y and Z axes.
            </summary>
            <param name="center">
            The center point of the box.
            </param>
            <param name="xlength">
            The length of the box along the X axis.
            </param>
            <param name="ylength">
            The length of the box along the Y axis.
            </param>
            <param name="zlength">
            The length of the box along the Z axis.
            </param>
            <param name="faces">
            The faces to include.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.AddBox(SharpDX.Vector3,SharpDX.Vector3,SharpDX.Vector3,System.Double,System.Double,System.Double,HelixToolkit.Wpf.SharpDX.BoxFaces)">
            <summary>
            Adds a box with the specified faces, aligned with the specified axes.
            </summary>
            <param name="center">The center point of the box.</param>
            <param name="x">The x axis.</param>
            <param name="y">The y axis.</param>
            <param name="xlength">The length of the box along the X axis.</param>
            <param name="ylength">The length of the box along the Y axis.</param>
            <param name="zlength">The length of the box along the Z axis.</param>
            <param name="faces">The faces to include.</param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.AddCone(SharpDX.Vector3,SharpDX.Vector3,System.Double,System.Double,System.Double,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Adds a (possibly truncated) cone.
            </summary>
            <param name="origin">
            The origin.
            </param>
            <param name="direction">
            The direction (normalization not required).
            </param>
            <param name="baseRadius">
            The base radius.
            </param>
            <param name="topRadius">
            The top radius.
            </param>
            <param name="height">
            The height.
            </param>
            <param name="baseCap">
            Include a base cap if set to <c>true</c> .
            </param>
            <param name="topCap">
            Include the top cap if set to <c>true</c> .
            </param>
            <param name="thetaDiv">
            The number of divisions around the cone.
            </param>
            <remarks>
            See http://en.wikipedia.org/wiki/Cone_(geometry).
            </remarks>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.AddCone(SharpDX.Vector3,SharpDX.Vector3,System.Double,System.Boolean,System.Int32)">
            <summary>
            Adds a cone.
            </summary>
            <param name="origin">The origin point.</param>
            <param name="apex">The apex point.</param>
            <param name="baseRadius">The base radius.</param>
            <param name="baseCap">
            Include a base cap if set to <c>true</c> .
            </param>
            <param name="thetaDiv">The theta div.</param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.AddCubeFace(SharpDX.Vector3,SharpDX.Vector3,SharpDX.Vector3,System.Double,System.Double,System.Double)">
            <summary>
            Adds a cube face.
            </summary>
            <param name="center">
            The center of the cube.
            </param>
            <param name="normal">
            The normal vector for the face.
            </param>
            <param name="up">
            The up vector for the face.
            </param>
            <param name="dist">
            The distance from the center of the cube to the face.
            </param>
            <param name="width">
            The width of the face.
            </param>
            <param name="height">
            The height of the face.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.AddCube(HelixToolkit.Wpf.SharpDX.BoxFaces)">
            <summary>
            Add a Cube, only with specified Faces.
            </summary>
            <param name="faces">The Faces to create (default all Faces)</param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.AddCylinder(SharpDX.Vector3,SharpDX.Vector3,System.Double,System.Int32)">
            <summary>
            Adds a cylinder to the mesh.
            </summary>
            <param name="p1">
            The first point.
            </param>
            <param name="p2">
            The second point.
            </param>
            <param name="diameter">
            The diameters.
            </param>
            <param name="thetaDiv">
            The number of divisions around the cylinder.
            </param>
            <remarks>
            See http://en.wikipedia.org/wiki/Cylinder_(geometry).
            </remarks>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.AddCylinder(SharpDX.Vector3,SharpDX.Vector3,System.Double,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Adds a cylinder to the mesh.
            </summary>
            <param name="p1">
            The first point.
            </param>
            <param name="p2">
            The second point.
            </param>
            <param name="radius">
            The diameters.
            </param>
            <param name="thetaDiv">
            The number of divisions around the cylinder.
            </param>
            <param name="cap1">
            The first Cap.
            </param>
            <param name="cap2">
            The second Cap.
            </param>
            <remarks>
            See http://en.wikipedia.org/wiki/Cylinder_(geometry).
            </remarks>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.AddDodecahedron(SharpDX.Vector3,SharpDX.Vector3,SharpDX.Vector3,System.Double)">
            <summary>
            Generate a Dodecahedron
            </summary>
            <param name="center">The Center of the Dodecahedron</param>
            <param name="forward">The Direction to the first Point (normalized).</param>
            <param name="up">The Up-Dirextion (normalized, perpendicular to the forward Direction)</param>
            <param name="sideLength">Length of the Edges of the Dodecahedron</param>
            <remarks>
            See:
            https://en.wikipedia.org/wiki/Dodecahedron
            https://en.wikipedia.org/wiki/Pentagon
            https://en.wikipedia.org/wiki/Isosceles_triangle
            </remarks>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.AddEdges(System.Collections.Generic.IList{SharpDX.Vector3},System.Collections.Generic.IList{System.Int32},System.Double,System.Int32)">
            <summary>
            Adds a collection of edges as cylinders.
            </summary>
            <param name="points">
            The points.
            </param>
            <param name="edges">
            The edge indices.
            </param>
            <param name="diameter">
            The diameter of the cylinders.
            </param>
            <param name="thetaDiv">
            The number of divisions around the cylinders.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.AddEllipsoid(SharpDX.Vector3,System.Double,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Adds an ellipsoid.
            </summary>
            <param name="center">
            The center of the ellipsoid.
            </param>
            <param name="radiusx">
            The x radius of the ellipsoid.
            </param>
            <param name="radiusy">
            The y radius of the ellipsoid.
            </param>
            <param name="radiusz">
            The z radius of the ellipsoid.
            </param>
            <param name="thetaDiv">
            The number of divisions around the ellipsoid.
            </param>
            <param name="phiDiv">
            The number of divisions from top to bottom of the ellipsoid.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.AddExtrudedGeometry(System.Collections.Generic.IList{SharpDX.Vector2},SharpDX.Vector3,SharpDX.Vector3,SharpDX.Vector3)">
            <summary>
            Adds an extruded surface of the specified curve.
            </summary>
            <param name="points">
            The 2D points describing the curve to extrude.
            </param>
            <param name="xaxis">
            The x-axis.
            </param>
            <param name="p0">
            The start origin of the extruded surface.
            </param>
            <param name="p1">
            The end origin of the extruded surface.
            </param>
            <remarks>
            The y-axis is determined by the cross product between the specified x-axis and the p1-origin vector.
            </remarks>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.AddFacePZ">
            <summary>
            Add a Face in positive Z-Direction.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.AddFaceNZ">
            <summary>
            Add a Face in negative Z-Direction.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.AddFacePX">
            <summary>
            Add a Face in positive X-Direction.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.AddFaceNX">
            <summary>
            Add a Face in negative X-Direction.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.AddFacePY">
            <summary>
            Add a Face in positive Y-Direction.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.AddFaceNY">
            <summary>
            Add a Face in negative Y-Direction.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.AddExtrudedSegments(System.Collections.Generic.IList{SharpDX.Vector2},SharpDX.Vector3,SharpDX.Vector3,SharpDX.Vector3)">
            <summary>
            Adds an extruded surface of the specified line segments.
            </summary>
            <param name="points">The 2D points describing the line segments to extrude. The number of points must be even.</param>
            <param name="axisX">The x-axis.</param>
            <param name="p0">The start origin of the extruded surface.</param>
            <param name="p1">The end origin of the extruded surface.</param>
            <remarks>The y-axis is determined by the cross product between the specified x-axis and the p1-origin vector.</remarks>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.AddLoftedGeometry(System.Collections.Generic.IList{System.Collections.Generic.IList{SharpDX.Vector3}},System.Collections.Generic.IList{System.Collections.Generic.IList{SharpDX.Vector3}},System.Collections.Generic.IList{System.Collections.Generic.IList{SharpDX.Vector2}})">
            <summary>
            Adds a lofted surface.
            </summary>
            <param name="positionsList">
            List of lofting sections.
            </param>
            <param name="normalList">
            The normal list.
            </param>
            <param name="textureCoordinateList">
            The texture coordinate list.
            </param>
            <remarks>
            See http://en.wikipedia.org/wiki/Loft_(3D).
            </remarks>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.AddNode(SharpDX.Vector3,SharpDX.Vector3,SharpDX.Vector2)">
            <summary>
            Adds a single node.
            </summary>
            <param name="position">
            The position.
            </param>
            <param name="normal">
            The normal.
            </param>
            <param name="textureCoordinate">
            The texture coordinate.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.AddOctahedron(SharpDX.Vector3,SharpDX.Vector3,SharpDX.Vector3,System.Double,System.Double)">
            <summary>
            Adds an octahedron.
            </summary>
            <param name="center">The center.</param>
            <param name="forward">The normal vector.</param>
            <param name="up">The up vector.</param>
            <param name="sideLength">Length of the side.</param>
            <param name="height">The half height of the octahedron.</param>
            <remarks>See <a href="http://en.wikipedia.org/wiki/Octahedron">Octahedron</a>.</remarks>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.AddPipe(SharpDX.Vector3,SharpDX.Vector3,System.Double,System.Double,System.Int32)">
            <summary>
            Adds a (possibly hollow) pipe.
            </summary>
            <param name="point1">
            The start point.
            </param>
            <param name="point2">
            The end point.
            </param>
            <param name="innerDiameter">
            The inner diameter.
            </param>
            <param name="diameter">
            The outer diameter.
            </param>
            <param name="thetaDiv">
            The number of divisions around the pipe.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.AddPipes(System.Collections.Generic.IList{SharpDX.Vector3},System.Collections.Generic.IList{System.Int32},System.Double,System.Int32)">
            <summary>
            Adds a collection of edges as cylinders.
            </summary>
            <param name="points">
            The points.
            </param>
            <param name="edges">
            The edge indices.
            </param>
            <param name="diameter">
            The diameter of the cylinders.
            </param>
            <param name="thetaDiv">
            The number of divisions around the cylinders.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.AddPolygon(System.Collections.Generic.IList{SharpDX.Vector2},SharpDX.Vector3,SharpDX.Vector3,SharpDX.Vector3)">
            <summary>
            Adds a polygon.
            </summary>
            <param name="points">The 2D points defining the polygon.</param>
            <param name="axisX">The x axis.</param>
            <param name="axisY">The y axis.</param>
            <param name="origin">The origin.</param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.AddPolygon(System.Collections.Generic.IList{SharpDX.Vector3})">
            <summary>
            Adds a polygon.
            </summary>
            <param name="points">
            The points of the polygon.
            </param>
            <remarks>
            If the number of points is greater than 4, a triangle fan is used.
            </remarks>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.AddPolygon(System.Collections.Generic.IList{System.Int32})">
            <summary>
            Adds a polygon specified by vertex index (uses a triangle fan).
            </summary>
            <param name="vertexIndices">The vertex indices.</param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.AddPolygonByCuttingEars(System.Collections.Generic.IList{System.Int32})">
            <summary>
            Adds a polygon defined by vertex indices (uses the cutting ears algorithm).
            </summary>
            <param name="vertexIndices">The vertex indices.</param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.AddPolygonByTriangulation(System.Collections.Generic.IList{System.Int32})">
            <summary>
            Adds a polygon defined by vertex indices (uses the sweep line algorithm).
            </summary>
            <param name="vertexIndices">The vertex indices.</param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.AddPyramid(SharpDX.Vector3,System.Double,System.Double,System.Boolean)">
            <summary>
            Adds a pyramid.
            </summary>
            <param name="center">
            The center.
            </param>
            <param name="sideLength">
            Length of the sides of the pyramid.
            </param>
            <param name="height">
            The height of the pyramid.
            </param>
            <param name="closeBase">
            Add triangles to the base of the pyramid or not.
            </param>
            <remarks>
            See http://en.wikipedia.org/wiki/Pyramid_(geometry).
            </remarks>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.AddPyramid(SharpDX.Vector3,SharpDX.Vector3,SharpDX.Vector3,System.Double,System.Double,System.Boolean)">
            <summary>
            Adds a pyramid.
            </summary>
            <param name="center">The center.</param>
            <param name="forward">The normal vector (normalized).</param>
            <param name="up">The 'up' vector (normalized).</param>
            <param name="sideLength">Length of the sides of the pyramid.</param>
            <param name="height">The height of the pyramid.</param>
            <param name="closeBase">Add triangles to the base of the pyramid or not.</param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.AddQuad(System.Collections.Generic.IList{System.Int32})">
            <summary>
            Adds a quad (exactely 4 indices)
            </summary>
            <param name="vertexIndices">The vertex indices.</param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.AddQuad(SharpDX.Vector3,SharpDX.Vector3,SharpDX.Vector3,SharpDX.Vector3)">
            <summary>
            Adds a quadrilateral polygon.
            </summary>
            <param name="p0">
            The first point.
            </param>
            <param name="p1">
            The second point.
            </param>
            <param name="p2">
            The third point.
            </param>
            <param name="p3">
            The fourth point.
            </param>
            <remarks>
            See http://en.wikipedia.org/wiki/Quadrilateral.
            </remarks>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.AddQuad(SharpDX.Vector3,SharpDX.Vector3,SharpDX.Vector3,SharpDX.Vector3,SharpDX.Vector2,SharpDX.Vector2,SharpDX.Vector2,SharpDX.Vector2)">
            <summary>
            Adds a quadrilateral polygon.
            </summary>
            <param name="p0">
            The first point.
            </param>
            <param name="p1">
            The second point.
            </param>
            <param name="p2">
            The third point.
            </param>
            <param name="p3">
            The fourth point.
            </param>
            <param name="uv0">
            The first texture coordinate.
            </param>
            <param name="uv1">
            The second texture coordinate.
            </param>
            <param name="uv2">
            The third texture coordinate.
            </param>
            <param name="uv3">
            The fourth texture coordinate.
            </param>
            <remarks>
            See http://en.wikipedia.org/wiki/Quadrilateral.
            </remarks>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.AddQuads(System.Collections.Generic.IList{SharpDX.Vector3},System.Collections.Generic.IList{SharpDX.Vector3},System.Collections.Generic.IList{SharpDX.Vector2})">
            <summary>
            Adds a list of quadrilateral polygons.
            </summary>
            <param name="quadPositions">
            The points.
            </param>
            <param name="quadNormals">
            The normal vectors.
            </param>
            <param name="quadTextureCoordinates">
            The texture coordinates.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.AddRectangularMesh(System.Collections.Generic.IList{SharpDX.Vector3},System.Int32)">
            <summary>
            Adds a rectangular mesh (m x n points).
            </summary>
            <param name="points">
            The one-dimensional array of points. The points are stored row-by-row.
            </param>
            <param name="columns">
            The number of columns in the rectangular mesh.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.AddRectangularMesh(SharpDX.Vector3[0:,0:],SharpDX.Vector2[0:,0:],System.Boolean,System.Boolean)">
            <summary>
            Adds a rectangular mesh defined by a two-dimensional array of points.
            </summary>
            <param name="points">
            The points.
            </param>
            <param name="texCoords">
            The texture coordinates (optional).
            </param>
            <param name="closed0">
            set to <c>true</c> if the mesh is closed in the first dimension.
            </param>
            <param name="closed1">
            set to <c>true</c> if the mesh is closed in the second dimension.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.AddRectangularMesh(System.Collections.Generic.IList{SharpDX.Vector3},System.Int32,System.Boolean)">
            <summary>
            Adds a rectangular mesh (m x n points).
            </summary>
            <param name="points">
            The one-dimensional array of points. The points are stored row-by-row.
            </param>
            <param name="columns">
            The number of columns in the rectangular mesh.
            </param>
            <param name="flipTriangles">
            Flip the Triangles.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.AddRectangularMesh(HelixToolkit.Wpf.SharpDX.BoxFaces,System.Int32,System.Int32,System.Double,System.Double,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Generates a rectangles mesh on the axis-aligned plane given by the box-face.
            </summary>
            <param name="plane">Box face which determines the plane the grid lies on.</param>
            <param name="columns">width of the grid, i.e. horizontal resolution </param>
            <param name="rows">height of the grid, i.e. vertical resolution</param>
            <param name="width">total size in horizontal </param>
            <param name="height">total vertical size</param>
            <param name="flipTriangles">flips the triangle faces</param>
            <param name="flipTexCoordsUAxis">flips the u-axis (horizontal) of the texture coords.</param>
            <param name="flipTexCoordsVAxis">flips the v-axis (vertical) of the tex.coords.</param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.AddRectangularMeshNormals(System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds normal vectors for a rectangular mesh.
            </summary>
            <param name="index0">
            The index 0.
            </param>
            <param name="rows">
            The number of rows.
            </param>
            <param name="columns">
            The number of columns.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.AddRectangularMeshTextureCoordinates(System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Adds texture coordinates for a rectangular mesh.
            </summary>
            <param name="rows">
            The number of rows.
            </param>
            <param name="columns">
            The number of columns.
            </param>
            <param name="flipRowsAxis">
            Flip the Rows.
            </param>
            <param name="flipColumnsAxis">
            Flip the Columns.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.AddRectangularMeshTriangleIndices(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Add triangle indices for a rectangular mesh.
            </summary>
            <param name="index0">
            The index offset.
            </param>
            <param name="rows">
            The number of rows.
            </param>
            <param name="columns">
            The number of columns.
            </param>
            <param name="isSpherical">
            set the flag to true to create a sphere mesh (triangles at top and bottom).
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.AddRectangularMeshTriangleIndices(System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Adds triangular indices for a rectangular mesh.
            </summary>
            <param name="index0">
            The index 0.
            </param>
            <param name="rows">
            The rows.
            </param>
            <param name="columns">
            The columns.
            </param>
            <param name="rowsClosed">
            True if rows are closed.
            </param>
            <param name="columnsClosed">
            True if columns are closed.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.AddRectangularMeshTriangleIndicesFlipped(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Add triangle indices for a rectangular mesh with flipped triangles.
            </summary>
            <param name="index0">
            The index offset.
            </param>
            <param name="rows">
            The number of rows.
            </param>
            <param name="columns">
            The number of columns.
            </param>
            <param name="isSpherical">
            set the flag to true to create a sphere mesh (triangles at top and bottom).
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.AddRegularIcosahedron(SharpDX.Vector3,System.Double,System.Boolean)">
            <summary>
            Adds a regular icosahedron.
            </summary>
            <param name="center">
            The center.
            </param>
            <param name="radius">
            The radius.
            </param>
            <param name="shareVertices">
            Share vertices if set to <c>true</c> .
            </param>
            <remarks>
            See <a href="http://en.wikipedia.org/wiki/Icosahedron">Wikipedia</a> and <a href="http://www.gamedev.net/community/forums/topic.asp?topic_id=283350">link</a>.
            </remarks>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.AddRevolvedGeometry(System.Collections.Generic.IList{SharpDX.Vector2},System.Collections.Generic.IList{System.Double},SharpDX.Vector3,SharpDX.Vector3,System.Int32)">
            <summary>
            Adds a surface of revolution.
            </summary>
            <param name="points">The points (x coordinates are distance from the origin along the axis of revolution, y coordinates are radius, )</param>
            <param name="textureValues">The v texture coordinates, one for each point in the <paramref name="points" /> list.</param>
            <param name="origin">The origin of the revolution axis.</param>
            <param name="direction">The direction of the revolution axis.</param>
            <param name="thetaDiv">The number of divisions around the mesh.</param>
            <remarks>
            See http://en.wikipedia.org/wiki/Surface_of_revolution.
            </remarks>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.AddSphere(SharpDX.Vector3,System.Double,System.Int32,System.Int32)">
            <summary>
            Adds a sphere.
            </summary>
            <param name="center">
            The center of the sphere.
            </param>
            <param name="radius">
            The radius of the sphere.
            </param>
            <param name="thetaDiv">
            The number of divisions around the sphere.
            </param>
            <param name="phiDiv">
            The number of divisions from top to bottom of the sphere.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.AddSubdivisionSphere(SharpDX.Vector3,System.Double,System.Int32)">
            <summary>
            Adds a sphere (by subdividing a regular icosahedron).
            </summary>
            <param name="center">
            The center of the sphere.
            </param>
            <param name="radius">
            The radius of the sphere.
            </param>
            <param name="subdivisions">
            The number of triangular subdivisions of the original icosahedron.
            </param>
            <remarks>
            See <a href="http://www.fho-emden.de/~hoffmann/ikos27042002.pdf">link</a>.
            </remarks>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.AddSurfaceOfRevolution(SharpDX.Vector3,SharpDX.Vector3,System.Collections.Generic.IList{SharpDX.Vector2},System.Collections.Generic.IList{System.Int32},System.Int32,System.Collections.Generic.IList{System.Double})">
            <summary>
            Adds a surface of revolution.
            </summary>
            <param name="origin">The origin.</param>
            <param name="axis">The axis.</param>
            <param name="section">The points defining the curve to revolve.</param>
            <param name="sectionIndices">The indices of the line segments of the section.</param>
            <param name="thetaDiv">The number of divisions.</param>
            <param name="textureValues">The texture values.</param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.AddTetrahedron(SharpDX.Vector3,SharpDX.Vector3,SharpDX.Vector3,System.Double)">
            <summary>
            Add a tetrahedron.
            </summary>
            <param name="center">The Center of Mass.</param>
            <param name="forward">Direction to first Base-Point (in Base-Plane).</param>
            <param name="up">Up Vector.</param>
            <param name="sideLength">The Sidelength.</param>
            <remarks>
            See https://en.wikipedia.org/wiki/Tetrahedron and
            https://en.wikipedia.org/wiki/Equilateral_triangle.
            </remarks>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.AddTorus(System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Adds a torus.
            </summary>
            <param name="torusDiameter">The diameter of the torus.</param>
            <param name="tubeDiameter">The diameter of the torus "tube".</param>
            <param name="thetaDiv">The number of subdivisions around the torus.</param>
            <param name="phiDiv">The number of subdividions of the torus' "tube.</param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.AddTriangle(System.Collections.Generic.IList{System.Int32})">
            <summary>
            Adds a triangle (exactely 3 indices)
            </summary>
            <param name="vertexIndices">The vertex indices.</param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.AddTriangle(SharpDX.Vector3,SharpDX.Vector3,SharpDX.Vector3)">
            <summary>
            Adds a triangle.
            </summary>
            <param name="p0">
            The first point.
            </param>
            <param name="p1">
            The second point.
            </param>
            <param name="p2">
            The third point.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.AddTriangle(SharpDX.Vector3,SharpDX.Vector3,SharpDX.Vector3,SharpDX.Vector2,SharpDX.Vector2,SharpDX.Vector2)">
            <summary>
            Adds a triangle.
            </summary>
            <param name="p0">
            The first point.
            </param>
            <param name="p1">
            The second point.
            </param>
            <param name="p2">
            The third point.
            </param>
            <param name="uv0">
            The first texture coordinate.
            </param>
            <param name="uv1">
            The second texture coordinate.
            </param>
            <param name="uv2">
            The third texture coordinate.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.AddTriangleFan(System.Collections.Generic.IList{System.Int32})">
            <summary>
            Adds a triangle fan.
            </summary>
            <param name="vertices">
            The vertex indices of the triangle fan.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.AddTriangleFan(System.Collections.Generic.IList{SharpDX.Vector3},System.Collections.Generic.IList{SharpDX.Vector3},System.Collections.Generic.IList{SharpDX.Vector2})">
            <summary>
            Adds a triangle fan to the mesh
            </summary>
            <param name="fanPositions">
            The points of the triangle fan.
            </param>
            <param name="fanNormals">
            The normal vectors of the triangle fan.
            </param>
            <param name="fanTextureCoordinates">
            The texture coordinates of the triangle fan.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.AddTriangles(System.Collections.Generic.IList{SharpDX.Vector3},System.Collections.Generic.IList{SharpDX.Vector3},System.Collections.Generic.IList{SharpDX.Vector2})">
            <summary>
            Adds a list of triangles.
            </summary>
            <param name="trianglePositions">
            The points (the number of points must be a multiple of 3).
            </param>
            <param name="triangleNormals">
            The normal vectors (corresponding to the points).
            </param>
            <param name="triangleTextureCoordinates">
            The texture coordinates (corresponding to the points).
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.AddTriangleStrip(System.Collections.Generic.IList{SharpDX.Vector3},System.Collections.Generic.IList{SharpDX.Vector3},System.Collections.Generic.IList{SharpDX.Vector2})">
            <summary>
            Adds a triangle strip to the mesh.
            </summary>
            <param name="stripPositions">
            The points of the triangle strip.
            </param>
            <param name="stripNormals">
            The normal vectors of the triangle strip.
            </param>
            <param name="stripTextureCoordinates">
            The texture coordinates of the triangle strip.
            </param>
            <remarks>
            See http://en.wikipedia.org/wiki/Triangle_strip.
            </remarks>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.AddTube(System.Collections.Generic.IList{SharpDX.Vector3},System.Double[],System.Double[],System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Adds a tube.
            </summary>
            <param name="path">
            A list of points defining the centers of the tube.
            </param>
            <param name="values">
            The texture coordinate X-values.
            </param>
            <param name="diameters">
            The diameters.
            </param>
            <param name="thetaDiv">
            The number of divisions around the tube.
            </param>
            <param name="isTubeClosed">
            Set to true if the tube path is closed.
            </param>
            <param name="frontCap">
            Create a front Cap or not.
            </param>
            <param name="backCap">
            Create a back Cap or not.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.AddTube(System.Collections.Generic.IList{SharpDX.Vector3},System.Double,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Adds a tube.
            </summary>
            <param name="path">
            A list of points defining the centers of the tube.
            </param>
            <param name="diameter">
            The diameter of the tube.
            </param>
            <param name="thetaDiv">
            The number of divisions around the tube.
            </param>
            <param name="isTubeClosed">
            Set to true if the tube path is closed.
            </param>
            <param name="frontCap">
            Generate front Cap.
            </param>
            <param name="backCap">
            Generate back Cap.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.AddTube(System.Collections.Generic.IList{SharpDX.Vector3},System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{SharpDX.Vector2},System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Adds a tube with a custom section.
            </summary>
            <param name="path">
            A list of points defining the centers of the tube.
            </param>
            <param name="values">
            The texture coordinate X values (optional).
            </param>
            <param name="diameters">
            The diameters (optional).
            </param>
            <param name="section">
            The section to extrude along the tube path.
            </param>
            <param name="isTubeClosed">
            If the tube is closed set to <c>true</c> .
            </param>
            <param name="isSectionClosed">
            if set to <c>true</c> [is section closed].
            </param>
            <param name="frontCap">
            Create a front Cap or not.
            </param>
            <param name="backCap">
            Create a back Cap or not.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.AddTube(System.Collections.Generic.IList{SharpDX.Vector3},System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{SharpDX.Vector2},SharpDX.Vector3,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Adds a tube with a custom section.
            </summary>
            <param name="path">A list of points defining the centers of the tube.</param>
            <param name="angles">The rotation of the section as it moves along the path</param>
            <param name="values">The texture coordinate X values (optional).</param>
            <param name="diameters">The diameters (optional).</param>
            <param name="section">The section to extrude along the tube path.</param>
            <param name="sectionXAxis">The initial alignment of the x-axis of the section into the
            3D viewport</param>
            <param name="isTubeClosed">If the tube is closed set to <c>true</c> .</param>
            <param name="isSectionClosed">if set to <c>true</c> [is section closed].</param>
            <param name="frontCap">
            Create a front Cap or not.
            </param>
            <param name="backCap">
            Create a back Cap or not.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.Append(HelixToolkit.Wpf.SharpDX.MeshBuilder)">
            <summary>
            Appends the specified mesh.
            </summary>
            <param name="mesh">
            The mesh.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.Append(HelixToolkit.Wpf.SharpDX.MeshGeometry3D)">
            <summary>
            Appends the specified mesh.
            </summary>
            <param name="mesh">
            The mesh.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.Append(System.Collections.Generic.IList{SharpDX.Vector3},System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{SharpDX.Vector3},System.Collections.Generic.IList{SharpDX.Vector2})">
            <summary>
            Appends the specified points and triangles.
            </summary>
            <param name="positionsToAppend">
            The points to append.
            </param>
            <param name="triangleIndicesToAppend">
            The triangle indices to append.
            </param>
            <param name="normalsToAppend">
            The normal vectors to append.
            </param>
            <param name="textureCoordinatesToAppend">
            The texture coordinates to append.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.ChamferCorner(SharpDX.Vector3,System.Double,System.Double,System.Collections.Generic.IList{SharpDX.Vector3})">
            <summary>
            Chamfers the specified corner (experimental code).
            </summary>
            <param name="p">
            The corner point.
            </param>
            <param name="d">
            The chamfer distance.
            </param>
            <param name="eps">
            The corner search limit distance.
            </param>
            <param name="chamferPoints">
            If this parameter is provided, the collection will be filled with the generated chamfer points.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.CheckPerformanceLimits">
            <summary>
            Checks the performance limits.
            </summary>
            <remarks>
            See <a href="https://msdn.microsoft.com/en-us/library/bb613553(v=vs.100).aspx">MSDN</a>.
            Try to keep mesh sizes under these limits:
            Positions : 20,001 point instances
            TriangleIndices : 60,003 integer instances
            </remarks>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.FindCornerNormal(SharpDX.Vector3,System.Double)">
            <summary>
            Finds the average normal to the specified corner (experimental code).
            </summary>
            <param name="p">
            The corner point.
            </param>
            <param name="eps">
            The corner search limit distance.
            </param>
            <returns>
            The normal.
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.NoSharedVertices">
            <summary>
            Makes sure no triangles share the same vertex.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.Scale(System.Double,System.Double,System.Double)">
            <summary>
            Scales the positions (and normal vectors).
            </summary>
            <param name="scaleX">
            The X scale factor.
            </param>
            <param name="scaleY">
            The Y scale factor.
            </param>
            <param name="scaleZ">
            The Z scale factor.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.Subdivide4">
            <summary>
            Subdivides each triangle into four sub-triangles.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.SubdivideBarycentric">
            <summary>
            Subdivides each triangle into six triangles. Adds a vertex at the midpoint of each triangle.
            </summary>
            <remarks>
            See <a href="http://en.wikipedia.org/wiki/Barycentric_subdivision">wikipedia</a>.
            </remarks>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.SubdivideLinear(System.Boolean)">
            <summary>
            Performs a linear subdivision of the mesh.
            </summary>
            <param name="barycentric">
            Add a vertex in the center if set to <c>true</c> .
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.ToMesh">
            <summary>
            Generate a MeshGeometry3D from the generated Data.
            </summary>
            <returns>The MeshGeometry3D.</returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshBuilder.ToMeshGeometry3D">
            <summary>
            Converts the geometry to a <see cref="T:HelixToolkit.Wpf.SharpDX.MeshGeometry3D"/> .        
            </summary>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.MeshGeometryHelper">
            <summary>
            Provides helper methods for mesh geometries.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshGeometryHelper.CalculateNormals(HelixToolkit.Wpf.SharpDX.MeshGeometry3D)">
            <summary>
            Calculates the normal vectors.
            </summary>
            <param name="mesh">
            The mesh.
            </param>
            <returns>
            Collection of normal vectors.
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshGeometryHelper.CalculateNormals(System.Collections.Generic.IList{SharpDX.Vector3},System.Collections.Generic.IList{System.Int32})">
            <summary>
            Calculates the normal vectors.
            </summary>
            <param name="positions">
            The positions.
            </param>
            <param name="triangleIndices">
            The triangle indices.
            </param>
            <returns>
            Collection of normal vectors.
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshGeometryHelper.FindBorderEdges(HelixToolkit.Wpf.SharpDX.MeshGeometry3D)">
            <summary>
            Finds edges that are only connected to one triangle.
            </summary>
            <param name="mesh">
            A mesh geometry.
            </param>
            <returns>
            The edge indices for the edges that are only used by one triangle.
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshGeometryHelper.FindEdges(HelixToolkit.Wpf.SharpDX.MeshGeometry3D)">
            <summary>
            Finds all edges in the mesh (each edge is only included once).
            </summary>
            <param name="mesh">
            A mesh geometry.
            </param>
            <returns>
            The edge indices (minimum index first).
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshGeometryHelper.FindSharpEdges(HelixToolkit.Wpf.SharpDX.MeshGeometry3D,System.Double)">
            <summary>
            Finds all edges where the angle between adjacent triangle normal vectors.
            is larger than minimumAngle
            </summary>
            <param name="mesh">
            A mesh geometry.
            </param>
            <param name="minimumAngle">
            The minimum angle between the normal vectors of two adjacent triangles (degrees).
            </param>
            <returns>
            The edge indices.
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshGeometryHelper.NoSharedVertices(HelixToolkit.Wpf.SharpDX.MeshGeometry3D)">
            <summary>
            Creates a new mesh where no vertices are shared.
            </summary>
            <param name="input">
            The input mesh.
            </param>
            <returns>
            A new mesh.
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshGeometryHelper.Simplify(HelixToolkit.Wpf.SharpDX.MeshGeometry3D,System.Single)">
            <summary>
            Simplifies the specified mesh.
            </summary>
            <param name="mesh">
            The mesh.
            </param>
            <param name="eps">
            The tolerance.
            </param>
            <returns>
            A simplified mesh.
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshGeometryHelper.Validate(HelixToolkit.Wpf.SharpDX.MeshGeometry3D)">
            <summary>
            Validates the specified mesh.
            </summary>
            <param name="mesh">The mesh.</param>
            <returns>Validation report or null if no issues were found.</returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshGeometryHelper.Cut(HelixToolkit.Wpf.SharpDX.MeshGeometry3D,SharpDX.Vector3,SharpDX.Vector3)">
            <summary>
            Cuts the mesh with the specified plane.
            </summary>
            <param name="mesh">
            The mesh.
            </param>
            <param name="plane">
            The plane origin.
            </param>
            <param name="normal">
            The plane normal.
            </param>
            <returns>
            The <see cref="T:HelixToolkit.Wpf.SharpDX.MeshGeometry3D"/>.
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshGeometryHelper.GetContourSegments(HelixToolkit.Wpf.SharpDX.MeshGeometry3D,SharpDX.Vector3,SharpDX.Vector3)">
            <summary>
            Gets the contour segments.
            </summary>
            <param name="mesh">
            The mesh.
            </param>
            <param name="plane">
            The plane origin.
            </param>
            <param name="normal">
            The plane normal.
            </param>
            <returns>
            The segments of the contour.
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshGeometryHelper.CombineSegments(System.Collections.Generic.IList{SharpDX.Vector3},System.Single)">
            <summary>
            Combines the segments.
            </summary>
            <param name="segments">
            The segments.
            </param>
            <param name="eps">
            The tolerance.
            </param>
            <returns>
            Enumerated connected contour curves.
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshGeometryHelper.CreateKey(System.UInt32,System.UInt32)">
            <summary>
            Create a 64-bit key from two 32-bit indices
            </summary>
            <param name="i0">
            The i 0.
            </param>
            <param name="i1">
            The i 1.
            </param>
            <returns>
            The create key.
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshGeometryHelper.ReverseKey(System.UInt64,System.UInt32@,System.UInt32@)">
            <summary>
            Extract two 32-bit indices from the 64-bit key
            </summary>
            <param name="key">
            The key.
            </param>
            <param name="i0">
            The i 0.
            </param>
            <param name="i1">
            The i 1.
            </param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshGeometryHelper.FindConnectedSegment(System.Collections.Generic.IList{SharpDX.Vector3},SharpDX.Vector3,System.Single)">
            <summary>
            Finds the nearest connected segment to the specified point.
            </summary>
            <param name="segments">
            The segments.
            </param>
            <param name="point">
            The point.
            </param>
            <param name="eps">
            The tolerance.
            </param>
            <returns>
            The index of the nearest point.
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshGeometryHelper.RemoveIsolatedVertices(HelixToolkit.Wpf.SharpDX.MeshGeometry3D)">
            <summary>
            Remove isolated(not connected to any triangles) vertices
            </summary>
            <param name="mesh"></param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshGeometryHelper.RemoveIsolatedVertices(System.Collections.Generic.IList{SharpDX.Vector3},System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{SharpDX.Vector2},System.Collections.Generic.IList{SharpDX.Vector3},HelixToolkit.Wpf.SharpDX.Core.Vector3Collection@,HelixToolkit.Wpf.SharpDX.Core.IntCollection@,HelixToolkit.Wpf.SharpDX.Core.Vector2Collection@,HelixToolkit.Wpf.SharpDX.Core.Vector3Collection@)">
            <summary>
            Remove isolated(not connected to any triangles) vertices
            </summary>
            <param name="vertices"></param>
            <param name="triangles"></param>
            <param name="texture"></param>
            <param name="normals"></param>
            <param name="verticesOut"></param>
            <param name="trianglesOut"></param>
            <param name="textureOut"></param>
            <param name="normalOut"></param>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.MeshSimplification">
            <summary>
            Fast-Quadric-Mesh-Simplification, port from https://github.com/sp4cerat/Fast-Quadric-Mesh-Simplification
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshSimplification.#ctor(HelixToolkit.Wpf.SharpDX.MeshGeometry3D)">
            <summary>
            
            </summary>
            <param name="model"></param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshSimplification.Simplify(System.Boolean)">
            <summary>
            
            </summary>
            <param name="verbose"></param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshSimplification.Simplify(System.Int32,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Mesh Simplification using Fast-Quadric-Mesh-Simplification
            </summary>
            <param name="targetCount">Target Number of Triangles</param>
            <param name="aggressive">sharpness to increase the threshold, 5->8 are usually good, more iteration yields higher quality</param>
            <param name="verbose"></param>
            <param name="lossless"></param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.MeshSimplification.GetMesh">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.Polygon">
            <summary>
            Represents a 2D polygon.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Polygon.points">
            <summary>
            The points.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Polygon.Points">
            <summary>
            Gets or sets the points.
            </summary>
            <value>The points.</value>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Polygon.Triangulate">
            <summary>
            Triangulate the polygon by using the sweep line algorithm
            </summary>
            <returns>An index collection.</returns>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.Polygon3D">
            <summary>
            Represents a 3D polygon.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.Polygon3D.points">
            <summary>
            The points.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Polygon3D.#ctor">
            <summary>
            Initializes a new instance of the <see cref = "T:HelixToolkit.Wpf.SharpDX.Polygon3D" /> class.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Polygon3D.#ctor(System.Collections.Generic.IList{SharpDX.Vector3})">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Wpf.SharpDX.Polygon3D"/> class.
            </summary>
            <param name="pts">
            The PTS.
            </param>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Polygon3D.Points">
            <summary>
            Gets or sets the points.
            </summary>
            <value>The points.</value>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Polygon3D.Flatten">
            <summary>
            Flattens this polygon.
            </summary>
            <returns>
            The 2D polygon.
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Polygon3D.GetNormal">
            <summary>
            Gets the normal of the polygon.
            </summary>
            <returns>
            The normal.
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Polygon3D.IsPlanar">
            <summary>
            Determines whether this polygon is planar.
            </summary>
            <returns>
            The is planar.
            </returns>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.SweepLinePolygonTriangulator">
            <summary>
            Triangulate a simple Polygon with the Sweep-Line Algorithm
            </summary>
            <remarks>
            Based on http://www.cs.uu.nl/docs/vakken/ga/slides3.pdf
            References
            https://www.cs.ucsb.edu/~suri/cs235/Triangulation.pdf
            </remarks>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.SweepLinePolygonTriangulator.Epsilon">
            <summary>
            Range Extension when searching for the Helper and Edge
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.SweepLinePolygonTriangulator.Triangulate(System.Collections.Generic.IList{SharpDX.Vector2},System.Collections.Generic.List{System.Collections.Generic.List{SharpDX.Vector2}})">
            <summary>
            Perform the Triangulation of the Input.
            </summary>
            <param name="polygon">The Input Polygon</param>
            <param name="holes">The Input Polygon</param>
            <returns>List of Indices representing the Triangulation of the Polygon</returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.SweepLinePolygonTriangulator.TriangulateMonotone(HelixToolkit.Wpf.SharpDX.PolygonData)">
            <summary>
            Triangulate the y-Monotone Polygons.
            </summary>
            <param name="monoton">The y-Monotone Polygon to triangle</param>
            <returns>Index-List of Polygon Points (Indices from the original Polygon)</returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.SweepLinePolygonTriangulator.CalculateDiagonals(System.Collections.Generic.List{HelixToolkit.Wpf.SharpDX.PolygonPoint},System.Boolean)">
            <summary>
            Calculate the Diagonals to add inside the Polygon.
            </summary>
            <param name="events">The Events in sorted Form</param>
            <param name="sweepDown">True in the first Stage (sweeping down), false in the following Stages (sweeping up)</param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.SweepLinePolygonTriangulator.SplitIntoPolygons(HelixToolkit.Wpf.SharpDX.PolygonData,System.Collections.Generic.List{System.Tuple{System.Int32,System.Int32}})">
            <summary>
            Split Polygon into subpolagons using the calculated Diagonals
            </summary>
            <param name="poly">The Base-Polygon</param>
            <param name="diagonals">The Split-Diagonals</param>
            <returns>List of Subpolygons</returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.SweepLinePolygonTriangulator.BestEdge(HelixToolkit.Wpf.SharpDX.PolygonPoint,HelixToolkit.Wpf.SharpDX.PolygonEdge,System.Collections.Generic.List{HelixToolkit.Wpf.SharpDX.PolygonEdge})">
            <summary>
            For a Point, last used Edge and possible Edges, retrieve the best next Edge
            </summary>
            <param name="point">The current Point</param>
            <param name="lastEdge">The last used Edge</param>
            <param name="possibleEdges">The possible next Edges</param>
            <returns>Best next Edge</returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.SweepLinePolygonTriangulator.IsCCW(System.Collections.Generic.IList{SharpDX.Vector2})">
            <summary>
            Calculates the Orientation of a Polygon by usings it's (double-) Area as an Indicator.
            </summary>
            <param name="polygon">The Polygon.</param>
            <returns>True if the Polygon is present in a CCW manner.</returns>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.PolygonPointClass">
            <summary>
            Enumeration of PolygonPoint - Classes
            </summary>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.StatusHelper">
            <summary>
            Helper Class that is used in the calculation Process of the Diagonals.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.StatusHelper.EdgesHelpers">
            <summary>
            List of StatusHelperElements that are currently present at the Sweeper's Position
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.StatusHelper.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.StatusHelper.Add(HelixToolkit.Wpf.SharpDX.StatusHelperElement)">
            <summary>
            Adds a StatusHelperElement to the List
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.StatusHelper.Remove(HelixToolkit.Wpf.SharpDX.PolygonEdge)">
            <summary>
            Removes all StatusHelperElements with a specific Edge
            </summary>
            <param name="edge"></param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.StatusHelper.SearchLeft(HelixToolkit.Wpf.SharpDX.PolygonPoint)">
            <summary>
            Searches the nearest StatusHelperElement from the given Point
            </summary>
            <param name="point">The Point to search a StatusHelperElement for</param>
            <returns>The nearest StatusHelperElement that is positioned left of the Poin</returns>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.StatusHelperElement">
            <summary>
            Helper Class that is used in the calculation Process of the Diagonals.
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.StatusHelperElement.Edge">
            <summary>
            The Edge of the StatusHelperElement
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.StatusHelperElement.Helper">
            <summary>
            The Helper of the Edge is a Polygon Point
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.StatusHelperElement.mFactor">
            <summary>
            Factor used for x-Value Calculation
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.StatusHelperElement.Factor">
            <summary>
            Accessor for the Factor
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.StatusHelperElement.MinX">
            <summary>
            Used to early-skip the Search for the right Status and Helper
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.StatusHelperElement.#ctor(HelixToolkit.Wpf.SharpDX.PolygonEdge,HelixToolkit.Wpf.SharpDX.PolygonPoint)">
            <summary>
            Constructor taking an Edge and a Helper
            </summary>
            <param name="edge">The Edge of the StatusHelperElement</param>
            <param name="point">The Helper for the Edge of the StatusHelperElement</param>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.PolygonPoint">
            <summary>
            Helper Class for the PolygonData Object.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.PolygonPoint.mPoint">
            <summary>
            The actual Point of this PolygonPoint
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.PolygonPoint.Point">
            <summary>
            Accessor for the Point-Data
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.PolygonPoint.X">
            <summary>
            Accessor for the X-Coordinate of the Point
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.PolygonPoint.Y">
            <summary>
            Accessor for the Y-Coordinate of the Point
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.PolygonPoint.mEdgeOne">
            <summary>
            The "incoming" Edge of this PolygonPoint
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.PolygonPoint.EdgeOne">
            <summary>
            Accessor for the incoming Edge
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.PolygonPoint.mEdgeTwo">
            <summary>
            The "outgoing" Edge of this PolygonPoint
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.PolygonPoint.EdgeTwo">
            <summary>
            Accessor for the outgoing Edge
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.PolygonPoint.mIndex">
            <summary>
            The Index of this Point in the original Polygon
            that needs to be triangulated
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.PolygonPoint.Index">
            <summary>
            Accessor for the iriginal Point-Index
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.PolygonPoint.Last">
            <summary>
            The "last" neighboring Point, which is connected throught the incoming Edge
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.PolygonPoint.Next">
            <summary>
            The "next" neighboring Point, which is connected throught the outgoing Edge
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.PolygonPoint.op_LessThan(HelixToolkit.Wpf.SharpDX.PolygonPoint,HelixToolkit.Wpf.SharpDX.PolygonPoint)">
            <summary>
            Comparison Operator, that is used to determine the Class of the PolygonPoints
            </summary>
            <param name="first">The first PolygonPoint</param>
            <param name="second">The second PolygonPoint</param>
            <returns>Returns true if the first PolygonPoint is smaller, compared to the second PolygonPoint, false otherwise</returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.PolygonPoint.op_GreaterThan(HelixToolkit.Wpf.SharpDX.PolygonPoint,HelixToolkit.Wpf.SharpDX.PolygonPoint)">
            <summary>
            Comparison Operator, that is used to determine the Class of the PolygonPoints
            </summary>
            <param name="first">The first PolygonPoint</param>
            <param name="second">The second PolygonPoint</param>
            <returns>Returns true if the first PolygonPoint is bigger, compared to the second PolygonPoint, false otherwise</returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.PolygonPoint.#ctor(SharpDX.Vector2)">
            <summary>
            Constructor using a Point
            </summary>
            <param name="p">The Point-Data to use</param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.PolygonPoint.PointClass(System.Boolean)">
            <summary>
            Detrmines the Class of the PolygonPoint, depending on the sweeping Direction
            </summary>
            <param name="reverse">The Sweeping direction, top-to-bottom if false, bottom-to-top otherwise</param>
            <returns>The Class of the PolygonPoint</returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.PolygonPoint.isConvexPoint">
            <summary>
            Calculates for a Point, if it is a convex Point or not
            (the assumption is, that we are dealing with a CCW Polygon orientation!)
            </summary>
            <returns>Returns true, if convex, false if concave (or "reflex" Vertex)</returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.PolygonPoint.ToString">
            <summary>
            Override the ToString (for Debugging Purposes)
            </summary>
            <returns>String representing this Point</returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.PolygonPoint.CompareTo(HelixToolkit.Wpf.SharpDX.PolygonPoint)">
            <summary>
            Comparison of two Points, used to sort the Polygons from top to bottom (left to right)
            </summary>
            <param name="second">Other Point to compare to</param>
            <returns>-1 if this Point is bigger, 0 if the same, 1 if smaller</returns>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.PolygonEdge">
            <summary>
            Helper Class for the PolygonData Object.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.PolygonEdge.mPointOne">
            <summary>
            The "starting" Point of this Edge
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.PolygonEdge.PointOne">
            <summary>
            Accessor to the Startpoint of this Edge
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.PolygonEdge.mPointTwo">
            <summary>
            The "ending" Point of this Edge
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.PolygonEdge.PointTwo">
            <summary>
            Accessor to the Endpoint of this Edge
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.PolygonEdge.Last">
            <summary>
            The "last" neighboring Edge, which both share the Startpoint of this Edge
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.PolygonEdge.Next">
            <summary>
            The "next" neighboring Edge, which both share the Endpoint of this Edge
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.PolygonEdge.#ctor(HelixToolkit.Wpf.SharpDX.PolygonPoint,HelixToolkit.Wpf.SharpDX.PolygonPoint)">
            <summary>
            Constructor that takes both Points of the Edge
            </summary>
            <param name="one">The Startpoint</param>
            <param name="two">The Endpoint</param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.PolygonEdge.ToString">
            <summary>
            Override the ToString (for Debugging Purposes)
            </summary>
            <returns>String representing this Edge</returns>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.PolygonData">
            <summary>
            Helper Class for the Polygon-Triangulation.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.PolygonData.mPoints">
            <summary>
            The List of Polygonpoints that define this Polygon
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.PolygonData.Points">
            <summary>
            Accessor to the List of PolygonPoints
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.PolygonData.HasHoles">
            <summary>
            Are there Holes present
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.PolygonData.mHoles">
            <summary>
            The Holes of the Polygon
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.PolygonData.Holes">
            <summary>
            Access to the Holes
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.PolygonData.mNumBoundaryPoints">
            <summary>
            Number of initial Points on the Polygon Boundary
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.PolygonData.#ctor(System.Collections.Generic.List{SharpDX.Vector2},System.Collections.Generic.List{System.Int32})">
            <summary>
            Constructor that uses a List of Points and an optional List of Point-Indices
            </summary>
            <param name="points">The Polygon-Defining Points</param>
            <param name="indices">Optional List of Point-Indices</param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.PolygonData.#ctor(System.Collections.Generic.List{HelixToolkit.Wpf.SharpDX.PolygonPoint})">
            <summary>
            Constructor that takes a List of PolygonPoints
            Calls the first Constructor by splitting the Input-Information (Points and Indices)
            </summary>
            <param name="points">The PolygonPoints</param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.PolygonData.AddHole(System.Collections.Generic.List{SharpDX.Vector2})">
            <summary>
            Add Points of a Hole to the PolygonData
            </summary>
            <param name="points">The Points that define the Hole in the Polygon</param>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.HelixToolkitException">
            <summary>
            Represents errors that occurs in the Helix 3D Toolkit.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.HelixToolkitException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Wpf.SharpDX.HelixToolkitException"/> class.
            </summary>
            <param name="formatString">
            The format string.
            </param>
            <param name="args">
            The args.
            </param>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.ContourHelper">
            <summary>
            Provides functionality to calculate a contour slice through a 3 vertex facet.(Modified from HelixToolkit.Wpf version)
            </summary>
            <remarks>
            See <a href="http://paulbourke.net/papers/conrec/">CONREC</a> for further information.
            </remarks>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.ContourHelper.ResultIndices">
            <summary>
            Provides the indices for the various <see cref="T:HelixToolkit.Wpf.SharpDX.ContourHelper.ContourFacetResult"/> cases.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.ContourHelper.a">
            <summary>
            The parameter 'a' of the plane equation.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.ContourHelper.b">
            <summary>
            The parameter 'b' of the plane equation.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.ContourHelper.c">
            <summary>
            The parameter 'c' of the plane equation.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.ContourHelper.d">
            <summary>
            The parameter 'd' of the plane equation.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.ContourHelper.sides">
            <summary>
            The sides.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.ContourHelper.indices">
            <summary>
            The indices.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.ContourHelper.meshPositions">
            <summary>
            The original mesh positions.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.ContourHelper.meshNormals">
            <summary>
            The original mesh normal vectors.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.ContourHelper.meshTextureCoordinates">
            <summary>
            The original mesh texture coordinates.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.ContourHelper.points">
            <summary>
            The points.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.ContourHelper.normals">
            <summary>
            The normal vectors.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.ContourHelper.textures">
            <summary>
            The texture coordinates.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.ContourHelper.positionCount">
            <summary>
            The position count.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ContourHelper.#ctor(SharpDX.Vector3,SharpDX.Vector3,HelixToolkit.Wpf.SharpDX.MeshGeometry3D)">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Wpf.SharpDX.ContourHelper" /> class.
            </summary>
            <param name="planeOrigin">The plane origin.</param>
            <param name="planeNormal">The plane normal.</param>
            <param name="originalMesh">The original mesh.</param>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.ContourHelper.ContourFacetResult">
            <summary>
            The contour facet result.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.ContourHelper.ContourFacetResult.None">
            <summary>
            All of the points fall above the contour plane.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.ContourHelper.ContourFacetResult.ZeroOnly">
            <summary>
            Only the 0th point falls below the contour plane.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.ContourHelper.ContourFacetResult.OneAndTwo">
            <summary>
            The 1st and 2nd points fall below the contour plane.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.ContourHelper.ContourFacetResult.OneOnly">
            <summary>
            Only the 1st point falls below the contour plane.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.ContourHelper.ContourFacetResult.ZeroAndTwo">
            <summary>
            The 0th and 2nd points fall below the contour plane.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.ContourHelper.ContourFacetResult.TwoOnly">
            <summary>
            Only the second point falls below the contour plane.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.ContourHelper.ContourFacetResult.ZeroAndOne">
            <summary>
            The 0th and 1st points fall below the contour plane.
            </summary>
        </member>
        <member name="F:HelixToolkit.Wpf.SharpDX.ContourHelper.ContourFacetResult.All">
            <summary>
            All of the points fall below the contour plane.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ContourHelper.ContourFacet(System.Int32,System.Int32,System.Int32,SharpDX.Vector3[]@,SharpDX.Vector3[]@,SharpDX.Vector2[]@,System.Int32[]@)">
            <summary>
            Create a contour slice through a 3 vertex facet.
            </summary>
            <param name="index0">The 0th point index.</param>
            <param name="index1">The 1st point index.</param>
            <param name="index2">The 2nd point index.</param>
            <param name="newPositions">Any new positions that are created, when the contour plane slices through the vertex.</param>
            <param name="newNormals">Any new normal vectors that are created, when the contour plane slices through the vertex.</param>
            <param name="newTextureCoordinates">Any new texture coordinates that are created, when the contour plane slices through the vertex.</param>
            <param name="triangleIndices">Triangle indices for the triangle(s) above the plane.</param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ContourHelper.CalculatePoint(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Calculates a new point coordinate.
            </summary>
            <param name="firstPoint">
            The first point coordinate.
            </param>
            <param name="secondPoint">
            The second point coordinate.
            </param>
            <param name="firstSide">
            The first side.
            </param>
            <param name="secondSide">
            The second side.
            </param>
            <returns>The new coordinate.</returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ContourHelper.GetContourFacet">
            <summary>
            Gets the <see cref="T:HelixToolkit.Wpf.SharpDX.ContourHelper.ContourFacetResult"/> for the current facet.
            </summary>
            <returns>a facet result.</returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ContourHelper.SetData(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes the facet data and calculates the <see cref="F:HelixToolkit.Wpf.SharpDX.ContourHelper.sides"/> values from the specified triangle indices. 
            </summary>
            <param name="index0">The first triangle index of the facet.</param>
            <param name="index1">The second triangle index of the facet.</param>
            <param name="index2">The third triangle index of the facet.</param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ContourHelper.CreateNewPosition(System.Int32,System.Int32)">
            <summary>
            Calculates the position at the plane intersection for the side specified by two triangle indices.
            </summary>
            <param name="index0">The first index.</param>
            <param name="index1">The second index.</param>
            <returns>The interpolated position.</returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ContourHelper.CreateNewNormal(System.Int32,System.Int32)">
            <summary>
            Calculates the normal at the plane intersection for the side specified by two triangle indices.
            </summary>
            <param name="index0">The first index.</param>
            <param name="index1">The second index.</param>
            <returns>The interpolated vector.</returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ContourHelper.CreateNewTexture(System.Int32,System.Int32)">
            <summary>
            Calculates the texture coordinate at the plane intersection for the side specified by two triangle indices.
            </summary>
            <param name="index0">The first index.</param>
            <param name="index1">The second index.</param>
            <returns>The interpolated texture coordinate.</returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ContourHelper.IsSideAlone(System.Int32)">
            <summary>
            Determines whether the vertex at the specified index is at the opposite side of the other two vertices.
            </summary>
            <param name="index">The index.</param>
            <returns><c>true</c> if the vertex is on its own side.</returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.ContourHelper.AllSidesBelowContour">
            <summary>
            Determines whether all sides of the facet are below the contour.
            </summary>
            <returns><c>true</c> if all sides are below the contour.</returns>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.SimpleRingBuffer`1">
            <summary>
            A simple curcular ring buffer implementation
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.SimpleRingBuffer`1.Count">
            <summary>
            
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.SimpleRingBuffer`1.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.SimpleRingBuffer`1.Add(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns>If buffer full, return false</returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.SimpleRingBuffer`1.RemoveLast">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.SimpleRingBuffer`1.RemoveFirst">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.SimpleRingBuffer`1.Last">
            <summary>
            Get last added element
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.SimpleRingBuffer`1.First">
            <summary>
            Get first added element
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.SimpleRingBuffer`1.IsFull">
            <summary>
            If buffer is full
            </summary>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.SimpleRingBuffer`1.IsEmpty">
            <summary>
            If buffer is empty
            </summary>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.SimpleRingBuffer`1.Clear">
            <summary>
            Reset
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.SimpleRingBuffer`1.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.BoundingBoxExtensions.FromPoints(System.Collections.Generic.IList{SharpDX.Vector3},SharpDX.BoundingBox@)">
            <summary>
            Constructs a <see cref="T:SharpDX.BoundingBox"/> that fully contains the given points.
            </summary>
            <param name="points">The points that will be contained by the box.</param>
            <param name="result">When the method completes, contains the newly constructed bounding box.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="points"/> is <c>null</c>.</exception>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.BoundingBoxExtensions.FromPoints(System.Collections.Generic.IList{SharpDX.Vector3})">
            <summary>
            Constructs a <see cref="T:SharpDX.BoundingBox"/> that fully contains the given points.
            </summary>
            <param name="points">The points that will be contained by the box.</param>
            <returns>The newly constructed bounding box.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="points"/> is <c>null</c>.</exception>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.BoundingBoxExtensions.Transform(SharpDX.BoundingBox,SharpDX.Matrix)">
            <summary>
            Transform AABB with Affine Transformation matrix
            </summary>
            <param name="box"></param>
            <param name="transform"></param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.BoundingSphereExtensions.FromPoints(System.Collections.Generic.IList{SharpDX.Vector3},System.Int32,System.Int32,SharpDX.BoundingSphere@)">
            <summary>
            Constructs a <see cref="T:HelixToolkit.Wpf.BoundingSphere" /> that fully contains the given points.
            </summary>
            <param name="points">The points that will be contained by the sphere.</param>
            <param name="start">The start index from points array to start compute the bounding sphere.</param>
            <param name="count">The count of points to process to compute the bounding sphere.</param>
            <param name="result">When the method completes, contains the newly constructed bounding sphere.</param>
            <exception cref="T:System.ArgumentNullException">points</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            start
            or
            count
            </exception>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.BoundingSphereExtensions.FromPoints(System.Collections.Generic.IList{SharpDX.Vector3},SharpDX.BoundingSphere@)">
            <summary>
            Constructs a <see cref="T:HelixToolkit.Wpf.BoundingSphere"/> that fully contains the given points.
            </summary>
            <param name="points">The points that will be contained by the sphere.</param>
            <param name="result">When the method completes, contains the newly constructed bounding sphere.</param>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.BoundingSphereExtensions.FromPoints(System.Collections.Generic.IList{SharpDX.Vector3})">
            <summary>
            Constructs a <see cref="T:HelixToolkit.Wpf.BoundingSphere"/> that fully contains the given points.
            </summary>
            <param name="points">The points that will be contained by the sphere.</param>
            <returns>The newly constructed bounding sphere.</returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Extensions.CollectionExtensions.GetInternalArray``1(System.Collections.Generic.List{``0})">
            <summary>
            Gets the internal array of a <see cref="T:System.Collections.Generic.List`1"/>.
            <para>Warning: Internal array length >= List.Count. Use with cautious.</para>
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="list">The respective list.</param>
            <returns>The internal array of the list.</returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Extensions.CollectionExtensions.Get``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Tries to get a value from a <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <typeparam name="K">The type of the key.</typeparam>
            <typeparam name="V">The type of the value.</typeparam>
            <param name="dict">The respective dictionary.</param>
            <param name="key">The respective key.</param>
            <returns>The value if exists, else <c>null</c>.</returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.VectorExtensions.FindAnyPerpendicular(SharpDX.Vector3)">
            <summary>
            Find a <see cref="T:System.Windows.Media.Media3D.Vector3D"/> that is perpendicular to the given <see cref="T:System.Windows.Media.Media3D.Vector3D"/>.
            </summary>
            <param name="n">
            The input vector.
            </param>
            <returns>
            A perpendicular vector.
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.VectorExtensions.IsUndefined(SharpDX.Vector3)">
            <summary>
            Determines whether the specified vector is undefined (NaN,NaN,NaN).
            </summary>
            <param name="v">The vector.</param>
            <returns>
            <c>true</c> if the specified vector is undefined; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.VectorComparisonExtensions.AllSmallerOrEqual(SharpDX.Vector2,SharpDX.Vector2)">
            <summary>
            Returns whether ALL elements of this are SmallerOrEqual the corresponding element of v.
            ATTENTION: For example (a.AllSmaller(b)) is not the same as !(a.AllGreaterOrEqual(b)) but !(a.AnyGreaterOrEqual(b)).
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.VectorComparisonExtensions.AllSmallerOrEqual(SharpDX.Vector3,SharpDX.Vector3)">
            <summary>
            Returns whether ALL elements of this are SmallerOrEqual the corresponding element of v.
            ATTENTION: For example (a.AllSmaller(b)) is not the same as !(a.AllGreaterOrEqual(b)) but !(a.AnyGreaterOrEqual(b)).
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.VectorComparisonExtensions.AllSmallerOrEqual(SharpDX.Vector3,System.Single)">
            <summary>
            Returns whether ALL elements of v are SmallerOrEqual s.
            ATTENTION: For example (AllSmaller(a,b)) is not the same as !(AllGreaterOrEqual(a,b)) but !(AnyGreaterOrEqual(a,b)).
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.VectorComparisonExtensions.AllSmaller(SharpDX.Vector2,SharpDX.Vector2)">
            <summary>
            Returns whether ALL elements of this are SmallerOrEqual the corresponding element of v.
            ATTENTION: For example (a.AllSmaller(b)) is not the same as !(a.AllGreaterOrEqual(b)) but !(a.AnyGreaterOrEqual(b)).
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.VectorComparisonExtensions.AllSmaller(SharpDX.Vector3,SharpDX.Vector3)">
            <summary>
            Returns whether ALL elements of this are SmallerOrEqual the corresponding element of v.
            ATTENTION: For example (a.AllSmaller(b)) is not the same as !(a.AllGreaterOrEqual(b)) but !(a.AnyGreaterOrEqual(b)).
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.VectorComparisonExtensions.AllSmaller(SharpDX.Vector3,System.Single)">
            <summary>
            Returns whether ALL elements of v are SmallerOrEqual s.
            ATTENTION: For example (AllSmaller(a,b)) is not the same as !(AllGreaterOrEqual(a,b)) but !(AnyGreaterOrEqual(a,b)).
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.VectorComparisonExtensions.AnySmallerOrEqual(SharpDX.Vector3,SharpDX.Vector3)">
            <summary>
            Returns whether AT LEAST ONE element of a is SmallerOrEqual the corresponding element of b.
            ATTENTION: For example (AllSmaller(a,b)) is not the same as !(AllGreaterOrEqual(a,b)) but !(AnyGreaterOrEqual(a,b)).
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.VectorComparisonExtensions.AnySmallerOrEqual(SharpDX.Vector3,System.Single)">
            <summary>
            Returns whether AT LEAST ONE element of v is SmallerOrEqual s.
            ATTENTION: For example (AllSmaller(a,b)) is not the same as !(AllGreaterOrEqual(a,b)) but !(AnyGreaterOrEqual(a,b)).
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.VectorComparisonExtensions.AllGreaterOrEqual(SharpDX.Vector3,SharpDX.Vector3)">
            <summary>
            Returns whether ALL elements of a are GreaterOrEqual the corresponding element of b.
            ATTENTION: For example (AllSmaller(a,b)) is not the same as !(AllGreaterOrEqual(a,b)) but !(AnyGreaterOrEqual(a,b)).
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.VectorComparisonExtensions.AllGreaterOrEqual(SharpDX.Vector3,System.Single)">
            <summary>
            Returns whether ALL elements of v are GreaterOrEqual s.
            ATTENTION: For example (AllSmaller(a,b)) is not the same as !(AllGreaterOrEqual(a,b)) but !(AnyGreaterOrEqual(a,b)).
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.VectorComparisonExtensions.AnyGreaterOrEqual(SharpDX.Vector3,SharpDX.Vector3)">
            <summary>
            Returns whether AT LEAST ONE element of a is GreaterOrEqual the corresponding element of b.
            ATTENTION: For example (AllSmaller(a,b)) is not the same as !(AllGreaterOrEqual(a,b)) but !(AnyGreaterOrEqual(a,b)).
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.VectorComparisonExtensions.AnyGreaterOrEqual(SharpDX.Vector3,System.Single)">
            <summary>
            Returns whether AT LEAST ONE element of v is GreaterOrEqual s.
            ATTENTION: For example (AllSmaller(a,b)) is not the same as !(AllGreaterOrEqual(a,b)) but !(AnyGreaterOrEqual(a,b)).
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.VectorComparisonExtensions.ComponentMin(SharpDX.Vector3,SharpDX.Vector3)">
            <summary>
            Component-wise min vec
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.VectorComparisonExtensions.ComponentMax(SharpDX.Vector3,SharpDX.Vector3)">
            <summary>
            Component-wise max vec
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.Geometry3D.Octree">
            <summary>
            TO use Octree during hit test to improve hit performance, please call UpdateOctree after model created.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Geometry3D.UpdateVertices">
            <summary>
            Call to manually update vertex buffer. Use with <see cref="P:HelixToolkit.SharpDX.Shared.Model.ObservableObject.DisablePropertyChangedEvent"/>
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Geometry3D.UpdateTriangles">
            <summary>
            Call to manually update triangle buffer. Use with <see cref="P:HelixToolkit.SharpDX.Shared.Model.ObservableObject.DisablePropertyChangedEvent"/>
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Geometry3D.UpdateOctree(System.Single,System.Boolean)">
            <summary>
            Create Octree for current model.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Geometry3D.CreateOctree(HelixToolkit.Wpf.SharpDX.OctreeBuildParameter)">
            <summary>
            Override to create different octree in subclasses.
            </summary>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.Geometry3D.ClearOctree">
            <summary>
            Set octree to null
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.MeshGeometry3D.Normals">
            <summary>
            Does not raise property changed event
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.MeshGeometry3D.Tangents">
            <summary>
            Does not raise property changed event
            </summary>
        </member>
        <member name="P:HelixToolkit.Wpf.SharpDX.MeshGeometry3D.BiTangents">
            <summary>
            Does not raise property changed event
            </summary>
        </member>
        <member name="T:HelixToolkit.Wpf.SharpDX.TextureLoader">
            <summary>
            Utilities to load textures.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.TextureLoader.FromFileAsResource(SharpDX.Direct3D11.Device,System.String)">
            <summary>
            Loads a texture from a file as a resource.
            </summary>
            <param name="device">The device.</param>
            <param name="fileName">The file name.</param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.TextureLoader.FromFileAsShaderResourceView(SharpDX.Direct3D11.Device,System.String,System.Boolean)">
            <summary>
            Loads a texture from a file as a shader resource view.
            </summary>
            <param name="device">The device.</param>
            <param name="fileName">The file name.</param>
            <param name="disableAutoGenMipMap"></param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.TextureLoader.FromMemoryAsShaderResourceView(SharpDX.Direct3D11.Device,System.Byte[],System.Boolean)">
            <summary>
            Loads a texture from a memory buffer as a shader resource view.
            </summary>
            <param name="device">The device.</param>
            <param name="memory">The memory buffer.</param>
            <param name="disableAutoGenMipMap"></param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharpDX.TextureLoader.FromMemoryAsShaderResourceView(SharpDX.Direct3D11.Device,System.IO.Stream,System.Boolean)">
            <summary>
            Loads a texture from a memory buffer as a shader resource view.
            </summary>
            <param name="device">The device.</param>
            <param name="memory">The memory stream.</param>
            <param name="disableAutoGenMipMap"></param>
            <returns></returns>
        </member>
        <member name="T:HelixToolkit.Wpf.CuttingEarsTriangulator">
            <summary>
            Provides a cutting ears triangulation algorithm for simple polygons with no holes. O(n^2)
            </summary>
            <remarks>
            Based on <a href="http://www.flipcode.com/archives/Efficient_Polygon_Triangulation.shtml">code</a>
            References
            <a href="http://en.wikipedia.org/wiki/Polygon_triangulation"></a>
            <a href="http://computacion.cs.cinvestav.mx/~anzures/geom/triangulation.php"></a>
            <a href="http://www.codeproject.com/KB/recipes/cspolygontriangulation.aspx"></a>
            </remarks>
        </member>
        <member name="F:HelixToolkit.Wpf.CuttingEarsTriangulator.Epsilon">
            <summary>
            The epsilon.
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.CuttingEarsTriangulator.Triangulate(System.Collections.Generic.IList{SharpDX.Vector2})">
            <summary>
            Triangulate a polygon using the cutting ears algorithm.
            </summary>
            <remarks>
            The algorithm does not support holes.
            </remarks>
            <param name="contour">
            the polygon contour
            </param>
            <returns>
            collection of triangle points
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.CuttingEarsTriangulator.Area(System.Collections.Generic.IList{SharpDX.Vector2})">
            <summary>
            Calculates the area.
            </summary>
            <param name="contour">The contour.</param>
            <returns>The area.</returns>
        </member>
        <member name="M:HelixToolkit.Wpf.CuttingEarsTriangulator.InsideTriangle(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Decide if point (Px,Py) is inside triangle defined by (Ax,Ay) (Bx,By) (Cx,Cy).
            </summary>
            <param name="Ax">
            The ax.
            </param>
            <param name="Ay">
            The ay.
            </param>
            <param name="Bx">
            The bx.
            </param>
            <param name="By">
            The by.
            </param>
            <param name="Cx">
            The cx.
            </param>
            <param name="Cy">
            The cy.
            </param>
            <param name="Px">
            The px.
            </param>
            <param name="Py">
            The py.
            </param>
            <returns>
            The inside triangle.
            </returns>
        </member>
        <member name="M:HelixToolkit.Wpf.CuttingEarsTriangulator.Snip(System.Collections.Generic.IList{SharpDX.Vector2},System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[])">
            <summary>
            The snip.
            </summary>
            <param name="contour">The contour.</param>
            <param name="u">The u.</param>
            <param name="v">The v.</param>
            <param name="w">The w.</param>
            <param name="n">The n.</param>
            <param name="V">The v.</param>
            <returns>The snip.</returns>
        </member>
        <member name="T:HelixToolkit.Wpf.SharedFunctions">
            <summary>
            Functions for the Shared Projects to simplify the Code
            </summary>
        </member>
        <member name="M:HelixToolkit.Wpf.SharedFunctions.CrossProduct(SharpDX.Vector3@,SharpDX.Vector3@)">
            <summary>
            
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharedFunctions.DotProduct(SharpDX.Vector3@,SharpDX.Vector3@)">
            <summary>
            
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharedFunctions.LengthSquared(SharpDX.Vector3@)">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharedFunctions.Length(SharpDX.Vector3@)">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharedFunctions.ToPoint3D(SharpDX.Vector3@)">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharedFunctions.ToVector3D(SharpDX.Vector3@)">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharedFunctions.ToPoint3D(System.Windows.Media.Media3D.Vector3D@)">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharedFunctions.ToVector3D(System.Windows.Media.Media3D.Vector3D@)">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharedFunctions.ToMeshGeometry3D(HelixToolkit.Wpf.SharpDX.MeshGeometry3D)">
            <summary>
            
            </summary>
            <param name="mesh"></param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Wpf.SharedFunctions.LineIntersection(SharpDX.Plane,SharpDX.Vector3,SharpDX.Vector3)">
            <summary>
            Finds the intersection between the plane and a line.
            </summary>
            <param name="plane">
            The plane.
            </param>
            <param name="la">
            The first point defining the line.
            </param>
            <param name="lb">
            The second point defining the line.
            </param>
            <returns>
            The intersection point.
            </returns>
        </member>
        <member name="T:HelixToolkit.SharpDX.Helpers.PointerSizeHelpers">
            <summary>
            Helpers methods for <see cref="T:SharpDX.PointerSize"/>.
            </summary>
        </member>
        <member name="M:HelixToolkit.SharpDX.Helpers.PointerSizeHelpers.ToUInt64(SharpDX.PointerSize)">
            <summary>
            Converts a <see cref="T:SharpDX.PointerSize"/> to a 64-bit unsigned integer.
            </summary>
            <param name="ptr">The pointer to convert.</param>
            <returns>An <c>unsigned long</c>.</returns>
        </member>
        <member name="T:Wpf3DTools.Trackball">
            <summary>
                Trackball is a utility class which observes the mouse events
                on a specified FrameworkElement and produces a Transform3D
                with the resultant rotation and scale.
            
                Example Usage:
            
                    Trackball trackball = new Trackball();
                    trackball.EventSource = myElement;
                    myViewport3D.Camera.Transform = trackball.Transform;
            
                Because Viewport3Ds only raise events when the mouse is over the
                rendered 3D geometry (as opposed to not when the mouse is within
                the layout bounds) you usually want to use another element as 
                your EventSource.  For example, a transparent border placed on
                top of your Viewport3D works well:
                
                    <Grid>
                      <ColumnDefinition />
                      <RowDefinition />
                      <Viewport3D Name="myViewport" ClipToBounds="True" Grid.Row="0" Grid.Column="0" />
                      <Border Name="myElement" Background="Transparent" Grid.Row="0" Grid.Column="0" />
                    </Grid>
                
                NOTE: The Transform property may be shared by multiple Cameras
                      if you want to have auxiliary views following the trackball.
            
                      It can also be useful to share the Transform property with
                      models in the scene that you want to move with the camera.
                      (For example, the Trackport3D's headlight is implemented
                      this way.)
            
                      You may also use a Transform3DGroup to combine the
                      Transform property with additional Transforms.
            </summary>
        </member>
        <member name="P:Wpf3DTools.Trackball.Transform">
            <summary>
                A transform to move the camera or scene to the trackball's
                current orientation and scale.
            </summary>
        </member>
        <member name="P:Wpf3DTools.Trackball.RotateTransform">
            <summary>
            Rotation component of the transform
            </summary>
        </member>
        <member name="P:Wpf3DTools.Trackball.EventSource">
            <summary>
                The FrameworkElement we listen to for mouse events.
            </summary>
        </member>
        <member name="M:Wpf3DTools.Trackball.OnMouseDown(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Wpf3DTools.Trackball.OnMouseUp(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Wpf3DTools.Trackball.OnMouseMove(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Wpf3DTools.Trackball.Look(System.Windows.Point)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Wpf3DTools.Trackball.Pan(System.Windows.Point)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Wpf3DTools.Trackball.ProjectToTrackball(System.Double,System.Double,System.Windows.Point)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Wpf3DTools.Trackball.Zoom(System.Windows.Point)">
            <summary>
            
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Component">
            <summary>
            A disposable component base class.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Component.DisposeCollector">
            <summary>
            Gets or sets the disposables.
            </summary>
            <value>The disposables.</value>
        </member>
        <member name="M:SharpDX.Toolkit.Component.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Toolkit.Component"/> class.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Component.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Toolkit.Component" /> class with an immutable name.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="P:SharpDX.Toolkit.Component.IsAttached">
            <summary>
            Gets or sets a value indicating whether this instance is attached to a collector.
            </summary>
            <value>
            	<c>true</c> if this instance is attached to a collector; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SharpDX.Toolkit.Component.IsDisposed">
            <summary>
            Gets a value indicating whether this instance is disposed.
            </summary>
            <value>
            	<c>true</c> if this instance is disposed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SharpDX.Toolkit.Component.IsDisposing">
            <summary>
            
            </summary>
        </member>
        <member name="E:SharpDX.Toolkit.Component.Disposing">
            <summary>
            Occurs when when Dispose is called.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Component.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Component.Dispose(System.Boolean)">
            <summary>
            Disposes of object resources.
            </summary>
            <param name="disposeManagedResources">If true, managed resources should be
            disposed of in addition to unmanaged resources.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Component.ToDispose``1(``0)">
            <summary>
            Adds a disposable object to the list of the objects to dispose.
            </summary>
            <param name="toDisposeArg">To dispose.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Component.RemoveAndDispose``1(``0@)">
            <summary>
            Dispose a disposable object and set the reference to null. Removes this object from the ToDispose list.
            </summary>
            <param name="objectToDispose">Object to dispose.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Component.RemoveToDispose``1(``0)">
            <summary>
            Removes a disposable object to the list of the objects to dispose.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="toDisposeArg">To dispose.</param>
        </member>
        <member name="T:SharpDX.Toolkit.ComponentBase">
            <summary>
            A lightweight Component base class.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.ComponentBase.name">
            <summary>
            Occurs while this component is disposing and before it is disposed.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.ComponentBase.isNameImmutable">
            <summary>
            Gets or sets a value indicating whether the name of this instance is immutable.
            </summary>
            <value><c>true</c> if this instance is name immutable; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:SharpDX.Toolkit.ComponentBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Toolkit.ComponentBase" /> class with a mutable name.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.ComponentBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Toolkit.ComponentBase" /> class with an immutable name.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="P:SharpDX.Toolkit.ComponentBase.Name">
            <summary>
            Gets the name of this component.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:SharpDX.Toolkit.ComponentBase.Tag">
            <summary>
            Gets or sets the tag associated to this object.
            </summary>
            <value>The tag.</value>
        </member>
        <member name="E:SharpDX.Toolkit.ComponentBase.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.ComponentBase.OnPropertyChanged(System.String)">
            <summary>
            
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.DDS.MagicHeader">
            <summary>
            Magic code to identify DDS header
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.DDS.PixelFormat">
            <summary>
            Internal structure used to describe a DDS pixel format.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.DDS.PixelFormat.#ctor(SharpDX.Toolkit.Graphics.DDS.PixelFormatFlags,System.Int32,System.Int32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Toolkit.Graphics.DDS.PixelFormat" /> struct.
            </summary>
            <param name="flags">The flags.</param>
            <param name="fourCC">The four CC.</param>
            <param name="rgbBitCount">The RGB bit count.</param>
            <param name="rBitMask">The r bit mask.</param>
            <param name="gBitMask">The g bit mask.</param>
            <param name="bBitMask">The b bit mask.</param>
            <param name="aBitMask">A bit mask.</param>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.DDS.PixelFormatFlags">
            <summary>
            PixelFormat flags.
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.DDS.HeaderFlags">
            <summary>
            DDS Header flags.
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.DDS.SurfaceFlags">
            <summary>
            DDS Surface flags.
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.DDS.CubemapFlags">
            <summary>
            DDS Cubemap flags.
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.DDSFlags">
            <summary>
            Flags used by <see cref="M:SharpDX.Toolkit.Graphics.DDSHelper.LoadFromDDSMemory(System.IntPtr,System.Int32,System.Boolean,System.Nullable{System.Runtime.InteropServices.GCHandle})"/>.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.DDSHelper.LegacyMap.#ctor(SharpDX.DXGI.Format,SharpDX.Toolkit.Graphics.DDSHelper.ConversionFlags,SharpDX.Toolkit.Graphics.DDS.PixelFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Toolkit.Graphics.DDSHelper.LegacyMap" /> struct.
            </summary>
            <param name="format">The format.</param>
            <param name="conversionFlags">The conversion flags.</param>
            <param name="pixelFormat">The pixel format.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.DDSHelper.DecodeDDSHeader(System.IntPtr,System.Int32,SharpDX.Toolkit.Graphics.DDSFlags,SharpDX.Toolkit.Graphics.ImageDescription@,SharpDX.Toolkit.Graphics.DDSHelper.ConversionFlags@)">
            <summary>
            Decodes DDS header including optional DX10 extended header
            </summary>
            <param name="headerPtr">Pointer to the DDS header.</param>
            <param name="size">Size of the DDS content.</param>
            <param name="flags">Flags used for decoding the DDS header.</param>
            <param name="description">Output texture description.</param>
            <param name="convFlags">Output conversion flags.</param>
            <exception cref="T:System.ArgumentException">If the argument headerPtr is null</exception>
            <exception cref="T:System.InvalidOperationException">If the DDS header contains invalid data.</exception>
            <returns>True if the decoding is successful, false if this is not a DDS header.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.DDSHelper.EncodeDDSHeader(SharpDX.Toolkit.Graphics.ImageDescription,SharpDX.Toolkit.Graphics.DDSFlags,System.IntPtr,System.Int32,System.Int32@)">
            <summary>
            Encodes DDS file header (magic value, header, optional DX10 extended header)
            </summary>
            <param name="flags">Flags used for decoding the DDS header.</param>
            <param name="description">Output texture description.</param>
            <param name="pDestination">Pointer to the DDS output header. Can be set to IntPtr.Zero to calculated the required bytes.</param>
            <param name="maxsize">The maximum size of the destination buffer.</param>
            <param name="required">Output the number of bytes required to write the DDS header.</param>
            <exception cref="T:System.ArgumentException">If the argument headerPtr is null</exception>
            <exception cref="T:System.InvalidOperationException">If the DDS header contains invalid data.</exception>
            <returns>True if the decoding is successful, false if this is not a DDS header.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.DDSHelper.LegacyExpandScanline(System.IntPtr,System.Int32,SharpDX.DXGI.Format,System.IntPtr,System.Int32,SharpDX.Toolkit.Graphics.DDSHelper.TEXP_LEGACY_FORMAT,System.Int32*,SharpDX.Toolkit.Graphics.DDSHelper.ScanlineFlags)">
            <summary>
            Converts an image row with optional clearing of alpha value to 1.0
            </summary>
            <param name="pDestination"></param>
            <param name="outSize"></param>
            <param name="outFormat"></param>
            <param name="pSource"></param>
            <param name="inSize"></param>
            <param name="inFormat"></param>
            <param name="pal8"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.DDSHelper.LoadFromDDSMemory(System.IntPtr,System.Int32,System.Boolean,System.Nullable{System.Runtime.InteropServices.GCHandle})">
            <summary>
            Load a DDS file in memory
            </summary>
            <param name="pSource">Source buffer</param>
            <param name="size">Size of the DDS texture.</param>
            <param name="makeACopy">Whether or not to make a copy of the DDS</param>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.DDSHelper.CreateImageFromDDS(System.IntPtr,System.Int32,System.Int32,SharpDX.Toolkit.Graphics.ImageDescription,SharpDX.Toolkit.Graphics.Image.PitchFlags,SharpDX.Toolkit.Graphics.DDSHelper.ConversionFlags,System.Int32*,System.Nullable{System.Runtime.InteropServices.GCHandle})">
            <summary>
            Converts or copies image data from pPixels into scratch image data
            </summary>
            <param name="pDDS"></param>
            <param name="offset"></param>
            <param name="size"></param>
            <param name="metadata"></param>
            <param name="cpFlags"></param>
            <param name="convFlags"></param>
            <param name="pal8"></param>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.DDSHelper.ExpandScanline(System.IntPtr,System.Int32,System.IntPtr,System.Int32,SharpDX.DXGI.Format,SharpDX.Toolkit.Graphics.DDSHelper.ScanlineFlags)">
            <summary>
            Converts an image row with optional clearing of alpha value to 1.0
            </summary>
            <param name="pDestination"></param>
            <param name="outSize"></param>
            <param name="pSource"></param>
            <param name="inSize"></param>
            <param name="inFormat"></param>
            <param name="flags"></param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.DDSHelper.CopyScanline(System.IntPtr,System.Int32,System.IntPtr,System.Int32,SharpDX.DXGI.Format,SharpDX.Toolkit.Graphics.DDSHelper.ScanlineFlags)">
            <summary>
            Copies an image row with optional clearing of alpha value to 1.0.
            </summary>
            <remarks>
            This method can be used in place as well, otherwise copies the image row unmodified.
            </remarks>
            <param name="pDestination">The destination buffer.</param>
            <param name="outSize">The destination size.</param>
            <param name="pSource">The source buffer.</param>
            <param name="inSize">The source size.</param>
            <param name="format">The <see cref="T:SharpDX.DXGI.Format"/> of the source scanline.</param>
            <param name="flags">Scanline flags used when copying the scanline.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.DDSHelper.SwizzleScanline(System.IntPtr,System.Int32,System.IntPtr,System.Int32,SharpDX.DXGI.Format,SharpDX.Toolkit.Graphics.DDSHelper.ScanlineFlags)">
            <summary>
            Swizzles (RGB &lt;-&gt; BGR) an image row with optional clearing of alpha value to 1.0.
            </summary>
            <param name="pDestination">The destination buffer.</param>
            <param name="outSize">The destination size.</param>
            <param name="pSource">The source buffer.</param>
            <param name="inSize">The source size.</param>
            <param name="format">The <see cref="T:SharpDX.DXGI.Format"/> of the source scanline.</param>
            <param name="flags">Scanline flags used when copying the scanline.</param>
            <remarks>
            This method can be used in place as well, otherwise copies the image row unmodified.
            </remarks>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.DepthFormat">
            <summary>
            Defines the format of data in a depth-stencil buffer.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.DepthFormat.None">
            <summary>
            No depth stencil buffer.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.DepthFormat.Depth16">
            <summary>
            A buffer that contains 16-bits of depth data.
            </summary>
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_D16_UNORM</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_D16_UNORM</unmanaged-short>	
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.DepthFormat.Depth24Stencil8">
            <summary>
            A 32 bit buffer that contains 24 bits of depth data and 8 bits of stencil data.
            </summary>
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_D24_UNORM_S8_UINT</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_D24_UNORM_S8_UINT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.DepthFormat.Depth32">
            <summary>
            A buffer that contains 32-bits of depth data.
            </summary>
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_D32_FLOAT</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_D32_FLOAT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.DepthFormat.Depth32Stencil8X24">
            <summary>
            A double 32 bit buffer that contains 32 bits of depth data and 8 bits padded with 24 zero bits of stencil data.
            </summary>
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_D32_FLOAT_S8X24_UINT</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_D32_FLOAT_S8X24_UINT</unmanaged-short>	
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.DepthStencilBuffer">
            <summary>
            A DepthStencilBuffer front end to <see cref="T:SharpDX.Direct3D11.Texture2D"/>.
            </summary>
            <remarks>
            This class instantiates a <see cref="T:SharpDX.Toolkit.Graphics.Texture2D"/> with the binding flags <see cref="F:SharpDX.Direct3D11.BindFlags.DepthStencil"/>.
            </remarks>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.DepthStencilBuffer.DepthFormat">
            <summary>
            Gets the <see cref="T:SharpDX.Toolkit.Graphics.DepthFormat"/> of this depth stencil buffer.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.DepthStencilBuffer.HasStencil">
            <summary>
            Gets a boolean value indicating if this buffer is supporting stencil.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.DepthStencilBuffer.HasReadOnlyView">
            <summary>
            Gets a boolean value indicating if this buffer is supporting read-only view.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.DepthStencilBuffer.DepthStencilView">
            <summary>
            Gets the selector for a <see cref="F:SharpDX.Toolkit.Graphics.DepthStencilBuffer.DepthStencilView"/>
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.DepthStencilBuffer.ReadOnlyView">
            <summary>
            Gets a a read-only <see cref="F:SharpDX.Toolkit.Graphics.DepthStencilBuffer.DepthStencilView"/>.
            </summary>
            <remarks>
            This value can be null if not supported by hardware (minimum features level is 11.0)
            </remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.DepthStencilBuffer.InitializeViews">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.DepthStencilBuffer.InitializeViewsDelayed">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.DepthStencilBuffer.GetDefaultViewFormat">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.DepthStencilBuffer.op_Implicit(SharpDX.Toolkit.Graphics.DepthStencilBuffer)~SharpDX.Direct3D11.DepthStencilView">
            <summary>
            DepthStencilView casting operator.
            </summary>
            <param name="buffer">Source for the.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.DepthStencilBuffer.GetDepthStencilView(SharpDX.Toolkit.Graphics.ViewType,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Gets a specific <see cref="F:SharpDX.Toolkit.Graphics.DepthStencilBuffer.DepthStencilView" /> from this texture.
            </summary>
            <param name="viewType">Type of the view slice.</param>
            <param name="arrayOrDepthSlice">The texture array slice index.</param>
            <param name="mipIndex">The mip map slice index.</param>
            <param name="readOnlyView">Indicates if the view is read-only.</param>
            <returns>A <see cref="F:SharpDX.Toolkit.Graphics.DepthStencilBuffer.DepthStencilView" /></returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.DepthStencilBuffer.Clone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.DepthStencilViewSelector">
            <summary>
            Used by <see cref="T:SharpDX.Toolkit.Graphics.DepthStencilBuffer"/> to provide a selector to a <see cref="T:SharpDX.Direct3D11.DepthStencilView"/>.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.DepthStencilViewSelector.Item(SharpDX.Toolkit.Graphics.ViewType,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Gets a specific <see cref="T:SharpDX.Direct3D11.DepthStencilView" /> from this texture.
            </summary>
            <param name="viewType">Type of the view slice.</param>
            <param name="arrayOrDepthSlice">The texture array slice index.</param>
            <param name="mipIndex">The mip map slice index.</param>
            <param name="readOnlyView">Indicates if this view is read-only.</param>
            <returns>An <see cref="T:SharpDX.Direct3D11.DepthStencilView" /></returns>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.GraphicsResource">
            <summary>
            Base class for all <see cref="T:SharpDX.Toolkit.Graphics.GraphicsResource"/>.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.GraphicsResource.GraphicsDevice">
            <summary>
            Device used to create this instance.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.GraphicsResource.Resource">
            <summary>
            The attached Direct3D11 resource to this instance.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsResource.#ctor(SharpDX.Direct3D11.Device)">
            <summary>
            
            </summary>
            <param name="graphicsDevice"></param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsResource.#ctor(SharpDX.Direct3D11.Device,System.String)">
            <summary>
            
            </summary>
            <param name="graphicsDevice"></param>
            <param name="name"></param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsResource.Initialize(SharpDX.Direct3D11.DeviceChild)">
            <summary>
            Initializes the specified device local.
            </summary>
            <param name="resource">The resource.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsResource.op_Implicit(SharpDX.Toolkit.Graphics.GraphicsResource)~SharpDX.Direct3D11.Resource">
            <summary>
            Implicit casting operator to <see cref="T:SharpDX.Direct3D11.Resource"/>
            </summary>
            <param name="from">The GraphicsResource to convert from.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsResource.GetCpuAccessFlagsFromUsage(SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Gets the CPU access flags from the <see cref="T:SharpDX.Direct3D11.ResourceUsage"/>.
            </summary>
            <param name="usage">The usage.</param>
            <returns>The CPU access flags</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsResource.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposeManagedResources"></param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsResource.OnPropertyChanged(System.String)">
            <summary>
            Called when name changed for this component.
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.Image">
            <summary>
            Provides method to instantiate an image 1D/2D/3D supporting TextureArray and mipmaps on the CPU or to load/save an image from the disk.
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.Image.ImageLoadDelegate">
            <summary>
            
            </summary>
            <param name="dataPointer"></param>
            <param name="dataSize"></param>
            <param name="makeACopy"></param>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.Image.pixelBuffers">
            <summary>
            Pixel buffers.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.Image.pixelBufferArray">
            <summary>
            Provides access to all pixel buffers.
            </summary>
            <remarks>
            For Texture3D, each z slice of the Texture3D has a pixelBufferArray * by the number of mipmaps.
            For other textures, there is Description.MipLevels * Description.ArraySize pixel buffers.
            </remarks>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.Image.totalSizeInBytes">
            <summary>
            Gets the total number of bytes occupied by this image in memory.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.Image.buffer">
            <summary>
            Pointer to the buffer.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.Image.bufferIsDisposable">
            <summary>
            True if the buffer must be disposed.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.Image.handle">
            <summary>
            Handle != null if the buffer is a pinned managed object on the LOH (Large Object Heap).
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.Image.Description">
            <summary>
            Description of this image.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Image.#ctor(SharpDX.Toolkit.Graphics.ImageDescription,System.IntPtr,System.Int32,System.Nullable{System.Runtime.InteropServices.GCHandle},System.Boolean,SharpDX.Toolkit.Graphics.Image.PitchFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Toolkit.Graphics.Image" /> class.
            </summary>
            <param name="description">The image description.</param>
            <param name="dataPointer">The pointer to the data buffer.</param>
            <param name="offset">The offset from the beginning of the data buffer.</param>
            <param name="handle">The handle (optional).</param>
            <param name="bufferIsDisposable">if set to <c>true</c> [buffer is disposable].</param>
            <param name="pitchFlags"></param>
            <exception cref="T:System.InvalidOperationException">If the format is invalid, or width/height/depth/arraysize is invalid with respect to the dimension.</exception>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Image.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposeManagedResources"></param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Image.GetMipMapDescription(System.Int32)">
            <summary>
            Gets the mipmap description of this instance for the specified mipmap level.
            </summary>
            <param name="mipmap">The mipmap.</param>
            <returns>A description of a particular mipmap for this texture.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Image.GetPixelBuffer(System.Int32,System.Int32)">
            <summary>
            Gets the pixel buffer for the specified array/z slice and mipmap level.
            </summary>
            <param name="arrayOrZSliceIndex">For 3D image, the parameter is the Z slice, otherwise it is an index into the texture array.</param>
            <param name="mipmap">The mipmap.</param>
            <returns>A <see cref="F:SharpDX.Toolkit.Graphics.Image.pixelBufferArray"/>.</returns>
            <exception cref="T:System.ArgumentException">If arrayOrZSliceIndex or mipmap are out of range.</exception>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Image.GetPixelBuffer(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the pixel buffer for the specified array/z slice and mipmap level.
            </summary>
            <param name="arrayIndex">Index into the texture array. Must be set to 0 for 3D images.</param>
            <param name="zIndex">Z index for 3D image. Must be set to 0 for all 1D/2D images.</param>
            <param name="mipmap">The mipmap.</param>
            <returns>A <see cref="F:SharpDX.Toolkit.Graphics.Image.pixelBufferArray"/>.</returns>
            <exception cref="T:System.ArgumentException">If arrayIndex, zIndex or mipmap are out of range.</exception>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Image.Register(SharpDX.Toolkit.Graphics.ImageFileType,SharpDX.Toolkit.Graphics.Image.ImageLoadDelegate,SharpDX.Toolkit.Graphics.Image.ImageSaveDelegate)">
            <summary>
            Registers a loader/saver for a specified image file type.
            </summary>
            <param name="type">The file type (use integer and explicit casting to <see cref="T:SharpDX.Toolkit.Graphics.ImageFileType"/> to register other file format.</param>
            <param name="loader">The loader delegate (can be null).</param>
            <param name="saver">The saver delegate (can be null).</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.Image.DataPointer">
            <summary>
            Gets a pointer to the image buffer in memory.
            </summary>
            <value>A pointer to the image buffer in memory.</value>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.Image.PixelBuffer">
            <summary>
            Provides access to all pixel buffers.
            </summary>
            <remarks>
            For Texture3D, each z slice of the Texture3D has a pixelBufferArray * by the number of mipmaps.
            For other textures, there is Description.MipLevels * Description.ArraySize pixel buffers.
            </remarks>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.Image.TotalSizeInBytes">
            <summary>
            Gets the total number of bytes occupied by this image in memory.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Image.ToDataBox">
            <summary>
            Gets the databox from this image.
            </summary>
            <returns>The databox of this image.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Image.ComputeDataBox">
            <summary>
            Gets the databox from this image.
            </summary>
            <returns>The databox of this image.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Image.New(SharpDX.Toolkit.Graphics.ImageDescription)">
            <summary>
            Creates a new instance of <see cref="T:SharpDX.Toolkit.Graphics.Image"/> from an image description.
            </summary>
            <param name="description">The image description.</param>
            <returns>A new image.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Image.New1D(System.Int32,SharpDX.Toolkit.Graphics.MipMapCount,SharpDX.Toolkit.Graphics.PixelFormat,System.Int32)">
            <summary>
            Creates a new instance of a 1D <see cref="T:SharpDX.Toolkit.Graphics.Image"/>.
            </summary>
            <param name="width">The width.</param>
            <param name="mipMapCount">The mip map count.</param>
            <param name="format">The format.</param>
            <param name="arraySize">Size of the array.</param>
            <returns>A new image.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Image.New2D(System.Int32,System.Int32,SharpDX.Toolkit.Graphics.MipMapCount,SharpDX.Toolkit.Graphics.PixelFormat,System.Int32)">
            <summary>
            Creates a new instance of a 2D <see cref="T:SharpDX.Toolkit.Graphics.Image"/>.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="mipMapCount">The mip map count.</param>
            <param name="format">The format.</param>
            <param name="arraySize">Size of the array.</param>
            <returns>A new image.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Image.NewCube(System.Int32,SharpDX.Toolkit.Graphics.MipMapCount,SharpDX.Toolkit.Graphics.PixelFormat)">
            <summary>
            Creates a new instance of a Cube <see cref="T:SharpDX.Toolkit.Graphics.Image"/>.
            </summary>
            <param name="width">The width.</param>
            <param name="mipMapCount">The mip map count.</param>
            <param name="format">The format.</param>
            <returns>A new image.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Image.New3D(System.Int32,System.Int32,System.Int32,SharpDX.Toolkit.Graphics.MipMapCount,SharpDX.Toolkit.Graphics.PixelFormat)">
            <summary>
            Creates a new instance of a 3D <see cref="T:SharpDX.Toolkit.Graphics.Image"/>.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="depth">The depth.</param>
            <param name="mipMapCount">The mip map count.</param>
            <param name="format">The format.</param>
            <returns>A new image.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Image.New(SharpDX.Toolkit.Graphics.ImageDescription,System.IntPtr)">
            <summary>
            Creates a new instance of <see cref="T:SharpDX.Toolkit.Graphics.Image"/> from an image description.
            </summary>
            <param name="description">The image description.</param>
            <param name="dataPointer">Pointer to an existing buffer.</param>
            <returns>A new image.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Image.New1D(System.Int32,SharpDX.Toolkit.Graphics.MipMapCount,SharpDX.Toolkit.Graphics.PixelFormat,System.Int32,System.IntPtr)">
            <summary>
            Creates a new instance of a 1D <see cref="T:SharpDX.Toolkit.Graphics.Image"/>.
            </summary>
            <param name="width">The width.</param>
            <param name="mipMapCount">The mip map count.</param>
            <param name="format">The format.</param>
            <param name="arraySize">Size of the array.</param>
            <param name="dataPointer">Pointer to an existing buffer.</param>
            <returns>A new image.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Image.New2D(System.Int32,System.Int32,SharpDX.Toolkit.Graphics.MipMapCount,SharpDX.Toolkit.Graphics.PixelFormat,System.Int32,System.IntPtr)">
            <summary>
            Creates a new instance of a 2D <see cref="T:SharpDX.Toolkit.Graphics.Image"/>.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="mipMapCount">The mip map count.</param>
            <param name="format">The format.</param>
            <param name="arraySize">Size of the array.</param>
            <param name="dataPointer">Pointer to an existing buffer.</param>
            <returns>A new image.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Image.NewCube(System.Int32,SharpDX.Toolkit.Graphics.MipMapCount,SharpDX.Toolkit.Graphics.PixelFormat,System.IntPtr)">
            <summary>
            Creates a new instance of a Cube <see cref="T:SharpDX.Toolkit.Graphics.Image"/>.
            </summary>
            <param name="width">The width.</param>
            <param name="mipMapCount">The mip map count.</param>
            <param name="format">The format.</param>
            <param name="dataPointer">Pointer to an existing buffer.</param>
            <returns>A new image.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Image.New3D(System.Int32,System.Int32,System.Int32,SharpDX.Toolkit.Graphics.MipMapCount,SharpDX.Toolkit.Graphics.PixelFormat,System.IntPtr)">
            <summary>
            Creates a new instance of a 3D <see cref="T:SharpDX.Toolkit.Graphics.Image"/>.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="depth">The depth.</param>
            <param name="mipMapCount">The mip map count.</param>
            <param name="format">The format.</param>
            <param name="dataPointer">Pointer to an existing buffer.</param>
            <returns>A new image.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Image.Load(SharpDX.DataPointer,System.Boolean)">
            <summary>
            Loads an image from an unmanaged memory pointer.
            </summary>
            <param name="dataBuffer">Pointer to an unmanaged memory. If <paramref name="makeACopy"/> is false, this buffer must be allocated with <see cref="M:SharpDX.Utilities.AllocateMemory(System.Int32,System.Int32)"/>.</param>
            <param name="makeACopy">True to copy the content of the buffer to a new allocated buffer, false otherwhise.</param>
            <returns>An new image.</returns>
            <remarks>If <paramref name="makeACopy"/> is set to false, the returned image is now the holder of the unmanaged pointer and will release it on Dispose. </remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Image.Load(System.IntPtr,System.Int32,System.Boolean)">
            <summary>
            Loads an image from an unmanaged memory pointer.
            </summary>
            <param name="dataPointer">Pointer to an unmanaged memory. If <paramref name="makeACopy"/> is false, this buffer must be allocated with <see cref="M:SharpDX.Utilities.AllocateMemory(System.Int32,System.Int32)"/>.</param>
            <param name="dataSize">Size of the unmanaged buffer.</param>
            <param name="makeACopy">True to copy the content of the buffer to a new allocated buffer, false otherwise.</param>
            <returns>An new image.</returns>
            <remarks>If <paramref name="makeACopy"/> is set to false, the returned image is now the holder of the unmanaged pointer and will release it on Dispose. </remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Image.Load(System.Byte[])">
            <summary>
            Loads an image from a managed buffer.
            </summary>
            <param name="buffer">Reference to a managed buffer.</param>
            <returns>An new image.</returns>
            <remarks>This method support the following format: <c>dds, bmp, jpg, png, gif, tiff, wmp, tga</c>.</remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Image.Load(System.IO.Stream)">
            <summary>
            Loads the specified image from a stream.
            </summary>
            <param name="imageStream">The image stream.</param>
            <returns>An new image.</returns>
            <remarks>This method support the following format: <c>dds, bmp, jpg, png, gif, tiff, wmp, tga</c>.</remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Image.Load(System.String)">
            <summary>
            Loads the specified image from a file.
            </summary>
            <param name="fileName">The filename.</param>
            <returns>An new image.</returns>
            <remarks>This method support the following format: <c>dds, bmp, jpg, png, gif, tiff, wmp, tga</c>.</remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Image.Load(System.IntPtr,System.Int32,System.Boolean,System.Nullable{System.Runtime.InteropServices.GCHandle})">
            <summary>
            Loads an image from the specified pointer.
            </summary>
            <param name="dataPointer">The data pointer.</param>
            <param name="dataSize">Size of the data.</param>
            <param name="makeACopy">if set to <c>true</c> [make A copy].</param>
            <param name="handle">The handle.</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Image.CalculateImageArray(SharpDX.Toolkit.Graphics.ImageDescription,SharpDX.Toolkit.Graphics.Image.PitchFlags,System.Int32@,System.Int32@)">
            <summary>
            Determines number of image array entries and pixel size.
            </summary>
            <param name="imageDesc">Description of the image to create.</param>
            <param name="pitchFlags">Pitch flags.</param>
            <param name="bufferCount">Output number of mipmap.</param>
            <param name="pixelSizeInBytes">Output total size to allocate pixel buffers for all images.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Image.SetupImageArray(System.IntPtr,System.Int32,SharpDX.Toolkit.Graphics.ImageDescription,SharpDX.Toolkit.Graphics.Image.PitchFlags,SharpDX.Toolkit.Graphics.PixelBuffer[])">
            <summary>
            Allocates PixelBuffers 
            </summary>
            <param name="buffer"></param>
            <param name="pixelSize"></param>
            <param name="imageDesc"></param>
            <param name="pitchFlags"></param>
            <param name="output"></param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Image.Save(System.String)">
            <summary>
            Saves this instance to a file.
            </summary>
            <param name="fileName">The destination file. Filename must end with a known extension (dds, bmp, jpg, png, gif, tiff, wmp, tga)</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Image.Save(System.String,SharpDX.Toolkit.Graphics.ImageFileType)">
            <summary>
            Saves this instance to a file.
            </summary>
            <param name="fileName">The destination file.</param>
            <param name="fileType">Specify the output format.</param>
            <remarks>This method support the following format: <c>dds, bmp, jpg, png, gif, tiff, wmp, tga</c>.</remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Image.Save(System.IO.Stream,SharpDX.Toolkit.Graphics.ImageFileType)">
            <summary>
            Saves this instance to a stream.
            </summary>
            <param name="imageStream">The destination stream.</param>
            <param name="fileType">Specify the output format.</param>
            <remarks>This method support the following format: <c>dds, bmp, jpg, png, gif, tiff, wmp, tga</c>.</remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Image.Save(SharpDX.Toolkit.Graphics.PixelBuffer[],System.Int32,SharpDX.Toolkit.Graphics.ImageDescription,System.IO.Stream,SharpDX.Toolkit.Graphics.ImageFileType)">
            <summary>
            Saves this instance to a stream.
            </summary>
            <param name="pixelBuffers">The buffers to save.</param>
            <param name="count">The number of buffers to save.</param>
            <param name="description">Global description of the buffer.</param>
            <param name="imageStream">The destination stream.</param>
            <param name="fileType">Specify the output format.</param>
            <remarks>This method support the following format: <c>dds, bmp, jpg, png, gif, tiff, wmp, tga</c>.</remarks>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.ImageDescription">
            <summary>
            A description for <see cref="T:SharpDX.Toolkit.Graphics.Image"/>.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.ImageDescription.Dimension">
            <summary>
            The dimension of a texture.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.ImageDescription.Width">
            <summary>	
            <dd> <p>Texture width (in texels). The  range is from 1 to <see cref="F:SharpDX.Direct3D11.Resource.MaximumTexture1DSize"/> (16384). However, the range is actually constrained by the feature level at which you create the rendering device. For more information about restrictions, see Remarks.</p> </dd>	
            </summary>	
            <remarks>
            This field is valid for all textures: <see cref="T:SharpDX.Toolkit.Graphics.Texture1D"/>, <see cref="T:SharpDX.Toolkit.Graphics.Texture2D"/>, <see cref="T:SharpDX.Toolkit.Graphics.Texture3D"/> and <see cref="T:SharpDX.Toolkit.Graphics.TextureCube"/>.
            </remarks>
            <msdn-id>ff476252</msdn-id>	
            <unmanaged>unsigned int Width</unmanaged>	
            <unmanaged-short>unsigned int Width</unmanaged-short>	
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.ImageDescription.Height">
            <summary>	
            <dd> <p>Texture height (in texels). The  range is from 1 to <see cref="F:SharpDX.Direct3D11.Resource.MaximumTexture3DSize"/> (2048). However, the range is actually constrained by the feature level at which you create the rendering device. For more information about restrictions, see Remarks.</p> </dd>	
            </summary>	
            <remarks>
            This field is only valid for <see cref="T:SharpDX.Toolkit.Graphics.Texture2D"/>, <see cref="T:SharpDX.Toolkit.Graphics.Texture3D"/> and <see cref="T:SharpDX.Toolkit.Graphics.TextureCube"/>.
            </remarks>
            <msdn-id>ff476254</msdn-id>	
            <unmanaged>unsigned int Height</unmanaged>	
            <unmanaged-short>unsigned int Height</unmanaged-short>	
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.ImageDescription.Depth">
            <summary>	
            <dd> <p>Texture depth (in texels). The  range is from 1 to <see cref="F:SharpDX.Direct3D11.Resource.MaximumTexture3DSize"/> (2048). However, the range is actually constrained by the feature level at which you create the rendering device. For more information about restrictions, see Remarks.</p> </dd>	
            </summary>	
            <remarks>
            This field is only valid for <see cref="T:SharpDX.Toolkit.Graphics.Texture3D"/>.
            </remarks>
            <msdn-id>ff476254</msdn-id>	
            <unmanaged>unsigned int Depth</unmanaged>	
            <unmanaged-short>unsigned int Depth</unmanaged-short>	
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.ImageDescription.ArraySize">
            <summary>	
            <dd> <p>Number of textures in the array. The  range is from 1 to <see cref="F:SharpDX.Direct3D11.Resource.MaximumTexture1DArraySize"/> (2048). However, the range is actually constrained by the feature level at which you create the rendering device. For more information about restrictions, see Remarks.</p> </dd>	
            </summary>	
            <remarks>
            This field is only valid for <see cref="T:SharpDX.Toolkit.Graphics.Texture1D"/>, <see cref="T:SharpDX.Toolkit.Graphics.Texture2D"/> and <see cref="T:SharpDX.Toolkit.Graphics.TextureCube"/>
            </remarks>
            <remarks>
            This field is only valid for textures: <see cref="T:SharpDX.Toolkit.Graphics.Texture1D"/>, <see cref="T:SharpDX.Toolkit.Graphics.Texture2D"/> and <see cref="T:SharpDX.Toolkit.Graphics.TextureCube"/>.
            </remarks>
            <msdn-id>ff476252</msdn-id>	
            <unmanaged>unsigned int ArraySize</unmanaged>	
            <unmanaged-short>unsigned int ArraySize</unmanaged-short>	
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.ImageDescription.MipLevels">
            <summary>	
            <dd> <p>The maximum number of mipmap levels in the texture. See the remarks in <strong><see cref="T:SharpDX.Direct3D11.ShaderResourceViewDescription.Texture1DResource"/></strong>. Use 1 for a multisampled texture; or 0 to generate a full set of subtextures.</p> </dd>	
            </summary>	
            <msdn-id>ff476252</msdn-id>	
            <unmanaged>unsigned int MipLevels</unmanaged>	
            <unmanaged-short>unsigned int MipLevels</unmanaged-short>	
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.ImageDescription.Format">
            <summary>	
            <dd> <p>Texture format (see <strong><see cref="T:SharpDX.DXGI.Format"/></strong>).</p> </dd>	
            </summary>	
            <msdn-id>ff476252</msdn-id>	
            <unmanaged>DXGI_FORMAT Format</unmanaged>	
            <unmanaged-short>DXGI_FORMAT Format</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.ImageDescription.Equals(SharpDX.Toolkit.Graphics.ImageDescription)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.ImageDescription.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.ImageDescription.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.ImageDescription.op_Equality(SharpDX.Toolkit.Graphics.ImageDescription,SharpDX.Toolkit.Graphics.ImageDescription)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.ImageDescription.op_Inequality(SharpDX.Toolkit.Graphics.ImageDescription,SharpDX.Toolkit.Graphics.ImageDescription)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.ImageDescription.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.ImageFileType">
            <summary>
            Image file format
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.ImageFileType.Dds">
            <summary>
            A DDS file.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.ImageFileType.Png">
            <summary>
            A PNG file.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.ImageFileType.Gif">
            <summary>
            A GIF file.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.ImageFileType.Jpg">
            <summary>
            A JPG file.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.ImageFileType.Bmp">
            <summary>
            A BMP file.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.ImageFileType.Tiff">
            <summary>
            A TIFF file.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.ImageFileType.Wmp">
            <summary>
            A WMP file.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.ImageFileType.Tga">
            <summary>
            A TGA File.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.ImageFileType.Tktx">
            <summary>
            A TKTX File.
            </summary>
            <remarks>
            This is a format available with this toolkit, similar to DDS, but It doesn't require any conversion and is a straight dump of the memory pixel buffers.
            </remarks>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.MipMapCount">
            <summary>
            A simple wrapper to specify number of mipmaps.
             Set to true to specify all mipmaps or sets an integer value >= 1
            to specify the exact number of mipmaps.
            </summary>
            <remarks>
            This structure use implicit conversion:
            <ul>
            <li>Set to <c>true</c> to specify all mipmaps.</li>
            <li>Set to <c>false</c> to specify a single mipmap.</li>
            <li>Set to an integer value >=1 to specify an exact count of mipmaps.</li>
            </ul>
            </remarks>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.MipMapCount.Auto">
            <summary>
            Automatic mipmap level based on texture size.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.MipMapCount.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Toolkit.Graphics.MipMapCount" /> struct.
            </summary>
            <param name="allMipMaps">if set to <c>true</c> generates all mip maps.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.MipMapCount.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Toolkit.Graphics.MipMapCount" /> struct.
            </summary>
            <param name="count">The count.</param>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.MipMapCount.Count">
            <summary>
            Number of mipmaps.
            </summary>
            <remarks>
            Zero(0) means generate all mipmaps. One(1) generates a single mipmap... etc.
            </remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.MipMapCount.Equals(SharpDX.Toolkit.Graphics.MipMapCount)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.MipMapCount.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.MipMapCount.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.MipMapCount.op_Equality(SharpDX.Toolkit.Graphics.MipMapCount,SharpDX.Toolkit.Graphics.MipMapCount)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.MipMapCount.op_Inequality(SharpDX.Toolkit.Graphics.MipMapCount,SharpDX.Toolkit.Graphics.MipMapCount)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.MipMapCount.op_Implicit(SharpDX.Toolkit.Graphics.MipMapCount)~System.Boolean">
            <summary>
            Performs an explicit conversion from <see cref="T:SharpDX.Toolkit.Graphics.MipMapCount"/> to <see cref="T:System.Boolean"/>.
            </summary>
            <param name="mipMap">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.MipMapCount.op_Implicit(System.Boolean)~SharpDX.Toolkit.Graphics.MipMapCount">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Boolean"/> to <see cref="T:SharpDX.Toolkit.Graphics.MipMapCount"/>.
            </summary>
            <param name="mipMapAll">True to generate all mipmaps, false to use a single mipmap.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.MipMapCount.op_Implicit(SharpDX.Toolkit.Graphics.MipMapCount)~System.Int32">
            <summary>
            Performs an explicit conversion from <see cref="T:SharpDX.Toolkit.Graphics.MipMapCount"/> to <see cref="T:System.Int32"/>.
            </summary>
            <param name="mipMap">The value.</param>
            <returns>The count of mipmap (0 means all mipmaps).</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.MipMapCount.op_Implicit(System.Int32)~SharpDX.Toolkit.Graphics.MipMapCount">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Int32"/> to <see cref="T:SharpDX.Toolkit.Graphics.MipMapCount"/>.
            </summary>
            <param name="mipMapCount">True to generate all mipmaps, false to use a single mipmap.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.MipMapDescription">
            <summary>
            Describes a mipmap.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.MipMapDescription.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Toolkit.Graphics.MipMapDescription" /> class.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="depth">The depth.</param>
            <param name="rowStride">The row stride.</param>
            <param name="depthStride">The depth stride.</param>
            <param name="widthPacked">The packed width.</param>
            <param name="heightPacked">The packed height.</param>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.MipMapDescription.Width">
            <summary>
            Width of this mipmap.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.MipMapDescription.Height">
            <summary>
            Height of this mipmap.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.MipMapDescription.WidthPacked">
            <summary>
            Width of this mipmap.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.MipMapDescription.HeightPacked">
            <summary>
            Height of this mipmap.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.MipMapDescription.Depth">
            <summary>
            Depth of this mipmap.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.MipMapDescription.RowStride">
            <summary>
            RowStride of this mipmap (number of bytes per row).
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.MipMapDescription.DepthStride">
            <summary>
            DepthStride of this mipmap (number of bytes per depth slice).
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.MipMapDescription.MipmapSize">
            <summary>
            Size in bytes of this whole mipmap.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.MipMapDescription.Equals(SharpDX.Toolkit.Graphics.MipMapDescription)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.MipMapDescription.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.MipMapDescription.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.MipMapDescription.op_Equality(SharpDX.Toolkit.Graphics.MipMapDescription,SharpDX.Toolkit.Graphics.MipMapDescription)">
            <summary>
            Implements the ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.MipMapDescription.op_Inequality(SharpDX.Toolkit.Graphics.MipMapDescription,SharpDX.Toolkit.Graphics.MipMapDescription)">
            <summary>
            Implements the !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.PixelBuffer">
            <summary>
            An unmanaged buffer of pixels.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelBuffer.isStrictRowStride">
            <summary>
            True when RowStride == sizeof(pixelformat) * width
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.PixelBuffer.#ctor(System.Int32,System.Int32,SharpDX.DXGI.Format,System.Int32,System.Int32,System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Toolkit.Graphics.PixelBuffer" /> struct.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="format">The format.</param>
            <param name="rowStride">The row pitch.</param>
            <param name="bufferStride">The slice pitch.</param>
            <param name="dataPointer">The pixels.</param>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.PixelBuffer.Width">
            <summary>
            Gets the width.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.PixelBuffer.Height">
            <summary>
            Gets the height.
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.PixelBuffer.Format">
            <summary>
            Gets the format (this value can be changed)
            </summary>
            <value>The format.</value>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.PixelBuffer.PixelSize">
            <summary>
            Gets the pixel size in bytes.
            </summary>
            <value>The pixel size in bytes.</value>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.PixelBuffer.RowStride">
            <summary>
            Gets the row stride in number of bytes.
            </summary>
            <value>The row stride in number of bytes.</value>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.PixelBuffer.BufferStride">
            <summary>
            Gets the total size in bytes of this pixel buffer.
            </summary>
            <value>The size in bytes of the pixel buffer.</value>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.PixelBuffer.DataPointer">
            <summary>
            Gets the pointer to the pixel buffer.
            </summary>
            <value>The pointer to the pixel buffer.</value>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.PixelBuffer.CopyTo(SharpDX.Toolkit.Graphics.PixelBuffer)">
            <summary>
            Copies this pixel buffer to a destination pixel buffer.
            </summary>
            <param name="pixelBuffer">The destination pixel buffer.</param>
            <remarks>
            The destination pixel buffer must have exactly the same dimensions (width, height) and format than this instance.
            Destination buffer can have different row stride.
            </remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.PixelBuffer.GetPixel``1(System.Int32,System.Int32)">
            <summary>
            Gets the pixel value at a specified position.
            </summary>
            <typeparam name="T">Type of the pixel data</typeparam>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <returns>The pixel value.</returns>
            <remarks>
            Caution, this method doesn't check bounding.
            </remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.PixelBuffer.SetPixel``1(System.Int32,System.Int32,``0)">
            <summary>
            Gets the pixel value at a specified position.
            </summary>
            <typeparam name="T">Type of the pixel data</typeparam>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <param name="value">The pixel value.</param>
            <remarks>
            Caution, this method doesn't check bounding.
            </remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.PixelBuffer.GetPixels``1(System.Int32)">
            <summary>
            Gets scanline pixels from the buffer.
            </summary>
            <typeparam name="T">Type of the pixel data</typeparam>
            <param name="yOffset">The y line offset.</param>
            <returns>Scanline pixels from the buffer</returns>
            <exception cref="T:System.ArgumentException">If the sizeof(T) is an invalid size</exception>
            <remarks>
            This method is working on a row basis. The <paramref name="yOffset"/> is specifying the first row to get 
            the pixels from.
            </remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.PixelBuffer.GetPixels``1(``0[],System.Int32)">
            <summary>
            Gets scanline pixels from the buffer.
            </summary>
            <typeparam name="T">Type of the pixel data</typeparam>
            <param name="pixels">An allocated scanline pixel buffer</param>
            <param name="yOffset">The y line offset.</param>
            <returns>Scanline pixels from the buffer</returns>
            <exception cref="T:System.ArgumentException">If the sizeof(T) is an invalid size</exception>
            <remarks>
            This method is working on a row basis. The <paramref name="yOffset"/> is specifying the first row to get 
            the pixels from.
            </remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.PixelBuffer.GetPixels``1(``0[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets scanline pixels from the buffer.
            </summary>
            <typeparam name="T">Type of the pixel data</typeparam>
            <param name="pixels">An allocated scanline pixel buffer</param>
            <param name="yOffset">The y line offset.</param>
            <param name="pixelIndex">Offset into the destination <paramref name="pixels"/> buffer.</param>
            <param name="pixelCount">Number of pixels to write into the destination <paramref name="pixels"/> buffer.</param>
            <exception cref="T:System.ArgumentException">If the sizeof(T) is an invalid size</exception>
            <remarks>
            This method is working on a row basis. The <paramref name="yOffset"/> is specifying the first row to get 
            the pixels from.
            </remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.PixelBuffer.SetPixels``1(``0[],System.Int32)">
            <summary>
            Sets scanline pixels to the buffer.
            </summary>
            <typeparam name="T">Type of the pixel data</typeparam>
            <param name="sourcePixels">Source pixel buffer</param>
            <param name="yOffset">The y line offset.</param>
            <exception cref="T:System.ArgumentException">If the sizeof(T) is an invalid size</exception>
            <remarks>
            This method is working on a row basis. The <paramref name="yOffset"/> is specifying the first row to get 
            the pixels from.
            </remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.PixelBuffer.SetPixels``1(``0[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets scanline pixels to the buffer.
            </summary>
            <typeparam name="T">Type of the pixel data</typeparam>
            <param name="sourcePixels">Source pixel buffer</param>
            <param name="yOffset">The y line offset.</param>
            <param name="pixelIndex">Offset into the source <paramref name="sourcePixels"/> buffer.</param>
            <param name="pixelCount">Number of pixels to write into the source <paramref name="sourcePixels"/> buffer.</param>
            <exception cref="T:System.ArgumentException">If the sizeof(T) is an invalid size</exception>
            <remarks>
            This method is working on a row basis. The <paramref name="yOffset"/> is specifying the first row to get 
            the pixels from.
            </remarks>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.PixelBufferArray">
            <summary>
            Used by <see cref="T:SharpDX.Toolkit.Graphics.Image"/> to provide a selector to a <see cref="T:SharpDX.Toolkit.Graphics.PixelBuffer"/>.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.PixelBufferArray.Item(System.Int32)">
            <summary>
            Gets the pixel buffer.
            </summary>
            <returns>A <see cref="T:SharpDX.Toolkit.Graphics.PixelBuffer"/>.</returns>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.PixelBufferArray.Count">
            <summary>
            Gets the total number of pixel buffers.
            </summary>
            <returns>The total number of pixel buffers.</returns>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.PixelBufferArray.Item(System.Int32,System.Int32)">
            <summary>
            Gets the pixel buffer for the specified array/z slice and mipmap level.
            </summary>
            <param name="arrayOrDepthSlice">For 3D image, the parameter is the Z slice, otherwise it is an index into the texture array.</param>
            <param name="mipIndex">The mip map slice index.</param>
            <returns>A <see cref="T:SharpDX.Toolkit.Graphics.PixelBuffer"/>.</returns>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.PixelBufferArray.Item(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the pixel buffer for the specified array/z slice and mipmap level.
            </summary>
            <param name="arrayIndex">Index into the texture array. Must be set to 0 for 3D images.</param>
            <param name="zIndex">Z index for 3D image. Must be set to 0 for all 1D/2D images.</param>
            <param name="mipIndex">The mip map slice index.</param>
            <returns>A <see cref="T:SharpDX.Toolkit.Graphics.PixelBuffer"/>.</returns>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.PixelFormat">
            <summary>
            PixelFormat is equivalent to <see cref="T:SharpDX.DXGI.Format"/>.
            </summary>
            <remarks>
            This structure is implicitly castable to and from <see cref="T:SharpDX.DXGI.Format"/>, you can use it inplace where <see cref="T:SharpDX.DXGI.Format"/> is required
            and vice-versa.
            Usage is slightly different from <see cref="T:SharpDX.DXGI.Format"/>, as you have to select the type of the pixel format first
            and then access the available pixel formats for this type. Example: PixelFormat.UNorm.R8.
            </remarks>
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT</unmanaged>	
            <unmanaged-short>DXGI_FORMAT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.Value">
            <summary>
            Gets the value as a <see cref="T:SharpDX.DXGI.Format"/> enum.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.PixelFormat.#ctor(SharpDX.DXGI.Format)">
            <summary>
            Internal constructor.
            </summary>
            <param name="format"></param>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.PixelFormat.SizeInBytes">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.Unknown">
            <summary>
            
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.PixelFormat.A8">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.A8.UNorm">
            <summary>
            
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.PixelFormat.B5G5R5A1">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.B5G5R5A1.UNorm">
            <summary>
            
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.PixelFormat.B5G6R5">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.B5G6R5.UNorm">
            <summary>
            
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.PixelFormat.B8G8R8A8">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.B8G8R8A8.Typeless">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.B8G8R8A8.UNorm">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.B8G8R8A8.UNormSRgb">
            <summary>
            
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.PixelFormat.B8G8R8X8">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.B8G8R8X8.Typeless">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.B8G8R8X8.UNorm">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.B8G8R8X8.UNormSRgb">
            <summary>
            
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.PixelFormat.BC1">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.BC1.Typeless">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.BC1.UNorm">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.BC1.UNormSRgb">
            <summary>
            
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.PixelFormat.BC2">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.BC2.Typeless">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.BC2.UNorm">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.BC2.UNormSRgb">
            <summary>
            
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.PixelFormat.BC3">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.BC3.Typeless">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.BC3.UNorm">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.BC3.UNormSRgb">
            <summary>
            
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.PixelFormat.BC4">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.BC4.SNorm">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.BC4.Typeless">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.BC4.UNorm">
            <summary>
            
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.PixelFormat.BC5">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.BC5.SNorm">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.BC5.Typeless">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.BC5.UNorm">
            <summary>
            
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.PixelFormat.BC6H">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.BC6H.Typeless">
            <summary>
            
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.PixelFormat.BC7">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.BC7.Typeless">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.BC7.UNorm">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.BC7.UNormSRgb">
            <summary>
            
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.PixelFormat.R10G10B10A2">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.R10G10B10A2.Typeless">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.R10G10B10A2.UInt">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.R10G10B10A2.UNorm">
            <summary>
            
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.PixelFormat.R11G11B10">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.R11G11B10.Float">
            <summary>
            
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.PixelFormat.R16">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.R16.Float">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.R16.SInt">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.R16.SNorm">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.R16.Typeless">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.R16.UInt">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.R16.UNorm">
            <summary>
            
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.PixelFormat.R16G16">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.R16G16.Float">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.R16G16.SInt">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.R16G16.SNorm">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.R16G16.Typeless">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.R16G16.UInt">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.R16G16.UNorm">
            <summary>
            
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.PixelFormat.R16G16B16A16">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.R16G16B16A16.Float">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.R16G16B16A16.SInt">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.R16G16B16A16.SNorm">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.R16G16B16A16.Typeless">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.R16G16B16A16.UInt">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.R16G16B16A16.UNorm">
            <summary>
            
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.PixelFormat.R32">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.R32.Float">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.R32.SInt">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.R32.Typeless">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.R32.UInt">
            <summary>
            
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.PixelFormat.R32G32">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.R32G32.Float">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.R32G32.SInt">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.R32G32.Typeless">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.R32G32.UInt">
            <summary>
            
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.PixelFormat.R32G32B32">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.R32G32B32.Float">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.R32G32B32.SInt">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.R32G32B32.Typeless">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.R32G32B32.UInt">
            <summary>
            
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.PixelFormat.R32G32B32A32">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.R32G32B32A32.Float">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.R32G32B32A32.SInt">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.R32G32B32A32.Typeless">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.R32G32B32A32.UInt">
            <summary>
            
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.PixelFormat.R8">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.R8.SInt">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.R8.SNorm">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.R8.Typeless">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.R8.UInt">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.R8.UNorm">
            <summary>
            
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.PixelFormat.R8G8">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.R8G8.SInt">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.R8G8.SNorm">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.R8G8.Typeless">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.R8G8.UInt">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.R8G8.UNorm">
            <summary>
            
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.PixelFormat.R8G8B8A8">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.R8G8B8A8.SInt">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.R8G8B8A8.SNorm">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.R8G8B8A8.Typeless">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.R8G8B8A8.UInt">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.R8G8B8A8.UNorm">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.R8G8B8A8.UNormSRgb">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.PixelFormat.op_Implicit(SharpDX.Toolkit.Graphics.PixelFormat)~SharpDX.DXGI.Format">
            <summary>
            
            </summary>
            <param name="from"></param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.PixelFormat.op_Implicit(SharpDX.DXGI.Format)~SharpDX.Toolkit.Graphics.PixelFormat">
            <summary>
            
            </summary>
            <param name="from"></param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.PixelFormat.Equals(SharpDX.Toolkit.Graphics.PixelFormat)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.PixelFormat.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.PixelFormat.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.PixelFormat.op_Equality(SharpDX.Toolkit.Graphics.PixelFormat,SharpDX.Toolkit.Graphics.PixelFormat)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.PixelFormat.op_Inequality(SharpDX.Toolkit.Graphics.PixelFormat,SharpDX.Toolkit.Graphics.PixelFormat)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.PixelFormat.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.RenderTarget1D">
            <summary>
            A RenderTarget1D front end to <see cref="T:SharpDX.Direct3D11.Texture1D"/>.
            </summary>
            <remarks>
            This class instantiates a <see cref="T:SharpDX.Toolkit.Graphics.Texture1D"/> with the binding flags <see cref="F:SharpDX.Direct3D11.BindFlags.RenderTarget"/>.
            This class is also castable to <see cref="T:SharpDX.Direct3D11.RenderTargetView"/>.
            </remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.RenderTarget1D.op_Implicit(SharpDX.Toolkit.Graphics.RenderTarget1D)~SharpDX.Direct3D11.RenderTargetView">
            <summary>
            RenderTargetView casting operator.
            </summary>
            <param name="from">Source for the.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.RenderTarget1D.InitializeViews">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.RenderTarget1D.Clone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.RenderTarget1D.New(SharpDX.Direct3D11.Device,SharpDX.Direct3D11.Texture1DDescription)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.RenderTarget1D"/> from a <see cref="T:SharpDX.Direct3D11.Texture1DDescription"/>.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Direct3D11.Device"/>.</param>
            <param name="description">The description.</param>
            <returns>
            A new instance of <see cref="T:SharpDX.Toolkit.Graphics.RenderTarget1D"/> class.
            </returns>
            <msdn-id>ff476520</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateTexture1D([In] const D3D11_TEXTURE1D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture1D** ppTexture1D)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateTexture1D</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.RenderTarget1D.New(SharpDX.Direct3D11.Device,SharpDX.Direct3D11.Texture1D)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.RenderTarget1D"/> from a <see cref="T:SharpDX.Direct3D11.Texture1D"/>.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Direct3D11.Device"/>.</param>
            <param name="texture">The native texture <see cref="T:SharpDX.Direct3D11.Texture1D"/>.</param>
            <returns>
            A new instance of <see cref="T:SharpDX.Toolkit.Graphics.RenderTarget1D"/> class.
            </returns>
            <msdn-id>ff476520</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateTexture1D([In] const D3D11_TEXTURE1D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture1D** ppTexture1D)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateTexture1D</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.RenderTarget1D.New(SharpDX.Direct3D11.Device,System.Int32,SharpDX.Toolkit.Graphics.PixelFormat,SharpDX.Toolkit.Graphics.TextureFlags,System.Int32)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.RenderTarget1D" /> with a single mipmap.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Direct3D11.Device"/>.</param>
            <param name="width">The width.</param>
            <param name="format">Describes the format to use.</param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <param name="arraySize">Size of the texture 1D array, default to 1.</param>
            <returns>A new instance of <see cref="T:SharpDX.Toolkit.Graphics.RenderTarget1D" /> class.</returns>
            <msdn-id>ff476520</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateTexture1D([In] const D3D11_TEXTURE1D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture1D** ppTexture1D)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateTexture1D</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.RenderTarget1D.New(SharpDX.Direct3D11.Device,System.Int32,SharpDX.Toolkit.Graphics.MipMapCount,SharpDX.Toolkit.Graphics.PixelFormat,SharpDX.Toolkit.Graphics.TextureFlags,System.Int32)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.RenderTarget1D" />.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Direct3D11.Device"/>.</param>
            <param name="width">The width.</param>
            <param name="mipCount">Number of mipmaps, set to true to have all mipmaps, set to an int >=1 for a particular mipmap count.</param>
            <param name="format">Describes the format to use.</param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <param name="arraySize">Size of the texture 1D array, default to 1.</param>
            <returns>A new instance of <see cref="T:SharpDX.Toolkit.Graphics.RenderTarget1D" /> class.</returns>
            <msdn-id>ff476520</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateTexture1D([In] const D3D11_TEXTURE1D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture1D** ppTexture1D)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateTexture1D</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.RenderTarget1D.NewRenderTargetDescription(System.Int32,SharpDX.Toolkit.Graphics.PixelFormat,SharpDX.Toolkit.Graphics.TextureFlags,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="width"></param>
            <param name="format"></param>
            <param name="textureFlags"></param>
            <param name="mipCount"></param>
            <param name="arraySize"></param>
            <returns></returns>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.RenderTarget2D">
            <summary>
            A RenderTarget2D front end to <see cref="T:SharpDX.Direct3D11.Texture2D"/>.
            </summary>
            <remarks>
            This class instantiates a <see cref="T:SharpDX.Toolkit.Graphics.Texture2D"/> with the binding flags <see cref="F:SharpDX.Direct3D11.BindFlags.RenderTarget"/>.
            This class is also castable to <see cref="T:SharpDX.Direct3D11.RenderTargetView"/>.
            </remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.RenderTarget2D.op_Implicit(SharpDX.Toolkit.Graphics.RenderTarget2D)~SharpDX.Direct3D11.RenderTargetView">
            <summary>
            RenderTargetView casting operator.
            </summary>
            <param name="from">Source for the.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.RenderTarget2D.InitializeViews">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.RenderTarget2D.Clone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.RenderTarget2D.op_Implicit(SharpDX.Toolkit.Graphics.RenderTarget2D)~SharpDX.Direct3D11.Texture2D">
            <summary>
            <see cref="T:SharpDX.Direct3D11.Texture2D"/> casting operator.
            </summary>
            <param name="from">From the Texture1D.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.RenderTarget2D.op_Implicit(SharpDX.Toolkit.Graphics.RenderTarget2D)~SharpDX.Direct3D11.Resource">
            <summary>
            Implicit casting operator to <see cref="T:SharpDX.Direct3D11.Resource"/>
            </summary>
            <param name="from">The GraphicsResource to convert from.</param>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.RenderTarget3D">
            <summary>
            A RenderTarget3D front end to <see cref="T:SharpDX.Direct3D11.Texture3D"/>.
            </summary>
            <remarks>
            This class instantiates a <see cref="T:SharpDX.Toolkit.Graphics.Texture3D"/> with the binding flags <see cref="F:SharpDX.Direct3D11.BindFlags.RenderTarget"/>.
            This class is also castable to <see cref="T:SharpDX.Direct3D11.RenderTargetView"/>.
            </remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.RenderTarget3D.op_Implicit(SharpDX.Toolkit.Graphics.RenderTarget3D)~SharpDX.Direct3D11.RenderTargetView">
            <summary>
            RenderTargetView casting operator.
            </summary>
            <param name="from">Source for the.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.RenderTarget3D.InitializeViews">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.RenderTarget3D.Clone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.RenderTarget3D.New(SharpDX.Direct3D11.Device,SharpDX.Direct3D11.Texture3DDescription)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.RenderTarget3D"/> from a <see cref="T:SharpDX.Direct3D11.Texture3DDescription"/>.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Direct3D11.Device"/>.</param>
            <param name="description">The description.</param>
            <returns>
            A new instance of <see cref="T:SharpDX.Toolkit.Graphics.RenderTarget3D"/> class.
            </returns>
            <msdn-id>ff476521</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateTexture3D([In] const D3D11_TEXTURE3D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture3D** ppTexture3D)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateTexture3D</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.RenderTarget3D.New(SharpDX.Direct3D11.Device,SharpDX.Direct3D11.Texture3D)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.RenderTarget3D"/> from a <see cref="T:SharpDX.Direct3D11.Texture3D"/>.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Direct3D11.Device"/>.</param>
            <param name="texture">The native texture <see cref="T:SharpDX.Direct3D11.Texture3D"/>.</param>
            <returns>
            A new instance of <see cref="T:SharpDX.Toolkit.Graphics.RenderTarget3D"/> class.
            </returns>
            <msdn-id>ff476521</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateTexture3D([In] const D3D11_TEXTURE3D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture3D** ppTexture3D)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateTexture3D</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.RenderTarget3D.New(SharpDX.Direct3D11.Device,System.Int32,System.Int32,System.Int32,SharpDX.Toolkit.Graphics.PixelFormat,SharpDX.Toolkit.Graphics.TextureFlags,System.Int32)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.RenderTarget3D" /> with a single mipmap.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Direct3D11.Device"/>.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="depth">The depth.</param>
            <param name="format">Describes the format to use.</param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <param name="arraySize">Size of the texture 3D array, default to 1.</param>
            <returns>A new instance of <see cref="T:SharpDX.Toolkit.Graphics.RenderTarget3D" /> class.</returns>
            <msdn-id>ff476521</msdn-id>
              <unmanaged>HRESULT ID3D11Device::CreateTexture3D([In] const D3D11_TEXTURE3D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture3D** ppTexture3D)</unmanaged>
              <unmanaged-short>ID3D11Device::CreateTexture3D</unmanaged-short>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.RenderTarget3D.New(SharpDX.Direct3D11.Device,System.Int32,System.Int32,System.Int32,SharpDX.Toolkit.Graphics.MipMapCount,SharpDX.Toolkit.Graphics.PixelFormat,SharpDX.Toolkit.Graphics.TextureFlags,System.Int32)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.RenderTarget3D" />.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Direct3D11.Device"/>.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="depth">The depth.</param>
            <param name="mipCount">Number of mipmaps, set to true to have all mipmaps, set to an int >=1 for a particular mipmap count.</param>
            <param name="format">Describes the format to use.</param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <param name="arraySize">Size of the texture 3D array, default to 1.</param>
            <returns>A new instance of <see cref="T:SharpDX.Toolkit.Graphics.RenderTarget3D" /> class.</returns>
            <msdn-id>ff476521</msdn-id>
              <unmanaged>HRESULT ID3D11Device::CreateTexture3D([In] const D3D11_TEXTURE3D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture3D** ppTexture3D)</unmanaged>
              <unmanaged-short>ID3D11Device::CreateTexture3D</unmanaged-short>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.RenderTarget3D.NewRenderTargetDescription(System.Int32,System.Int32,System.Int32,SharpDX.Toolkit.Graphics.PixelFormat,SharpDX.Toolkit.Graphics.TextureFlags,System.Int32)">
            <summary>
            
            </summary>
            <param name="width"></param>
            <param name="height"></param>
            <param name="depth"></param>
            <param name="format"></param>
            <param name="textureFlags"></param>
            <param name="mipCount"></param>
            <returns></returns>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.RenderTargetCube">
            <summary>
            A RenderTargetCube front end to <see cref="T:SharpDX.Direct3D11.Texture2D"/>.
            </summary>
            <remarks>
            This class instantiates a <see cref="T:SharpDX.Toolkit.Graphics.Texture2D"/> with the binding flags <see cref="F:SharpDX.Direct3D11.BindFlags.RenderTarget"/>.
            This class is also castable to <see cref="T:SharpDX.Direct3D11.RenderTargetView"/>.
            </remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.RenderTargetCube.op_Implicit(SharpDX.Toolkit.Graphics.RenderTargetCube)~SharpDX.Direct3D11.RenderTargetView">
            <summary>
            RenderTargetView casting operator.
            </summary>
            <param name="from">Source for the.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.RenderTargetCube.InitializeViews">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.RenderTargetCube.Clone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.RenderTargetCube.New(SharpDX.Direct3D11.Device,SharpDX.Direct3D11.Texture2DDescription)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.RenderTargetCube"/> from a <see cref="T:SharpDX.Direct3D11.Texture2DDescription"/>.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Direct3D11.Device"/>.</param>
            <param name="description">The description.</param>
            <returns>
            A new instance of <see cref="T:SharpDX.Toolkit.Graphics.RenderTargetCube"/> class.
            </returns>
            <msdn-id>ff476521</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateTexture2D([In] const D3D11_TEXTURE2D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture2D** ppTexture2D)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateTexture2D</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.RenderTargetCube.New(SharpDX.Direct3D11.Device,SharpDX.Direct3D11.Texture2D)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.RenderTargetCube"/> from a <see cref="T:SharpDX.Direct3D11.Texture2D"/>.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Direct3D11.Device"/>.</param>
            <param name="texture">The native texture <see cref="T:SharpDX.Direct3D11.Texture2D"/>.</param>
            <returns>
            A new instance of <see cref="T:SharpDX.Toolkit.Graphics.RenderTargetCube"/> class.
            </returns>
            <msdn-id>ff476521</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateTexture2D([In] const D3D11_TEXTURE2D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture2D** ppTexture2D)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateTexture2D</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.RenderTargetCube.New(SharpDX.Direct3D11.Device,System.Int32,SharpDX.Toolkit.Graphics.PixelFormat,SharpDX.Toolkit.Graphics.TextureFlags)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.RenderTargetCube" /> with a single mipmap.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Direct3D11.Device"/>.</param>
            <param name="size">The size (in pixels) of the top-level faces of the cube texture.</param>
            <param name="format">Describes the format to use.</param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <returns>A new instance of <see cref="T:SharpDX.Toolkit.Graphics.RenderTargetCube" /> class.</returns>
            <msdn-id>ff476521</msdn-id>
              <unmanaged>HRESULT ID3D11Device::CreateTexture2D([In] const D3D11_TEXTURE2D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture2D** ppTexture2D)</unmanaged>
              <unmanaged-short>ID3D11Device::CreateTexture2D</unmanaged-short>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.RenderTargetCube.New(SharpDX.Direct3D11.Device,System.Int32,SharpDX.Toolkit.Graphics.MipMapCount,SharpDX.Toolkit.Graphics.PixelFormat,SharpDX.Toolkit.Graphics.TextureFlags)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.RenderTargetCube" />.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Direct3D11.Device"/>.</param>
            <param name="size">The size (in pixels) of the top-level faces of the cube texture.</param>
            <param name="mipCount">Number of mipmaps, set to true to have all mipmaps, set to an int >=1 for a particular mipmap count.</param>
            <param name="format">Describes the format to use.</param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <returns>A new instance of <see cref="T:SharpDX.Toolkit.Graphics.RenderTargetCube" /> class.</returns>
            <msdn-id>ff476521</msdn-id>
              <unmanaged>HRESULT ID3D11Device::CreateTexture2D([In] const D3D11_TEXTURE2D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture2D** ppTexture2D)</unmanaged>
              <unmanaged-short>ID3D11Device::CreateTexture2D</unmanaged-short>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.RenderTargetCube.NewRenderTargetDescription(System.Int32,SharpDX.Toolkit.Graphics.PixelFormat,SharpDX.Toolkit.Graphics.TextureFlags,System.Int32)">
            <summary>
            
            </summary>
            <param name="size"></param>
            <param name="format"></param>
            <param name="flags"></param>
            <param name="mipCount"></param>
            <returns></returns>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.RenderTargetViewSelector">
            <summary>
            Used by <see cref="T:SharpDX.Toolkit.Graphics.RenderTarget2D"/> to provide a selector to a <see cref="T:SharpDX.Direct3D11.RenderTargetView"/>.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.RenderTargetViewSelector.Item(SharpDX.Toolkit.Graphics.ViewType,System.Int32,System.Int32)">
            <summary>
            Gets a specific <see cref="T:SharpDX.Direct3D11.RenderTargetView" /> from this texture.
            </summary>
            <param name="viewType">Type of the view slice.</param>
            <param name="arrayOrDepthSlice">The texture array slice index.</param>
            <param name="mipIndex">The mip map slice index.</param>
            <returns>An <see cref="T:SharpDX.Direct3D11.RenderTargetView" /></returns>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.ShaderResourceViewSelector">
            <summary>
            Used by <see cref="T:SharpDX.Toolkit.Graphics.Texture"/> to provide a selector to a <see cref="T:SharpDX.Direct3D11.ShaderResourceView"/>.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.ShaderResourceViewSelector.Item(SharpDX.Toolkit.Graphics.ViewType,System.Int32,System.Int32)">
            <summary>
            Gets a specific <see cref="T:SharpDX.Direct3D11.ShaderResourceView" /> from this texture.
            </summary>
            <param name="viewType">Type of the view.</param>
            <param name="arrayOrDepthSlice">The array or depth slice.</param>
            <param name="mipIndex">Index of the mip.</param>
            <returns>An <see cref="T:SharpDX.Direct3D11.ShaderResourceView" /></returns>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.ShaderResourceViewSelector.Item(SharpDX.DXGI.Format,SharpDX.Toolkit.Graphics.ViewType,System.Int32,System.Int32)">
            <summary>
            Gets a specific <see cref="T:SharpDX.Direct3D11.ShaderResourceView" /> from this texture.
            </summary>
            <param name="viewFormat">The view format.</param>
            <param name="viewType">Type of the view.</param>
            <param name="arrayOrDepthSlice">The array or depth slice.</param>
            <param name="mipIndex">Index of the mip.</param>
            <returns>An <see cref="T:SharpDX.Direct3D11.ShaderResourceView" /></returns>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.Texture">
            <summary>
            Base class for texture resources.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.Texture.Description">
            <summary>
            Common description for this texture.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.Texture.ShaderResourceView">
            <summary>
            Gets the selector for a <see cref="F:SharpDX.Toolkit.Graphics.Texture.ShaderResourceView"/>
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.Texture.RenderTargetView">
            <summary>
            Gets the selector for a <see cref="F:SharpDX.Toolkit.Graphics.Texture.RenderTargetView"/>
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.Texture.UnorderedAccessView">
            <summary>
            Gets the selector for a <see cref="F:SharpDX.Toolkit.Graphics.Texture.UnorderedAccessView"/>
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.Texture.IsBlockCompressed">
            <summary>
            Gets a boolean indicating whether this <see cref="T:SharpDX.Toolkit.Graphics.Texture"/> is a using a block compress format (BC1, BC2, BC3, BC4, BC5, BC6H, BC7).
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.Texture.RowStride">
            <summary>
            The width stride in bytes (number of bytes per row).
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.Texture.DepthStride">
            <summary>
            The depth stride in bytes (number of bytes per depth slice).
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture.#ctor(SharpDX.Direct3D11.Device,SharpDX.Toolkit.Graphics.TextureDescription)">
            <summary>
            
            </summary>
            <param name="device"></param>
            <param name="description"></param>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.Texture.Width">
            <summary>	
            <dd> <p>Texture width (in texels). The  range is from 1 to <see cref="F:SharpDX.Direct3D11.Resource.MaximumTexture1DSize"/> (16384). However, the range is actually constrained by the feature level at which you create the rendering device. For more information about restrictions, see Remarks.</p> </dd>	
            </summary>	
            <remarks>
            This field is valid for all textures: <see cref="T:SharpDX.Toolkit.Graphics.Texture1D"/>, <see cref="T:SharpDX.Toolkit.Graphics.Texture2D"/>, <see cref="T:SharpDX.Toolkit.Graphics.Texture3D"/> and <see cref="T:SharpDX.Toolkit.Graphics.TextureCube"/>.
            </remarks>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.Texture.Height">
            <summary>	
            <dd> <p>Texture height (in texels). The  range is from 1 to <see cref="F:SharpDX.Direct3D11.Resource.MaximumTexture3DSize"/> (2048). However, the range is actually constrained by the feature level at which you create the rendering device. For more information about restrictions, see Remarks.</p> </dd>	
            </summary>	
            <remarks>
            This field is only valid for <see cref="T:SharpDX.Toolkit.Graphics.Texture2D"/>, <see cref="T:SharpDX.Toolkit.Graphics.Texture3D"/> and <see cref="T:SharpDX.Toolkit.Graphics.TextureCube"/>.
            </remarks>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.Texture.Depth">
            <summary>	
            <dd> <p>Texture depth (in texels). The  range is from 1 to <see cref="F:SharpDX.Direct3D11.Resource.MaximumTexture3DSize"/> (2048). However, the range is actually constrained by the feature level at which you create the rendering device. For more information about restrictions, see Remarks.</p> </dd>	
            </summary>	
            <remarks>
            This field is only valid for <see cref="T:SharpDX.Toolkit.Graphics.Texture3D"/>.
            </remarks>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.Texture.Format">
            <summary>
            Gets the texture format.
            </summary>
            <value>The texture format.</value>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture.Initialize(SharpDX.Direct3D11.DeviceChild)">
            <summary>
            
            </summary>
            <param name="resource"></param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture.InitializeViews">
            <summary>
            Initializes the views provided by this texture.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture.GetMipMapDescription(System.Int32)">
            <summary>
            Gets the mipmap description of this instance for the specified mipmap level.
            </summary>
            <param name="mipmap">The mipmap.</param>
            <returns>A description of a particular mipmap for this texture.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture.CalculateMipLevels(System.Int32,SharpDX.Toolkit.Graphics.MipMapCount)">
            <summary>
            Calculates the number of miplevels for a Texture 1D.
            </summary>
            <param name="width">The width of the texture.</param>
            <param name="mipLevels">A <see cref="T:SharpDX.Toolkit.Graphics.MipMapCount"/>, set to true to calculates all mipmaps, to false to calculate only 1 miplevel, or > 1 to calculate a specific amount of levels.</param>
            <returns>The number of miplevels.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture.CalculateMipLevels(System.Int32,System.Int32,SharpDX.Toolkit.Graphics.MipMapCount)">
            <summary>
            Calculates the number of miplevels for a Texture 2D.
            </summary>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <param name="mipLevels">A <see cref="T:SharpDX.Toolkit.Graphics.MipMapCount"/>, set to true to calculates all mipmaps, to false to calculate only 1 miplevel, or > 1 to calculate a specific amount of levels.</param>
            <returns>The number of miplevels.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture.CalculateMipLevels(System.Int32,System.Int32,System.Int32,SharpDX.Toolkit.Graphics.MipMapCount)">
            <summary>
            Calculates the number of miplevels for a Texture 2D.
            </summary>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <param name="depth">The depth of the texture.</param>
            <param name="mipLevels">A <see cref="T:SharpDX.Toolkit.Graphics.MipMapCount"/>, set to true to calculates all mipmaps, to false to calculate only 1 miplevel, or > 1 to calculate a specific amount of levels.</param>
            <returns>The number of miplevels.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture.CalculateMipSize(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="width"></param>
            <param name="mipLevel"></param>
            <returns></returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture.GetSubResourceIndex(System.Int32,System.Int32)">
            <summary>
            Gets the absolute sub-resource index from the array and mip slice.
            </summary>
            <param name="arraySlice">The array slice index.</param>
            <param name="mipSlice">The mip slice index.</param>
            <returns>A value equals to arraySlice * Description.MipLevels + mipSlice.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture.CalculateWidth``1(System.Int32)">
            <summary>
            Calculates the expected width of a texture using a specified type.
            </summary>
            <typeparam name="TData">The type of the T pixel data.</typeparam>
            <returns>The expected width</returns>
            <exception cref="T:System.ArgumentException">If the size is invalid</exception>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture.CalculatePixelDataCount``1(System.Int32)">
            <summary>
            Calculates the number of pixel data this texture is requiring for a particular mip level.
            </summary>
            <typeparam name="TData">The type of the T pixel data.</typeparam>
            <param name="mipLevel">The mip level.</param>
            <returns>The number of pixel data.</returns>
            <remarks>This method is used to allocated a texture data buffer to hold pixel data: var textureData = new T[ texture.CalculatePixelCount&lt;T&gt;() ] ;.</remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture.Clone">
            <summary>
            Makes a copy of this texture.
            </summary>
            <remarks>
            This method doesn't copy the content of the texture.
            </remarks>
            <returns>
            A copy of this texture.
            </returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture.Clone``1">
            <summary>
            Makes a copy of this texture with type casting.
            </summary>
            <remarks>
            This method doesn't copy the content of the texture.
            </remarks>
            <returns>
            A copy of this texture.
            </returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture.New(SharpDX.Direct3D11.Device,SharpDX.Toolkit.Graphics.TextureDescription)">
            <summary>
            Creates a new texture with the specified generic texture description.
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
            <param name="description">The description.</param>
            <returns>A Texture instance, either a RenderTarget or DepthStencilBuffer or Texture, depending on Binding flags.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture.ToStaging">
            <summary>
            Return an equivalent staging texture CPU read-writable from this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture.GetShaderResourceView(SharpDX.DXGI.Format,SharpDX.Toolkit.Graphics.ViewType,System.Int32,System.Int32)">
            <summary>
            Gets a specific <see cref="F:SharpDX.Toolkit.Graphics.Texture.ShaderResourceView" /> from this texture.
            </summary>
            <param name="viewFormat"></param>
            <param name="viewType">Type of the view slice.</param>
            <param name="arrayOrDepthSlice">The texture array slice index.</param>
            <param name="mipIndex">The mip map slice index.</param>
            <returns>An <see cref="F:SharpDX.Toolkit.Graphics.Texture.ShaderResourceView" /></returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture.GetRenderTargetView(SharpDX.Toolkit.Graphics.ViewType,System.Int32,System.Int32)">
            <summary>
            Gets a specific <see cref="F:SharpDX.Toolkit.Graphics.Texture.RenderTargetView" /> from this texture.
            </summary>
            <param name="viewType">Type of the view slice.</param>
            <param name="arrayOrDepthSlice">The texture array slice index.</param>
            <param name="mipMapSlice">The mip map slice index.</param>
            <returns>An <see cref="F:SharpDX.Toolkit.Graphics.Texture.RenderTargetView" /></returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture.GetUnorderedAccessView(System.Int32,System.Int32)">
            <summary>
            Gets a specific <see cref="F:SharpDX.Toolkit.Graphics.Texture.UnorderedAccessView"/> from this texture.
            </summary>
            <param name="arrayOrDepthSlice">The texture array slice index.</param>
            <param name="mipMapSlice">The mip map slice index.</param>
            <returns>An <see cref="F:SharpDX.Toolkit.Graphics.Texture.UnorderedAccessView"/></returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture.op_Implicit(SharpDX.Toolkit.Graphics.Texture)~SharpDX.Direct3D11.ShaderResourceView">
            <summary>
            ShaderResourceView casting operator.
            </summary>
            <param name="from">Source for the.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture.op_Implicit(SharpDX.Toolkit.Graphics.Texture)~SharpDX.Direct3D11.UnorderedAccessView">
            <summary>
            UnorderedAccessView casting operator.
            </summary>
            <param name="from">Source for the.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture.Load(SharpDX.Direct3D11.Device,System.IO.Stream,SharpDX.Toolkit.Graphics.TextureFlags,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Loads a texture from a stream.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Direct3D11.Device"/>.</param>
            <param name="stream">The stream to load the texture from.</param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <param name="usage">Usage of the resource. Default is <see cref="F:SharpDX.Direct3D11.ResourceUsage.Immutable"/> </param>
            <returns>A texture</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture.Load(SharpDX.Direct3D11.Device,System.String,SharpDX.Toolkit.Graphics.TextureFlags,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Loads a texture from a file.
            </summary>
            <param name="device">Specify the device used to load and create a texture from a file.</param>
            <param name="filePath">The file to load the texture from.</param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <param name="usage">Usage of the resource. Default is <see cref="F:SharpDX.Direct3D11.ResourceUsage.Immutable"/> </param>
            <returns>A texture</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture.CalculateMipMapCount(SharpDX.Toolkit.Graphics.MipMapCount,System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates the mip map count from a requested level.
            </summary>
            <param name="requestedLevel">The requested level.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="depth">The depth.</param>
            <returns>The resulting mipmap count (clamp to [1, maxMipMapCount] for this texture)</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture.GetDataBox``1(SharpDX.DXGI.Format,System.Int32,System.Int32,System.Int32,``0[],System.IntPtr)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="format"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="depth"></param>
            <param name="textureData"></param>
            <param name="fixedPointer"></param>
            <returns></returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture.OnPropertyChanged(System.String)">
            <summary>
            Called when name changed for this component.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture.CompareTo(SharpDX.Toolkit.Graphics.Texture)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.Texture1D">
            <summary>
            A Texture 1D front end to <see cref="T:SharpDX.Direct3D11.Texture1D"/>.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture1D.Clone">
            <summary>
            Makes a copy of this texture.
            </summary>
            <remarks>
            This method doesn't copy the content of the texture.
            </remarks>
            <returns>
            A copy of this texture.
            </returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture1D.New(SharpDX.Direct3D11.Device,SharpDX.Direct3D11.Texture1DDescription)">
            <summary>
            Creates a new texture from a <see cref="T:SharpDX.Direct3D11.Texture1DDescription"/>.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Direct3D11.Device"/>.</param>
            <param name="description">The description.</param>
            <returns>
            A new instance of <see cref="T:SharpDX.Toolkit.Graphics.Texture1D"/> class.
            </returns>
            <msdn-id>ff476520</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateTexture1D([In] const D3D11_TEXTURE1D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture1D** ppTexture1D)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateTexture1D</unmanaged-short>		
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture1D.New(SharpDX.Direct3D11.Device,SharpDX.Direct3D11.Texture1D)">
            <summary>
            Creates a new texture from a <see cref="T:SharpDX.Direct3D11.Texture1D"/>.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Direct3D11.Device"/>.</param>
            <param name="texture">The native texture <see cref="T:SharpDX.Direct3D11.Texture1D"/>.</param>
            <returns>
            A new instance of <see cref="T:SharpDX.Toolkit.Graphics.Texture1D"/> class.
            </returns>
            <msdn-id>ff476520</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateTexture1D([In] const D3D11_TEXTURE1D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture1D** ppTexture1D)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateTexture1D</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture1D.New(SharpDX.Direct3D11.Device,System.Int32,SharpDX.Toolkit.Graphics.PixelFormat,SharpDX.Toolkit.Graphics.TextureFlags,System.Int32,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.Texture1D"/> with a single mipmap.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Direct3D11.Device"/>.</param>
            <param name="width">The width.</param>
            <param name="format">Describes the format to use.</param>
            <param name="usage">The usage.</param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <param name="arraySize">Size of the texture 2D array, default to 1.</param>
            <returns>
            A new instance of <see cref="T:SharpDX.Toolkit.Graphics.Texture1D"/> class.
            </returns>
            <msdn-id>ff476520</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateTexture1D([In] const D3D11_TEXTURE1D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture1D** ppTexture1D)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateTexture1D</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture1D.New(SharpDX.Direct3D11.Device,System.Int32,SharpDX.Toolkit.Graphics.MipMapCount,SharpDX.Toolkit.Graphics.PixelFormat,SharpDX.Toolkit.Graphics.TextureFlags,System.Int32,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.Texture1D"/>.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Direct3D11.Device"/>.</param>
            <param name="width">The width.</param>
            <param name="mipCount">Number of mipmaps, set to true to have all mipmaps, set to an int >=1 for a particular mipmap count.</param>
            <param name="format">Describes the format to use.</param>
            <param name="usage">The usage.</param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <param name="arraySize">Size of the texture 2D array, default to 1.</param>
            <returns>
            A new instance of <see cref="T:SharpDX.Toolkit.Graphics.Texture1D"/> class.
            </returns>
            <msdn-id>ff476520</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateTexture1D([In] const D3D11_TEXTURE1D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture1D** ppTexture1D)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateTexture1D</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture1D.New``1(SharpDX.Direct3D11.Device,System.Int32,SharpDX.Toolkit.Graphics.PixelFormat,``0[],SharpDX.Toolkit.Graphics.TextureFlags,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.Texture1D" /> with a single level of mipmap.
            </summary>
            <typeparam name="T">Type of the initial data to upload to the texture</typeparam>
            <param name="device">The <see cref="T:SharpDX.Direct3D11.Device"/>.</param>
            <param name="width">The width.</param>
            <param name="format">Describes the format to use.</param>
            <param name="usage">The usage.</param>
            <param name="textureData">Texture data. Size of must be equal to sizeof(Format) * width </param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <returns>A new instance of <see cref="T:SharpDX.Toolkit.Graphics.Texture1D" /> class.</returns>
            <msdn-id>ff476521</msdn-id>
              <unmanaged>HRESULT ID3D11Device::CreateTexture1D([In] const D3D11_Texture1D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture1D** ppTexture1D)</unmanaged>
              <unmanaged-short>ID3D11Device::CreateTexture1D</unmanaged-short>
            <remarks>
            The first dimension of mipMapTextures describes the number of array (Texture1D Array), second dimension is the mipmap, the third is the texture data for a particular mipmap.
            </remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture1D.New(SharpDX.Direct3D11.Device,SharpDX.Toolkit.Graphics.Image,SharpDX.Toolkit.Graphics.TextureFlags,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.Texture1D" /> directly from an <see cref="T:SharpDX.Toolkit.Graphics.Image"/>.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Direct3D11.Device"/>.</param>
            <param name="image">An image in CPU memory.</param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <param name="usage">The usage.</param>
            <returns>A new instance of <see cref="T:SharpDX.Toolkit.Graphics.Texture1D" /> class.</returns>
            <msdn-id>ff476521</msdn-id>
            <unmanaged>HRESULT ID3D11Device::CreateTexture1D([In] const D3D11_TEXTURE1D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture1D** ppTexture1D)</unmanaged>
            <unmanaged-short>ID3D11Device::CreateTexture1D</unmanaged-short>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture1D.Load(SharpDX.Direct3D11.Device,System.IO.Stream,SharpDX.Toolkit.Graphics.TextureFlags,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Loads a 1D texture from a stream.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Direct3D11.Device"/>.</param>
            <param name="stream">The stream to load the texture from.</param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <param name="usage">Usage of the resource. Default is <see cref="F:SharpDX.Direct3D11.ResourceUsage.Immutable"/> </param>
            <exception cref="T:System.ArgumentException">If the texture is not of type 1D</exception>
            <returns>A texture</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture1D.Load(SharpDX.Direct3D11.Device,System.String,SharpDX.Toolkit.Graphics.TextureFlags,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Loads a 1D texture from a stream.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Direct3D11.Device"/>.</param>
            <param name="filePath">The file to load the texture from.</param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <param name="usage">Usage of the resource. Default is <see cref="F:SharpDX.Direct3D11.ResourceUsage.Immutable"/> </param>
            <exception cref="T:System.ArgumentException">If the texture is not of type 1D</exception>
            <returns>A texture</returns>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.Texture1DBase">
            <summary>
            Abstract class front end to <see cref="T:SharpDX.Direct3D11.Texture1D"/>.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.Texture1DBase.Resource">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture1DBase.#ctor(SharpDX.Direct3D11.Device,SharpDX.Direct3D11.Texture1DDescription)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Toolkit.Graphics.Texture1DBase" /> class.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Direct3D11.Device"/>.</param>
            <param name="description1D">The description.</param>
            <msdn-id>ff476520</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateTexture1D([In] const D3D11_TEXTURE1D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture1D** ppTexture1D)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateTexture1D</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture1DBase.#ctor(SharpDX.Direct3D11.Device,SharpDX.Direct3D11.Texture1DDescription,SharpDX.DataBox[])">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Toolkit.Graphics.Texture1DBase" /> class.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Direct3D11.Device"/>.</param>
            <param name="description1D">The description.</param>
            <param name="dataBox">A variable-length parameters list containing data rectangles.</param>
            <msdn-id>ff476520</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateTexture1D([In] const D3D11_TEXTURE1D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture1D** ppTexture1D)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateTexture1D</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture1DBase.#ctor(SharpDX.Direct3D11.Device,SharpDX.Direct3D11.Texture1D)">
            <summary>
            Specialised constructor for use only by derived classes.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Direct3D11.Device"/>.</param>
            <param name="texture">The texture.</param>
            <msdn-id>ff476520</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateTexture1D([In] const D3D11_TEXTURE1D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture1D** ppTexture1D)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateTexture1D</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture1DBase.ToStaging">
            <summary>
            Return an equivalent staging texture CPU read-writable from this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture1DBase.op_Implicit(SharpDX.Toolkit.Graphics.Texture1DBase)~SharpDX.DXGI.Surface">
            <summary>
            <see cref="T:SharpDX.DXGI.Surface"/> casting operator.
            </summary>
            <param name="from">From the Texture1D.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture1DBase.InitializeViews">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture1DBase.NewDescription(System.Int32,SharpDX.Toolkit.Graphics.PixelFormat,SharpDX.Toolkit.Graphics.TextureFlags,System.Int32,System.Int32,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            
            </summary>
            <param name="width"></param>
            <param name="format"></param>
            <param name="textureFlags"></param>
            <param name="mipCount"></param>
            <param name="arraySize"></param>
            <param name="usage"></param>
            <returns></returns>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.Texture2D">
            <summary>
            A Texture 2D front end to <see cref="T:SharpDX.Direct3D11.Texture2D"/>.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture2D.Clone">
            <summary>
            Makes a copy of this texture.
            </summary>
            <remarks>
            This method doesn't copy the content of the texture.
            </remarks>
            <returns>
            A copy of this texture.
            </returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture2D.New(SharpDX.Direct3D11.Device,SharpDX.Direct3D11.Texture2DDescription)">
            <summary>
            Creates a new texture from a <see cref="T:SharpDX.Direct3D11.Texture2DDescription"/>.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Direct3D11.Device"/>.</param>
            <param name="description">The description.</param>
            <returns>
            A new instance of <see cref="T:SharpDX.Toolkit.Graphics.Texture2D"/> class.
            </returns>
            <msdn-id>ff476521</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateTexture2D([In] const D3D11_TEXTURE2D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture2D** ppTexture2D)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateTexture2D</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture2D.New(SharpDX.Direct3D11.Device,SharpDX.Direct3D11.Texture2D)">
            <summary>
            Creates a new texture from a <see cref="T:SharpDX.Direct3D11.Texture2D"/>.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Direct3D11.Device"/>.</param>
            <param name="texture">The native texture <see cref="T:SharpDX.Direct3D11.Texture2D"/>.</param>
            <returns>
            A new instance of <see cref="T:SharpDX.Toolkit.Graphics.Texture2D"/> class.
            </returns>
            <msdn-id>ff476521</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateTexture2D([In] const D3D11_TEXTURE2D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture2D** ppTexture2D)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateTexture2D</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture2D.New(SharpDX.Direct3D11.Device,System.Int32,System.Int32,SharpDX.Toolkit.Graphics.PixelFormat,SharpDX.Toolkit.Graphics.TextureFlags,System.Int32,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.Texture2D" /> with a single mipmap.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Direct3D11.Device"/>.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="format">Describes the format to use.</param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <param name="arraySize">Size of the texture 2D array, default to 1.</param>
            <param name="usage">The usage.</param>
            <returns>A new instance of <see cref="T:SharpDX.Toolkit.Graphics.Texture2D" /> class.</returns>
            <msdn-id>ff476521</msdn-id>
              <unmanaged>HRESULT ID3D11Device::CreateTexture2D([In] const D3D11_TEXTURE2D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture2D** ppTexture2D)</unmanaged>
              <unmanaged-short>ID3D11Device::CreateTexture2D</unmanaged-short>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture2D.New(SharpDX.Direct3D11.Device,System.Int32,System.Int32,SharpDX.Toolkit.Graphics.MipMapCount,SharpDX.Toolkit.Graphics.PixelFormat,SharpDX.Toolkit.Graphics.TextureFlags,System.Int32,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.Texture2D" />.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Direct3D11.Device"/>.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="format">Describes the format to use.</param>
            <param name="mipCount">Number of mipmaps, set to true to have all mipmaps, set to an int >=1 for a particular mipmap count.</param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <param name="arraySize">Size of the texture 2D array, default to 1.</param>
            <param name="usage">The usage.</param>
            <returns>A new instance of <see cref="T:SharpDX.Toolkit.Graphics.Texture2D" /> class.</returns>
            <msdn-id>ff476521</msdn-id>
              <unmanaged>HRESULT ID3D11Device::CreateTexture2D([In] const D3D11_TEXTURE2D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture2D** ppTexture2D)</unmanaged>
              <unmanaged-short>ID3D11Device::CreateTexture2D</unmanaged-short>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture2D.New``1(SharpDX.Direct3D11.Device,System.Int32,System.Int32,SharpDX.Toolkit.Graphics.PixelFormat,``0[],SharpDX.Toolkit.Graphics.TextureFlags,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.Texture2D" /> with a single level of mipmap.
            </summary>
            <typeparam name="T">Type of the pixel data to upload to the texture.</typeparam>
            <param name="device">The <see cref="T:SharpDX.Direct3D11.Device"/>.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="format">Describes the format to use.</param>
            <param name="usage">The usage.</param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <param name="textureData">The texture data for a single mipmap and a single array slice. See remarks</param>
            <returns>A new instance of <see cref="T:SharpDX.Toolkit.Graphics.Texture2D" /> class.</returns>
            <msdn-id>ff476521</msdn-id>
              <unmanaged>HRESULT ID3D11Device::CreateTexture2D([In] const D3D11_TEXTURE2D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture2D** ppTexture2D)</unmanaged>
              <unmanaged-short>ID3D11Device::CreateTexture2D</unmanaged-short>
            <remarks>
            Each value in textureData is a pixel in the destination texture.
            </remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture2D.New(SharpDX.Direct3D11.Device,System.Int32,System.Int32,SharpDX.Toolkit.Graphics.MipMapCount,SharpDX.Toolkit.Graphics.PixelFormat,SharpDX.DataBox[],SharpDX.Toolkit.Graphics.TextureFlags,System.Int32,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.Texture2D" />.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Direct3D11.Device"/>.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="format">Describes the format to use.</param>
            <param name="mipCount">Number of mipmaps, set to true to have all mipmaps, set to an int >=1 for a particular mipmap count.</param>
            <param name="textureData">Texture data through an array of <see cref="T:SharpDX.DataBox"/> </param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <param name="arraySize">Size of the texture 2D array, default to 1.</param>
            <param name="usage">The usage.</param>
            <returns>A new instance of <see cref="T:SharpDX.Toolkit.Graphics.Texture2D" /> class.</returns>
            <msdn-id>ff476521</msdn-id>
              <unmanaged>HRESULT ID3D11Device::CreateTexture2D([In] const D3D11_TEXTURE2D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture2D** ppTexture2D)</unmanaged>
              <unmanaged-short>ID3D11Device::CreateTexture2D</unmanaged-short>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture2D.New(SharpDX.Direct3D11.Device,SharpDX.Toolkit.Graphics.Image,SharpDX.Toolkit.Graphics.TextureFlags,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.Texture2D" /> directly from an <see cref="T:SharpDX.Toolkit.Graphics.Image"/>.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Direct3D11.Device"/>.</param>
            <param name="image">An image in CPU memory.</param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <param name="usage">The usage.</param>
            <returns>A new instance of <see cref="T:SharpDX.Toolkit.Graphics.Texture2D" /> class.</returns>
            <msdn-id>ff476521</msdn-id>
            <unmanaged>HRESULT ID3D11Device::CreateTexture2D([In] const D3D11_TEXTURE2D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture2D** ppTexture2D)</unmanaged>
            <unmanaged-short>ID3D11Device::CreateTexture2D</unmanaged-short>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture2D.Load(SharpDX.Direct3D11.Device,System.IO.Stream,SharpDX.Toolkit.Graphics.TextureFlags,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Loads a 2D texture from a stream.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Direct3D11.Device"/>.</param>
            <param name="stream">The stream to load the texture from.</param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <param name="usage">Usage of the resource. Default is <see cref="F:SharpDX.Direct3D11.ResourceUsage.Immutable"/> </param>
            <exception cref="T:System.ArgumentException">If the texture is not of type 2D</exception>
            <returns>A texture</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture2D.Load(SharpDX.Direct3D11.Device,System.String,SharpDX.Toolkit.Graphics.TextureFlags,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Loads a 2D texture from a stream.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Direct3D11.Device"/>.</param>
            <param name="filePath">The file to load the texture from.</param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <param name="usage">Usage of the resource. Default is <see cref="F:SharpDX.Direct3D11.ResourceUsage.Immutable"/> </param>
            <exception cref="T:System.ArgumentException">If the texture is not of type 2D</exception>
            <returns>A texture</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture2D.op_Implicit(SharpDX.Toolkit.Graphics.Texture2D)~SharpDX.Direct3D11.Resource">
            <summary>
            Implicit casting operator to <see cref="T:SharpDX.Direct3D11.Resource"/>
            </summary>
            <param name="from">The GraphicsResource to convert from.</param>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.Texture2DBase">
            <summary>
            Abstract class front end to <see cref="T:SharpDX.Direct3D11.Texture2D"/>.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.Texture2DBase.Resource">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture2DBase.#ctor(SharpDX.Direct3D11.Device,SharpDX.Direct3D11.Texture2DDescription)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Toolkit.Graphics.Texture2DBase" /> class.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Direct3D11.Device"/>.</param>
            <param name="description2D">The description.</param>
            <msdn-id>ff476521</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateTexture2D([In] const D3D11_TEXTURE2D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture2D** ppTexture2D)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateTexture2D</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture2DBase.#ctor(SharpDX.Direct3D11.Device,SharpDX.Direct3D11.Texture2DDescription,SharpDX.DataBox[])">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Toolkit.Graphics.Texture2DBase" /> class.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Direct3D11.Device"/>.</param>
            <param name="description2D">The description.</param>
            <param name="dataBoxes">A variable-length parameters list containing data rectangles.</param>
            <msdn-id>ff476521</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateTexture2D([In] const D3D11_TEXTURE2D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture2D** ppTexture2D)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateTexture2D</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture2DBase.#ctor(SharpDX.Direct3D11.Device,SharpDX.Direct3D11.Texture2D)">
            <summary>
            Specialised constructor for use only by derived classes.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Direct3D11.Device"/>.</param>
            <param name="texture">The texture.</param>
            <msdn-id>ff476521</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateTexture2D([In] const D3D11_TEXTURE2D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture2D** ppTexture2D)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateTexture2D</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture2DBase.ToStaging">
            <summary>
            Return an equivalent staging texture CPU read-writable from this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture2DBase.GetDefaultViewFormat">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture2DBase.op_Implicit(SharpDX.Toolkit.Graphics.Texture2DBase)~SharpDX.DXGI.Surface">
            <summary>
            <see cref="T:SharpDX.DXGI.Surface"/> casting operator.
            </summary>
            <param name="from">From the Texture1D.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture2DBase.InitializeViews">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture2DBase.NewDescription(System.Int32,System.Int32,SharpDX.Toolkit.Graphics.PixelFormat,SharpDX.Toolkit.Graphics.TextureFlags,System.Int32,System.Int32,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            
            </summary>
            <param name="width"></param>
            <param name="height"></param>
            <param name="format"></param>
            <param name="textureFlags"></param>
            <param name="mipCount"></param>
            <param name="arraySize"></param>
            <param name="usage"></param>
            <returns></returns>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.Texture3D">
            <summary>
            A Texture 3D front end to <see cref="T:SharpDX.Direct3D11.Texture3D"/>.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture3D.Clone">
            <summary>
            Makes a copy of this texture.
            </summary>
            <remarks>
            This method doesn't copy the content of the texture.
            </remarks>
            <returns>
            A copy of this texture.
            </returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture3D.New(SharpDX.Direct3D11.Device,SharpDX.Direct3D11.Texture3DDescription)">
            <summary>
            Creates a new texture from a <see cref="T:SharpDX.Direct3D11.Texture3DDescription"/>.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Direct3D11.Device"/>.</param>
            <param name="description">The description.</param>
            <returns>
            A new instance of <see cref="T:SharpDX.Toolkit.Graphics.Texture3D"/> class.
            </returns>
            <msdn-id>ff476522</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateTexture3D([In] const D3D11_TEXTURE3D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture3D** ppTexture3D)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateTexture3D</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture3D.New(SharpDX.Direct3D11.Device,SharpDX.Direct3D11.Texture3D)">
            <summary>
            Creates a new texture from a <see cref="T:SharpDX.Direct3D11.Texture3D"/>.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Direct3D11.Device"/>.</param>
            <param name="texture">The native texture <see cref="T:SharpDX.Direct3D11.Texture3D"/>.</param>
            <returns>
            A new instance of <see cref="T:SharpDX.Toolkit.Graphics.Texture3D"/> class.
            </returns>
            <msdn-id>ff476522</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateTexture3D([In] const D3D11_TEXTURE3D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture3D** ppTexture3D)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateTexture3D</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture3D.New(SharpDX.Direct3D11.Device,System.Int32,System.Int32,System.Int32,SharpDX.Toolkit.Graphics.PixelFormat,SharpDX.Toolkit.Graphics.TextureFlags,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.Texture3D"/> with a single mipmap.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Direct3D11.Device"/>.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="depth">The depth.</param>
            <param name="format">Describes the format to use.</param>
            <param name="usage">The usage.</param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <returns>
            A new instance of <see cref="T:SharpDX.Toolkit.Graphics.Texture3D"/> class.
            </returns>
            <msdn-id>ff476522</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateTexture3D([In] const D3D11_TEXTURE3D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture3D** ppTexture3D)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateTexture3D</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture3D.New(SharpDX.Direct3D11.Device,System.Int32,System.Int32,System.Int32,SharpDX.Toolkit.Graphics.MipMapCount,SharpDX.Toolkit.Graphics.PixelFormat,SharpDX.Toolkit.Graphics.TextureFlags,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.Texture3D"/>.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Direct3D11.Device"/>.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="depth">The depth.</param>
            <param name="mipCount">Number of mipmaps, set to true to have all mipmaps, set to an int >=1 for a particular mipmap count.</param>
            <param name="format">Describes the format to use.</param>
            <param name="usage">The usage.</param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <returns>
            A new instance of <see cref="T:SharpDX.Toolkit.Graphics.Texture3D"/> class.
            </returns>
            <msdn-id>ff476522</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateTexture3D([In] const D3D11_TEXTURE3D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture3D** ppTexture3D)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateTexture3D</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture3D.New``1(SharpDX.Direct3D11.Device,System.Int32,System.Int32,System.Int32,SharpDX.Toolkit.Graphics.PixelFormat,``0[],SharpDX.Toolkit.Graphics.TextureFlags,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.Texture3D" /> with texture data for the firs map.
            </summary>
            <typeparam name="T">Type of the data to upload to the texture</typeparam>
            <param name="device">The <see cref="T:SharpDX.Direct3D11.Device"/>.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="depth">The depth.</param>
            <param name="format">Describes the format to use.</param>
            <param name="usage">The usage.</param>
            <param name="textureData">The texture data, width * height * depth data </param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <returns>A new instance of <see cref="T:SharpDX.Toolkit.Graphics.Texture3D" /> class.</returns>
            <remarks>
            The first dimension of mipMapTextures describes the number of is an array ot Texture3D Array
            </remarks>
            <msdn-id>ff476522</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateTexture3D([In] const D3D11_TEXTURE3D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture3D** ppTexture3D)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateTexture3D</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture3D.New(SharpDX.Direct3D11.Device,System.Int32,System.Int32,System.Int32,SharpDX.Toolkit.Graphics.MipMapCount,SharpDX.Toolkit.Graphics.PixelFormat,SharpDX.DataBox[],SharpDX.Toolkit.Graphics.TextureFlags,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.Texture3D"/>.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Direct3D11.Device"/>.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="depth">The depth.</param>
            <param name="mipCount">Number of mipmaps, set to true to have all mipmaps, set to an int >=1 for a particular mipmap count.</param>
            <param name="format">Describes the format to use.</param>
            <param name="usage">The usage.</param>
            <param name="textureData">DataBox used to fill texture data.</param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <returns>
            A new instance of <see cref="T:SharpDX.Toolkit.Graphics.Texture3D"/> class.
            </returns>
            <msdn-id>ff476522</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateTexture3D([In] const D3D11_TEXTURE3D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture3D** ppTexture3D)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateTexture3D</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture3D.New(SharpDX.Direct3D11.Device,SharpDX.Toolkit.Graphics.Image,SharpDX.Toolkit.Graphics.TextureFlags,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.Texture3D" /> directly from an <see cref="T:SharpDX.Toolkit.Graphics.Image"/>.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Direct3D11.Device"/>.</param>
            <param name="image">An image in CPU memory.</param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <param name="usage">The usage.</param>
            <returns>A new instance of <see cref="T:SharpDX.Toolkit.Graphics.Texture3D" /> class.</returns>
            <msdn-id>ff476522</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateTexture3D([In] const D3D11_TEXTURE3D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture3D** ppTexture3D)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateTexture3D</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture3D.Load(SharpDX.Direct3D11.Device,System.IO.Stream,SharpDX.Toolkit.Graphics.TextureFlags,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Loads a 3D texture from a stream.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Direct3D11.Device"/>.</param>
            <param name="stream">The stream to load the texture from.</param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <param name="usage">Usage of the resource. Default is <see cref="F:SharpDX.Direct3D11.ResourceUsage.Immutable"/> </param>
            <exception cref="T:System.ArgumentException">If the texture is not of type 3D</exception>
            <returns>A texture</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture3D.Load(SharpDX.Direct3D11.Device,System.String,SharpDX.Toolkit.Graphics.TextureFlags,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Loads a 3D texture from a stream.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Direct3D11.Device"/>.</param>
            <param name="filePath">The file to load the texture from.</param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <param name="usage">Usage of the resource. Default is <see cref="F:SharpDX.Direct3D11.ResourceUsage.Immutable"/> </param>
            <exception cref="T:System.ArgumentException">If the texture is not of type 3D</exception>
            <returns>A texture</returns>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.Texture3DBase">
            <summary>
            Abstract class front end to <see cref="T:SharpDX.Direct3D11.Texture3D"/>.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.Texture3DBase.Resource">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture3DBase.#ctor(SharpDX.Direct3D11.Device,SharpDX.Direct3D11.Texture3DDescription)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Toolkit.Graphics.Texture3DBase" /> class.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Direct3D11.Device"/>.</param>
            <param name="description3D">The description.</param>
            <msdn-id>ff476522</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateTexture3D([In] const D3D11_TEXTURE3D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture3D** ppTexture3D)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateTexture3D</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture3DBase.#ctor(SharpDX.Direct3D11.Device,SharpDX.Direct3D11.Texture3DDescription,SharpDX.DataBox[])">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Toolkit.Graphics.Texture3DBase" /> class.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Direct3D11.Device"/>.</param>
            <param name="description3D">The description.</param>
            <param name="dataRectangles">A variable-length parameters list containing data rectangles.</param>
            <msdn-id>ff476522</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateTexture3D([In] const D3D11_TEXTURE3D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture3D** ppTexture3D)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateTexture3D</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture3DBase.#ctor(SharpDX.Direct3D11.Device,SharpDX.Direct3D11.Texture3D)">
            <summary>
            Specialised constructor for use only by derived classes.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Direct3D11.Device"/>.</param>
            <param name="texture">The texture.</param>
            <msdn-id>ff476522</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateTexture3D([In] const D3D11_TEXTURE3D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture3D** ppTexture3D)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateTexture3D</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture3DBase.ToStaging">
            <summary>
            Return an equivalent staging texture CPU read-writable from this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture3DBase.InitializeViews">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture3DBase.NewDescription(System.Int32,System.Int32,System.Int32,SharpDX.Toolkit.Graphics.PixelFormat,SharpDX.Toolkit.Graphics.TextureFlags,System.Int32,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            
            </summary>
            <param name="width"></param>
            <param name="height"></param>
            <param name="depth"></param>
            <param name="format"></param>
            <param name="textureFlags"></param>
            <param name="mipCount"></param>
            <param name="usage"></param>
            <returns></returns>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.TextureCube">
            <summary>
            A TextureCube front end to <see cref="T:SharpDX.Direct3D11.Texture2D"/>.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.TextureCube.Clone">
            <summary>
            Makes a copy of this texture.
            </summary>
            <remarks>
            This method doesn't copy the content of the texture.
            </remarks>
            <returns>
            A copy of this texture.
            </returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.TextureCube.New(SharpDX.Direct3D11.Device,SharpDX.Direct3D11.Texture2DDescription)">
            <summary>
            Creates a new texture from a <see cref="T:SharpDX.Direct3D11.Texture2DDescription"/>.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Direct3D11.Device"/>.</param>
            <param name="description">The description.</param>
            <returns>
            A new instance of <see cref="T:SharpDX.Toolkit.Graphics.TextureCube"/> class.
            </returns>
            <msdn-id>ff476521</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateTexture2D([In] const D3D11_TEXTURE2D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture2D** ppTexture2D)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateTexture2D</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.TextureCube.New(SharpDX.Direct3D11.Device,SharpDX.Direct3D11.Texture2D)">
            <summary>
            Creates a new texture from a <see cref="T:SharpDX.Direct3D11.Texture2D"/>.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Direct3D11.Device"/>.</param>
            <param name="texture">The native texture <see cref="T:SharpDX.Direct3D11.Texture2D"/>.</param>
            <returns>
            A new instance of <see cref="T:SharpDX.Toolkit.Graphics.TextureCube"/> class.
            </returns>
            <msdn-id>ff476521</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateTexture2D([In] const D3D11_TEXTURE2D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture2D** ppTexture2D)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateTexture2D</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.TextureCube.New(SharpDX.Direct3D11.Device,System.Int32,SharpDX.Toolkit.Graphics.PixelFormat,SharpDX.Toolkit.Graphics.TextureFlags,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.TextureCube"/>.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Direct3D11.Device"/>.</param>
            <param name="size">The size (in pixels) of the top-level faces of the cube texture.</param>
            <param name="format">Describes the format to use.</param>
            <param name="usage">The usage.</param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <returns>
            A new instance of <see cref="T:SharpDX.Toolkit.Graphics.Texture2D"/> class.
            </returns>
            <msdn-id>ff476521</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateTexture2D([In] const D3D11_TEXTURE2D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture2D** ppTexture2D)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateTexture2D</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.TextureCube.New(SharpDX.Direct3D11.Device,System.Int32,SharpDX.Toolkit.Graphics.MipMapCount,SharpDX.Toolkit.Graphics.PixelFormat,SharpDX.Toolkit.Graphics.TextureFlags,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.TextureCube"/>.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Direct3D11.Device"/>.</param>
            <param name="size">The size (in pixels) of the top-level faces of the cube texture.</param>
            <param name="mipCount">Number of mipmaps, set to true to have all mipmaps, set to an int >=1 for a particular mipmap count.</param>
            <param name="format">Describes the format to use.</param>
            <param name="usage">The usage.</param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <returns>
            A new instance of <see cref="T:SharpDX.Toolkit.Graphics.Texture2D"/> class.
            </returns>
            <msdn-id>ff476521</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateTexture2D([In] const D3D11_TEXTURE2D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture2D** ppTexture2D)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateTexture2D</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.TextureCube.New``1(SharpDX.Direct3D11.Device,System.Int32,SharpDX.Toolkit.Graphics.PixelFormat,``0[][],SharpDX.Toolkit.Graphics.TextureFlags,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.TextureCube" /> from a initial data..
            </summary>
            <typeparam name="T">Type of a pixel data</typeparam>
            <param name="device">The <see cref="T:SharpDX.Direct3D11.Device"/>.</param>
            <param name="size">The size (in pixels) of the top-level faces of the cube texture.</param>
            <param name="format">Describes the format to use.</param>
            <param name="usage">The usage.</param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <param name="textureData">an array of 6 textures. See remarks</param>
            <returns>A new instance of <see cref="T:SharpDX.Toolkit.Graphics.TextureCube" /> class.</returns>
            <msdn-id>ff476521</msdn-id>
              <unmanaged>HRESULT ID3D11Device::CreateTexture2D([In] const D3D11_TEXTURE2D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture2D** ppTexture2D)</unmanaged>
              <unmanaged-short>ID3D11Device::CreateTexture2D</unmanaged-short>
            <remarks>
            The first dimension of mipMapTextures describes the number of array (TextureCube Array), the second is the texture data for a particular cube face.
            </remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.TextureCube.New(SharpDX.Direct3D11.Device,System.Int32,SharpDX.Toolkit.Graphics.PixelFormat,SharpDX.DataBox[],SharpDX.Toolkit.Graphics.TextureFlags,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.TextureCube" /> from a initial data..
            </summary>
            <param name="device">The <see cref="T:SharpDX.Direct3D11.Device"/>.</param>
            <param name="size">The size (in pixels) of the top-level faces of the cube texture.</param>
            <param name="format">Describes the format to use.</param>
            <param name="usage">The usage.</param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <param name="textureData">an array of 6 textures. See remarks</param>
            <returns>A new instance of <see cref="T:SharpDX.Toolkit.Graphics.TextureCube" /> class.</returns>
            <msdn-id>ff476521</msdn-id>
              <unmanaged>HRESULT ID3D11Device::CreateTexture2D([In] const D3D11_TEXTURE2D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture2D** ppTexture2D)</unmanaged>
              <unmanaged-short>ID3D11Device::CreateTexture2D</unmanaged-short>
            <remarks>
            The first dimension of mipMapTextures describes the number of array (TextureCube Array), the second is the texture data for a particular cube face.
            </remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.TextureCube.New(SharpDX.Direct3D11.Device,SharpDX.Toolkit.Graphics.Image,SharpDX.Toolkit.Graphics.TextureFlags,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.TextureCube" /> directly from an <see cref="T:SharpDX.Toolkit.Graphics.Image"/>.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Direct3D11.Device"/>.</param>
            <param name="image">An image in CPU memory.</param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <param name="usage">The usage.</param>
            <returns>A new instance of <see cref="T:SharpDX.Toolkit.Graphics.TextureCube" /> class.</returns>
            <msdn-id>ff476521</msdn-id>
            <unmanaged>HRESULT ID3D11Device::CreateTexture2D([In] const D3D11_TEXTURE2D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture2D** ppTexture2D)</unmanaged>
            <unmanaged-short>ID3D11Device::CreateTexture2D</unmanaged-short>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.TextureCube.Load(SharpDX.Direct3D11.Device,System.IO.Stream,SharpDX.Toolkit.Graphics.TextureFlags,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Loads a Cube texture from a stream.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Direct3D11.Device"/>.</param>
            <param name="stream">The stream to load the texture from.</param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <param name="usage">Usage of the resource. Default is <see cref="F:SharpDX.Direct3D11.ResourceUsage.Immutable"/> </param>
            <exception cref="T:System.ArgumentException">If the texture is not of type Cube</exception>
            <returns>A texture</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.TextureCube.Load(SharpDX.Direct3D11.Device,System.String,SharpDX.Toolkit.Graphics.TextureFlags,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Loads a Cube texture from a stream.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Direct3D11.Device"/>.</param>
            <param name="filePath">The file to load the texture from.</param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <param name="usage">Usage of the resource. Default is <see cref="F:SharpDX.Direct3D11.ResourceUsage.Immutable"/> </param>
            <exception cref="T:System.ArgumentException">If the texture is not of type Cube</exception>
            <returns>A texture</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.TextureCube.NewTextureCubeDescription(System.Int32,SharpDX.Toolkit.Graphics.PixelFormat,SharpDX.Toolkit.Graphics.TextureFlags,System.Int32,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            
            </summary>
            <param name="size"></param>
            <param name="format"></param>
            <param name="flags"></param>
            <param name="mipCount"></param>
            <param name="usage"></param>
            <returns></returns>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.TextureDescription">
            <summary>
            A Common description for all textures.
            </summary>
            <remarks>
            This class exposes the union of all fields exposed by fields in <see cref="T:SharpDX.Direct3D11.Texture1DDescription"/>, 
            <see cref="T:SharpDX.Direct3D11.Texture2DDescription"/>, <see cref="T:SharpDX.Direct3D11.Texture3DDescription"/>.
            It provides also 2-way implicit conversions for 1D, 2D, 3D textures descriptions.
            </remarks>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.TextureDescription.Dimension">
            <summary>
            The dimension of a texture.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.TextureDescription.Width">
            <summary>	
            <dd> <p>Texture width (in texels). The  range is from 1 to <see cref="F:SharpDX.Direct3D11.Resource.MaximumTexture1DSize"/> (16384). However, the range is actually constrained by the feature level at which you create the rendering device. For more information about restrictions, see Remarks.</p> </dd>	
            </summary>	
            <remarks>
            This field is valid for all textures: <see cref="T:SharpDX.Toolkit.Graphics.Texture1D"/>, <see cref="T:SharpDX.Toolkit.Graphics.Texture2D"/>, <see cref="T:SharpDX.Toolkit.Graphics.Texture3D"/> and <see cref="T:SharpDX.Toolkit.Graphics.TextureCube"/>.
            </remarks>
            <msdn-id>ff476252</msdn-id>	
            <unmanaged>unsigned int Width</unmanaged>	
            <unmanaged-short>unsigned int Width</unmanaged-short>	
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.TextureDescription.Height">
            <summary>	
            <dd> <p>Texture height (in texels). The  range is from 1 to <see cref="F:SharpDX.Direct3D11.Resource.MaximumTexture3DSize"/> (2048). However, the range is actually constrained by the feature level at which you create the rendering device. For more information about restrictions, see Remarks.</p> </dd>	
            </summary>	
            <remarks>
            This field is only valid for <see cref="T:SharpDX.Toolkit.Graphics.Texture2D"/>, <see cref="T:SharpDX.Toolkit.Graphics.Texture3D"/> and <see cref="T:SharpDX.Toolkit.Graphics.TextureCube"/>.
            </remarks>
            <msdn-id>ff476254</msdn-id>	
            <unmanaged>unsigned int Height</unmanaged>	
            <unmanaged-short>unsigned int Height</unmanaged-short>	
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.TextureDescription.Depth">
            <summary>	
            <dd> <p>Texture depth (in texels). The  range is from 1 to <see cref="F:SharpDX.Direct3D11.Resource.MaximumTexture3DSize"/> (2048). However, the range is actually constrained by the feature level at which you create the rendering device. For more information about restrictions, see Remarks.</p> </dd>	
            </summary>	
            <remarks>
            This field is only valid for <see cref="T:SharpDX.Toolkit.Graphics.Texture3D"/>.
            </remarks>
            <msdn-id>ff476254</msdn-id>	
            <unmanaged>unsigned int Depth</unmanaged>	
            <unmanaged-short>unsigned int Depth</unmanaged-short>	
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.TextureDescription.ArraySize">
            <summary>	
            <dd> <p>Number of textures in the array. The  range is from 1 to <see cref="F:SharpDX.Direct3D11.Resource.MaximumTexture1DArraySize"/> (2048). However, the range is actually constrained by the feature level at which you create the rendering device. For more information about restrictions, see Remarks.</p> </dd>	
            </summary>	
            <remarks>
            This field is only valid for <see cref="T:SharpDX.Toolkit.Graphics.Texture1D"/>, <see cref="T:SharpDX.Toolkit.Graphics.Texture2D"/> and <see cref="T:SharpDX.Toolkit.Graphics.TextureCube"/>
            </remarks>
            <remarks>
            This field is only valid for textures: <see cref="T:SharpDX.Toolkit.Graphics.Texture1D"/>, <see cref="T:SharpDX.Toolkit.Graphics.Texture2D"/> and <see cref="T:SharpDX.Toolkit.Graphics.TextureCube"/>.
            </remarks>
            <msdn-id>ff476252</msdn-id>	
            <unmanaged>unsigned int ArraySize</unmanaged>	
            <unmanaged-short>unsigned int ArraySize</unmanaged-short>	
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.TextureDescription.MipLevels">
            <summary>	
            <dd> <p>The maximum number of mipmap levels in the texture. See the remarks in <strong><see cref="T:SharpDX.Direct3D11.ShaderResourceViewDescription.Texture1DResource"/></strong>. Use 1 for a multisampled texture; or 0 to generate a full set of subtextures.</p> </dd>	
            </summary>	
            <msdn-id>ff476252</msdn-id>	
            <unmanaged>unsigned int MipLevels</unmanaged>	
            <unmanaged-short>unsigned int MipLevels</unmanaged-short>	
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.TextureDescription.Format">
            <summary>	
            <dd> <p>Texture format (see <strong><see cref="T:SharpDX.DXGI.Format"/></strong>).</p> </dd>	
            </summary>	
            <msdn-id>ff476252</msdn-id>	
            <unmanaged>DXGI_FORMAT Format</unmanaged>	
            <unmanaged-short>DXGI_FORMAT Format</unmanaged-short>	
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.TextureDescription.SampleDescription">
            <summary>	
            <dd> <p>Structure that specifies multisampling parameters for the texture. See <strong><see cref="T:SharpDX.DXGI.SampleDescription"/></strong>.</p> </dd>	
            </summary>	
            <remarks>
            This field is only valid for <see cref="T:SharpDX.Toolkit.Graphics.Texture2D"/>.
            </remarks>
            <msdn-id>ff476253</msdn-id>	
            <unmanaged>DXGI_SAMPLE_DESC SampleDesc</unmanaged>	
            <unmanaged-short>DXGI_SAMPLE_DESC SampleDesc</unmanaged-short>	
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.TextureDescription.Usage">
            <summary>	
            <dd> <p>Value that identifies how the texture is to be read from and written to. The most common value is <see cref="F:SharpDX.Direct3D11.ResourceUsage.Default"/>; see <strong><see cref="T:SharpDX.Direct3D11.ResourceUsage"/></strong> for all possible values.</p> </dd>	
            </summary>	
            <msdn-id>ff476252</msdn-id>	
            <unmanaged>D3D11_USAGE Usage</unmanaged>	
            <unmanaged-short>D3D11_USAGE Usage</unmanaged-short>	
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.TextureDescription.BindFlags">
            <summary>	
            <dd> <p>Flags (see <strong><see cref="T:SharpDX.Direct3D11.BindFlags"/></strong>) for binding to pipeline stages. The flags can be combined by a logical OR. For a 1D texture, the allowable values are: <see cref="F:SharpDX.Direct3D11.BindFlags.ShaderResource"/>, <see cref="F:SharpDX.Direct3D11.BindFlags.RenderTarget"/> and <see cref="F:SharpDX.Direct3D11.BindFlags.DepthStencil"/>.</p> </dd>	
            </summary>	
            <msdn-id>ff476252</msdn-id>	
            <unmanaged>D3D11_BIND_FLAG BindFlags</unmanaged>	
            <unmanaged-short>D3D11_BIND_FLAG BindFlags</unmanaged-short>	
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.TextureDescription.CpuAccessFlags">
            <summary>	
            <dd> <p>Flags (see <strong><see cref="T:SharpDX.Direct3D11.CpuAccessFlags"/></strong>) to specify the types of CPU access allowed. Use 0 if CPU access is not required. These flags can be combined with a logical OR.</p> </dd>	
            </summary>	
            <msdn-id>ff476252</msdn-id>	
            <unmanaged>D3D11_CPU_ACCESS_FLAG CPUAccessFlags</unmanaged>	
            <unmanaged-short>D3D11_CPU_ACCESS_FLAG CPUAccessFlags</unmanaged-short>	
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.TextureDescription.OptionFlags">
            <summary>	
            <dd> <p>Flags (see <strong><see cref="T:SharpDX.Direct3D11.ResourceOptionFlags"/></strong>) that identify other, less common resource options. Use 0 if none of these flags apply. These flags can be combined with a logical OR.</p> </dd>	
            </summary>	
            <msdn-id>ff476252</msdn-id>	
            <unmanaged>D3D11_RESOURCE_MISC_FLAG MiscFlags</unmanaged>	
            <unmanaged-short>D3D11_RESOURCE_MISC_FLAG MiscFlags</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.TextureDescription.ToStagingDescription">
            <summary>
            Gets the staging description for this instance..
            </summary>
            <returns>A Staging description</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.TextureDescription.Equals(SharpDX.Toolkit.Graphics.TextureDescription)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.TextureDescription.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.TextureDescription.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.TextureDescription.op_Equality(SharpDX.Toolkit.Graphics.TextureDescription,SharpDX.Toolkit.Graphics.TextureDescription)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.TextureDescription.op_Inequality(SharpDX.Toolkit.Graphics.TextureDescription,SharpDX.Toolkit.Graphics.TextureDescription)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.TextureDescription.op_Implicit(SharpDX.Direct3D11.Texture1DDescription)~SharpDX.Toolkit.Graphics.TextureDescription">
            <summary>
            Performs an explicit conversion from <see cref="T:SharpDX.Direct3D11.Texture2DDescription"/> to <see cref="T:SharpDX.Toolkit.Graphics.TextureDescription"/>.
            </summary>
            <param name="description">The texture description.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.TextureDescription.op_Implicit(SharpDX.Toolkit.Graphics.TextureDescription)~SharpDX.Direct3D11.Texture1DDescription">
            <summary>
            Performs an explicit conversion from <see cref="T:SharpDX.Toolkit.Graphics.TextureDescription"/> to <see cref="T:SharpDX.Direct3D11.Texture2DDescription"/>.
            </summary>
            <param name="description">The texture description.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.TextureDescription.op_Implicit(SharpDX.Direct3D11.Texture2DDescription)~SharpDX.Toolkit.Graphics.TextureDescription">
            <summary>
            Performs an explicit conversion from <see cref="T:SharpDX.Direct3D11.Texture2DDescription"/> to <see cref="T:SharpDX.Toolkit.Graphics.TextureDescription"/>.
            </summary>
            <param name="description">The texture description.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.TextureDescription.op_Implicit(SharpDX.Toolkit.Graphics.TextureDescription)~SharpDX.Direct3D11.Texture2DDescription">
            <summary>
            Performs an explicit conversion from <see cref="T:SharpDX.Toolkit.Graphics.TextureDescription"/> to <see cref="T:SharpDX.Direct3D11.Texture2DDescription"/>.
            </summary>
            <param name="description">The texture description.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.TextureDescription.op_Implicit(SharpDX.Direct3D11.Texture3DDescription)~SharpDX.Toolkit.Graphics.TextureDescription">
            <summary>
            Performs an explicit conversion from <see cref="T:SharpDX.Direct3D11.Texture2DDescription"/> to <see cref="T:SharpDX.Toolkit.Graphics.TextureDescription"/>.
            </summary>
            <param name="description">The texture description.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.TextureDescription.op_Implicit(SharpDX.Toolkit.Graphics.TextureDescription)~SharpDX.Direct3D11.Texture3DDescription">
            <summary>
            Performs an explicit conversion from <see cref="T:SharpDX.Toolkit.Graphics.TextureDescription"/> to <see cref="T:SharpDX.Direct3D11.Texture3DDescription"/>.
            </summary>
            <param name="description">The texture description.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.TextureDescription.op_Implicit(SharpDX.Toolkit.Graphics.ImageDescription)~SharpDX.Toolkit.Graphics.TextureDescription">
            <summary>
            Performs an explicit conversion from <see cref="T:SharpDX.Toolkit.Graphics.ImageDescription"/> to <see cref="T:SharpDX.Toolkit.Graphics.TextureDescription"/>.
            </summary>
            <param name="description">The image description.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.TextureDescription.op_Implicit(SharpDX.Toolkit.Graphics.TextureDescription)~SharpDX.Toolkit.Graphics.ImageDescription">
            <summary>
            Performs an explicit conversion from <see cref="T:SharpDX.Toolkit.Graphics.ImageDescription"/> to <see cref="T:SharpDX.Toolkit.Graphics.TextureDescription"/>.
            </summary>
            <param name="description">The image description.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.TextureDimension">
            <summary>
            Defines the dimension of a texture.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.TextureDimension.Texture1D">
            <summary>
            The texture dimension is 1D.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.TextureDimension.Texture2D">
            <summary>
            The texture dimension is 2D.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.TextureDimension.Texture3D">
            <summary>
            The texture dimension is 3D.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.TextureDimension.TextureCube">
            <summary>
            The texture dimension is a CubeMap.
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.TextureFlags">
            <summary>
            Specifies usage of a texture.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.TextureFlags.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.TextureFlags.ShaderResource">
            <summary>
            The texture will be used as a <see cref="T:SharpDX.Direct3D11.ShaderResourceView"/>.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.TextureFlags.RenderTarget">
            <summary>
            The texture will be used as a <see cref="T:SharpDX.Direct3D11.RenderTargetView"/>.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.TextureFlags.UnorderedAccess">
            <summary>
            The texture will be used as an <see cref="T:SharpDX.Direct3D11.UnorderedAccessView"/>.
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.TextureView">
            <summary>
            A texture view is a view on a specified mipmap set of a <see cref="P:SharpDX.Toolkit.Graphics.TextureView.Texture"/>, a RenderTarget or a <see cref="T:SharpDX.Toolkit.Graphics.DepthStencilBuffer"/>. 
            An instance of this class is castable to <see cref="T:SharpDX.Direct3D11.ShaderResourceView"/>, <see cref="T:SharpDX.Direct3D11.RenderTargetView"/> or <see cref="T:SharpDX.Direct3D11.DepthStencilView"/> depending on the underlying native view.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.TextureView.Initialize(SharpDX.Direct3D11.DeviceChild)">
            <summary>
            
            </summary>
            <param name="view"></param>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.TextureView.Width">
            <summary>
            Gets the width of this view (taking account the miplevel of the view).
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.TextureView.Height">
            <summary>
            Gets the height of this view (taking account the miplevel of the view).
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.TextureView.Format">
            <summary>
            Gets the format of this view.
            </summary>
            <value>The format.</value>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.TextureView.Description">
            <summary>
            The description.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.TextureView.View">
            <summary>
            Gets the view.
            </summary>
            <value>The view.</value>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.TextureView.IsRenderView">
            <summary>
            Gets a value indicating whether this instance is render view.
            </summary>
            <value><c>true</c> if this instance is render view; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.TextureView.IsDepthStencilView">
            <summary>
            Gets a value indicating whether this instance is a depth stencil view.
            </summary>
            <value><c>true</c> if this instance is a depth stencil view; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.TextureView.Texture">
            <summary>
            Gets the texture.
            </summary>
            <value>The texture.</value>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.TextureView.Size">
            <summary>
            The size of the view in pixel (taking account the miplevel of the view).
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.TextureView.TexelSize">
            <summary>
            The size of a texel in the view (1 texel = (1.0f / width of the view, 1.0f / height of the view)
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.TextureView.op_Implicit(SharpDX.Toolkit.Graphics.TextureView)~SharpDX.Direct3D11.ShaderResourceView">
            <summary>
            Performs an implicit conversion from <see cref="T:SharpDX.Toolkit.Graphics.TextureView"/> to <see cref="T:SharpDX.Direct3D11.ShaderResourceView"/>.
            </summary>
            <param name="view">The view.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.TextureView.op_Implicit(SharpDX.Toolkit.Graphics.TextureView)~SharpDX.Direct3D11.RenderTargetView">
            <summary>
            Performs an implicit conversion from <see cref="T:SharpDX.Toolkit.Graphics.TextureView"/> to <see cref="T:SharpDX.Direct3D11.RenderTargetView"/>.
            </summary>
            <param name="view">The view.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.TextureView.op_Implicit(SharpDX.Toolkit.Graphics.TextureView)~SharpDX.Direct3D11.DepthStencilView">
            <summary>
            Performs an implicit conversion from <see cref="T:SharpDX.Toolkit.Graphics.TextureView"/> to <see cref="T:SharpDX.Direct3D11.DepthStencilView"/>.
            </summary>
            <param name="view">The view.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.UnorderedAccessViewSelector">
            <summary>
            Used by <see cref="T:SharpDX.Toolkit.Graphics.Texture"/> to provide a selector to a <see cref="T:SharpDX.Direct3D11.UnorderedAccessView"/>.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.UnorderedAccessViewSelector.Item(System.Int32,System.Int32)">
            <summary>
            Gets a specific <see cref="T:SharpDX.Direct3D11.UnorderedAccessView" /> from this texture.
            </summary>
            <param name="arrayOrDepthSlice">The texture array slice index.</param>
            <param name="mipIndex">The mip map slice index.</param>
            <returns>An <see cref="T:SharpDX.Direct3D11.UnorderedAccessView" /></returns>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.ViewType">
            <summary>
            Defines how a view is selected from a resource.
            </summary>
            <remarks>
            This selection model is taken from Nuaj by Patapom (http://wiki.patapom.com/index.php/Nuaj)
            </remarks>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.ViewType.Full">
            <summary>
            Gets a texture view for the whole texture for all mips/arrays dimensions.
            </summary>
            <example>Here is what the view covers with whatever mipLevelIndex/arrayIndex
            
                   Array0 Array1 Array2
                  ______________________
             Mip0 |   X  |   X  |   X  |
                  |------+------+------|
             Mip1 |   X  |   X  |   X  |
                  |------+------+------|
             Mip2 |   X  |   X  |   X  |
                  ----------------------
            </example>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.ViewType.Single">
            <summary>
            Gets a single texture view at the specified index in the mip hierarchy and in the array of textures
            The texture view contains a single texture element at the specified mip level and array index
            </summary>
            <example>Here is what the view covers with mipLevelIndex=1 and mrrayIndex=1
            
                   Array0 Array1 Array2
                  ______________________
             Mip0 |      |      |      |
                  |------+------+------|
             Mip1 |      |  X   |      |
                  |------+------+------|
             Mip2 |      |      |      |
                  ----------------------
            </example>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.ViewType.ArrayBand">
            <summary>
            Gets a band texture view at the specified index in the mip hierarchy and in the array of textures
            The texture view contains all the mip level texture elements from the specified mip level and array index
            </summary>
            <example>Here is what the view covers with mipLevelIndex=1 and mrrayIndex=1
            
                   Array0 Array1 Array2
                  ______________________
             Mip0 |      |      |      |
                  |------+------+------|
             Mip1 |      |  X   |      |
                  |------+------+------|
             Mip2 |      |  X   |      |
                  ----------------------
            </example>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.ViewType.MipBand">
            <summary>
            Gets a band texture view at the specified index in the mip hierarchy and in the array of textures
            The texture view contains all the array texture elements from the specified mip level and array index
            </summary>
            <example>Here is what the view covers with mipLevelIndex=1 and mrrayIndex=1
            
                   Array0 Array1 Array2
                  ______________________
             Mip0 |      |      |      |
                  |------+------+------|
             Mip1 |      |  X   |  X   |
                  |------+------+------|
             Mip2 |      |      |      |
                  ----------------------
            </example>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.WICHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.WICHelper.ToDXGI(System.Guid)">
            <summary>
            Converts a WIC <see cref="T:SharpDX.WIC.PixelFormat"/> to a <see cref="T:SharpDX.DXGI.Format"/>.
            </summary>
            <param name="guid">A WIC <see cref="T:SharpDX.WIC.PixelFormat"/> </param>
            <returns>A <see cref="T:SharpDX.DXGI.Format"/></returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.WICHelper.ToWIC(SharpDX.DXGI.Format,System.Guid@)">
            <summary>
            Converts a <see cref="T:SharpDX.DXGI.Format"/> to a a WIC <see cref="T:SharpDX.WIC.PixelFormat"/>.
            </summary>
            <param name="format">A <see cref="T:SharpDX.DXGI.Format"/></param>
            <param name="guid">A WIC <see cref="T:SharpDX.WIC.PixelFormat"/> Guid.</param>
            <returns>True if conversion succeed, false otherwise.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.WICHelper.GetBitsPerPixel(System.Guid)">
            <summary>
            Gets the number of bits per pixels for a WIC <see cref="T:SharpDX.WIC.PixelFormat"/> Guid.
            </summary>
            <param name="targetGuid">A WIC <see cref="T:SharpDX.WIC.PixelFormat"/> Guid.</param>
            <returns>The number of bits per pixels for a WIC. If this method is failing to calculate the number of pixels, return 0.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.WICHelper.DecodeMetadata(SharpDX.Toolkit.Graphics.WICFlags,SharpDX.WIC.BitmapDecoder,SharpDX.WIC.BitmapFrameDecode,System.Guid@)">
            <summary>
            Determines metadata for image
            </summary>
            <param name="flags">The flags.</param>
            <param name="decoder">The decoder.</param>
            <param name="frame">The frame.</param>
            <param name="pixelFormat">The pixel format.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">If pixel format is not supported.</exception>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.WICHelper.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="T:SharpDX.IComponent">
            <summary>
            Base interface for a component base.
            </summary>
        </member>
        <member name="P:SharpDX.IComponent.Name">
            <summary>
            Gets the name of this component.
            </summary>
            <value>The name.</value>
        </member>
    </members>
</doc>
